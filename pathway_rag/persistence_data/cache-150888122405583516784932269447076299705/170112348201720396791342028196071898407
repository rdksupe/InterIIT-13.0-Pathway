Pathway API
===============

[for developers](https://pathway.com/developers/user-guide/introduction/welcome)

*   [Homepage](https://pathway.com/)

Search⌘K

[6k](https://github.com/pathwaycom/)

[Live Data Framework](https://pathway.com/developers/user-guide/introduction/welcome)[AI Pipelines](https://pathway.com/developers/ai-pipelines/welcome)[Connectors](https://pathway.com/developers/user-guide/connect/pathway-connectors)[API Docs](https://pathway.com/developers/api-docs/pathway)[App Templates](https://pathway.com/developers/templates)[Get help](https://pathway.com/developers/user-guide/development/get-help)

*   [Pathway API](https://pathway.com/developers/api-docs/pathway)
*   [pw.Table](https://pathway.com/developers/api-docs/pathway-table)
*   [pw.asynchronous](https://pathway.com/developers/api-docs/asynchronous)
*   [pw.debug](https://pathway.com/developers/api-docs/debug)
*   [pw.demo](https://pathway.com/developers/api-docs/pathway-demo)
*   [pw.indexing](https://pathway.com/developers/api-docs/indexing)
*   [pw.io](https://pathway.com/developers/api-docs/pathway-io)
    *   [pw.io.airbyte](https://pathway.com/developers/api-docs/pathway-io/airbyte)
    *   [pw.io.bigquery](https://pathway.com/developers/api-docs/pathway-io/bigquery)
    *   [pw.io.csv](https://pathway.com/developers/api-docs/pathway-io/csv)
    *   [pw.io.debezium](https://pathway.com/developers/api-docs/pathway-io/debezium)
    *   [pw.io.deltalake](https://pathway.com/developers/api-docs/pathway-io/deltalake)
    *   [pw.io.elasticsearch](https://pathway.com/developers/api-docs/pathway-io/elasticsearch)
    *   [pw.io.fs](https://pathway.com/developers/api-docs/pathway-io/fs)
    *   [pw.io.gdrive](https://pathway.com/developers/api-docs/pathway-io/gdrive)
    *   [pw.io.http](https://pathway.com/developers/api-docs/pathway-io/http)
    *   [pw.io.jsonlines](https://pathway.com/developers/api-docs/pathway-io/jsonlines)
    *   [pw.io.kafka](https://pathway.com/developers/api-docs/pathway-io/kafka)
    *   [pw.io.logstash](https://pathway.com/developers/api-docs/pathway-io/logstash)
    *   [pw.io.minio](https://pathway.com/developers/api-docs/pathway-io/minio)
    *   [pw.io.mongodb](https://pathway.com/developers/api-docs/pathway-io/mongodb)
    *   [pw.io.nats](https://pathway.com/developers/api-docs/pathway-io/nats)
    *   [pw.io.null](https://pathway.com/developers/api-docs/pathway-io/null)
    *   [pw.io.plaintext](https://pathway.com/developers/api-docs/pathway-io/plaintext)
    *   [pw.io.postgres](https://pathway.com/developers/api-docs/pathway-io/postgres)
    *   [pw.io.pubsub](https://pathway.com/developers/api-docs/pathway-io/pubsub)
    *   [pw.io.pyfilesystem](https://pathway.com/developers/api-docs/pathway-io/pyfilesystem)
    *   [pw.io.python](https://pathway.com/developers/api-docs/pathway-io/python)
    *   [pw.io.redpanda](https://pathway.com/developers/api-docs/pathway-io/redpanda)
    *   [pw.io.s3](https://pathway.com/developers/api-docs/pathway-io/s3)
    *   [pw.io.slack](https://pathway.com/developers/api-docs/pathway-io/slack)
    *   [pw.io.sqlite](https://pathway.com/developers/api-docs/pathway-io/sqlite)
    
*   [pw.ml](https://pathway.com/developers/api-docs/ml)
*   [pw.persistence](https://pathway.com/developers/api-docs/persistence-api)
*   [pw.reducers](https://pathway.com/developers/api-docs/reducers)
*   [pw.sql](https://pathway.com/developers/api-docs/sql-api)
*   [pw.temporal](https://pathway.com/developers/api-docs/temporal)
*   [pw.udfs](https://pathway.com/developers/api-docs/udfs)
*   [pw.xpacks.connectors](https://pathway.com/developers/api-docs/pathway-xpacks-sharepoint)
*   [pw.xpacks.llm](https://pathway.com/developers/api-docs/pathway-xpacks-llm)
    *   [pw.xpacks.llm.llms](https://pathway.com/developers/api-docs/pathway-xpacks-llm/llms)
    *   [pw.xpacks.llm.embedders](https://pathway.com/developers/api-docs/pathway-xpacks-llm/embedders)
    *   [pw.xpacks.llm.parsers](https://pathway.com/developers/api-docs/pathway-xpacks-llm/parsers)
    *   [pw.xpacks.llm.splitters](https://pathway.com/developers/api-docs/pathway-xpacks-llm/splitters)
    *   [pw.xpacks.llm.vector\_store](https://pathway.com/developers/api-docs/pathway-xpacks-llm/vectorstore)
    *   [pw.xpacks.llm.document\_store](https://pathway.com/developers/api-docs/pathway-xpacks-llm/document_store)
    *   [pw.xpacks.llm.question\_answering](https://pathway.com/developers/api-docs/pathway-xpacks-llm/question_answering)
    *   [pw.xpacks.llm.prompts](https://pathway.com/developers/api-docs/pathway-xpacks-llm/prompts)
    *   [pw.xpacks.llm.rerankers](https://pathway.com/developers/api-docs/pathway-xpacks-llm/rerankers)
    *   [pw.xpacks.llm.servers](https://pathway.com/developers/api-docs/pathway-xpacks-llm/servers)
    

Table of Contents

Table of Contents

*   [pw.AsyncTransformer](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer "class  pw.AsyncTransformer(input_table, *, instance=pw.this.id, autocommit_duration_ms=1500)")
    *   [close](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.close "close()")
    *   [abstract async invoke](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.invoke "abstract async  invoke(*args, **kwargs)")
    *   [open](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.open "open()")
    *   [with\_options](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.with_options "with_options(capacity=None, timeout=None, retry_strategy=None, cache_strategy=None)")
    *   [failed: Table](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.failed "property  failed: Table ")
    *   [finished: Table](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.finished "property  finished: Table ")
    *   [output\_table: Table](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.output_table "property  output_table: Table ")
    *   [result: Table](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.result "property  result: Table ")
    *   [successful: Table](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.successful "property  successful: Table ")
*   [pw.BaseCustomAccumulator](https://pathway.com/developers/api-docs/pathway/#pathway.BaseCustomAccumulator "class  pw.BaseCustomAccumulator")
    *   [abstract compute\_result](https://pathway.com/developers/api-docs/pathway/#pathway.BaseCustomAccumulator.compute_result "abstract  compute_result()")
    *   [classmethod deserialize](https://pathway.com/developers/api-docs/pathway/#pathway.BaseCustomAccumulator.deserialize "classmethod  deserialize(val)")
    *   [abstract classmethod from\_row](https://pathway.com/developers/api-docs/pathway/#pathway.BaseCustomAccumulator.from_row "abstract classmethod  from_row(row)")
    *   [classmethod neutral](https://pathway.com/developers/api-docs/pathway/#pathway.BaseCustomAccumulator.neutral "classmethod  neutral()")
    *   [retract](https://pathway.com/developers/api-docs/pathway/#pathway.BaseCustomAccumulator.retract "retract(other)")
    *   [serialize](https://pathway.com/developers/api-docs/pathway/#pathway.BaseCustomAccumulator.serialize "serialize()")
    *   [abstract update](https://pathway.com/developers/api-docs/pathway/#pathway.BaseCustomAccumulator.update "abstract  update(other)")
*   [pw.ColumnExpression](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression "class  pw.ColumnExpression")
    *   [as\_bool](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression.as_bool "as_bool()")
    *   [as\_float](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression.as_float "as_float()")
    *   [as\_int](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression.as_int "as_int()")
    *   [as\_str](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression.as_str "as_str()")
    *   [get](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression.get "get(index, default=None)")
    *   [is\_none](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression.is_none "is_none()")
    *   [is\_not\_none](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression.is_not_none "is_not_none()")
    *   [to\_string](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression.to_string "to_string()")
*   [pw.ColumnReference](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnReference "class  pw.ColumnReference()")
    *   [name](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnReference.name "property  name")
    *   [table](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnReference.table "property  table")
*   [pw.DateTimeNaive](https://pathway.com/developers/api-docs/pathway/#pathway.DateTimeNaive "class  pw.DateTimeNaive(ts_input=<object object>, year=None, month=None, day=None, hour=None, minute=None, second=None, microsecond=None, tzinfo=None, *, nanosecond=None, tz=None, unit=None, fold=None)")
*   [pw.DateTimeUtc](https://pathway.com/developers/api-docs/pathway/#pathway.DateTimeUtc "class  pw.DateTimeUtc(ts_input=<object object>, year=None, month=None, day=None, hour=None, minute=None, second=None, microsecond=None, tzinfo=None, *, nanosecond=None, tz=None, unit=None, fold=None)")
*   [pw.Duration](https://pathway.com/developers/api-docs/pathway/#pathway.Duration "class  pw.Duration(value=<object object>, unit=None, **kwargs)")
*   [pw.GroupedJoinResult](https://pathway.com/developers/api-docs/pathway/#pathway.GroupedJoinResult "class  pw.GroupedJoinResult()")
    *   [reduce](https://pathway.com/developers/api-docs/pathway/#pathway.GroupedJoinResult.reduce "reduce(*args, **kwargs)")
*   [pw.GroupedTable](https://pathway.com/developers/api-docs/pathway/#pathway.GroupedTable "class  pw.GroupedTable()")
    *   [reduce](https://pathway.com/developers/api-docs/pathway/#pathway.GroupedTable.reduce "reduce(*args, **kwargs)")
*   [pw.JoinMode](https://pathway.com/developers/api-docs/pathway/#pathway.JoinMode "class  pw.JoinMode(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None)")
    *   [INNER = 0](https://pathway.com/developers/api-docs/pathway/#pathway.JoinMode.INNER "INNER = 0 ")
    *   [LEFT = 1](https://pathway.com/developers/api-docs/pathway/#pathway.JoinMode.LEFT "LEFT = 1 ")
    *   [OUTER = 3](https://pathway.com/developers/api-docs/pathway/#pathway.JoinMode.OUTER "OUTER = 3 ")
    *   [RIGHT = 2](https://pathway.com/developers/api-docs/pathway/#pathway.JoinMode.RIGHT "RIGHT = 2 ")
*   [pw.JoinResult](https://pathway.com/developers/api-docs/pathway/#pathway.JoinResult "class  pw.JoinResult()")
    *   [filter](https://pathway.com/developers/api-docs/pathway/#pathway.JoinResult.filter "filter(filter_expression)")
    *   [groupby](https://pathway.com/developers/api-docs/pathway/#pathway.JoinResult.groupby "groupby(*args, id=None)")
    *   [reduce](https://pathway.com/developers/api-docs/pathway/#pathway.JoinResult.reduce "reduce(*args, **kwargs)")
    *   [select](https://pathway.com/developers/api-docs/pathway/#pathway.JoinResult.select "select(*args, **kwargs)")
*   [pw.Joinable](https://pathway.com/developers/api-docs/pathway/#pathway.Joinable "class  pw.Joinable(context)")
    *   [join](https://pathway.com/developers/api-docs/pathway/#pathway.Joinable.join "join(other, *on, id=None, how=JoinMode.INNER, left_instance=None, right_instance=None)")
    *   [join\_inner](https://pathway.com/developers/api-docs/pathway/#pathway.Joinable.join_inner "join_inner(other, *on, id=None, left_instance=None, right_instance=None)")
    *   [join\_left](https://pathway.com/developers/api-docs/pathway/#pathway.Joinable.join_left "join_left(other, *on, id=None, left_instance=None, right_instance=None)")
    *   [join\_outer](https://pathway.com/developers/api-docs/pathway/#pathway.Joinable.join_outer "join_outer(other, *on, id=None, left_instance=None, right_instance=None)")
    *   [join\_right](https://pathway.com/developers/api-docs/pathway/#pathway.Joinable.join_right "join_right(other, *on, id=None, left_instance=None, right_instance=None)")
    *   [C: ColumnNamespace](https://pathway.com/developers/api-docs/pathway/#pathway.Joinable.C "property  C: ColumnNamespace ")
*   [pw.Json](https://pathway.com/developers/api-docs/pathway/#pathway.Json "class  pw.Json()")
    *   [as\_bool](https://pathway.com/developers/api-docs/pathway/#pathway.Json.as_bool "as_bool()")
    *   [as\_dict](https://pathway.com/developers/api-docs/pathway/#pathway.Json.as_dict "as_dict()")
    *   [as\_float](https://pathway.com/developers/api-docs/pathway/#pathway.Json.as_float "as_float()")
    *   [as\_int](https://pathway.com/developers/api-docs/pathway/#pathway.Json.as_int "as_int()")
    *   [as\_list](https://pathway.com/developers/api-docs/pathway/#pathway.Json.as_list "as_list()")
    *   [as\_str](https://pathway.com/developers/api-docs/pathway/#pathway.Json.as_str "as_str()")
*   [pw.LiveTable](https://pathway.com/developers/api-docs/pathway/#pathway.LiveTable "class  pw.LiveTable()")
*   [pw.Schema](https://pathway.com/developers/api-docs/pathway/#pathway.Schema "class  pw.Schema")
*   [pw.SchemaProperties](https://pathway.com/developers/api-docs/pathway/#pathway.SchemaProperties "class  pw.SchemaProperties(append_only=None)")
*   [pw.Table](https://pathway.com/developers/api-docs/pathway/#pathway.Table "class  pw.Table()")
    *   [asof\_join](https://pathway.com/developers/api-docs/pathway/#pathway.Table.asof_join "asof_join(other, self_time, other_time, *on, how, behavior=None, defaults={}, direction=Direction.BACKWARD, left_instance=None, right_instance=None)")
    *   [asof\_join\_left](https://pathway.com/developers/api-docs/pathway/#pathway.Table.asof_join_left "asof_join_left(other, self_time, other_time, *on, behavior=None, defaults={}, direction=Direction.BACKWARD, left_instance=None, right_instance=None)")
    *   [asof\_join\_outer](https://pathway.com/developers/api-docs/pathway/#pathway.Table.asof_join_outer "asof_join_outer(other, self_time, other_time, *on, behavior=None, defaults={}, direction=Direction.BACKWARD, left_instance=None, right_instance=None)")
    *   [asof\_join\_right](https://pathway.com/developers/api-docs/pathway/#pathway.Table.asof_join_right "asof_join_right(other, self_time, other_time, *on, behavior=None, defaults={}, direction=Direction.BACKWARD, left_instance=None, right_instance=None)")
    *   [asof\_now\_join](https://pathway.com/developers/api-docs/pathway/#pathway.Table.asof_now_join "asof_now_join(other, *on, how=JoinMode.INNER, id=None, left_instance=None, right_instance=None)")
    *   [asof\_now\_join\_inner](https://pathway.com/developers/api-docs/pathway/#pathway.Table.asof_now_join_inner "asof_now_join_inner(other, *on, id=None, left_instance=None, right_instance=None)")
    *   [asof\_now\_join\_left](https://pathway.com/developers/api-docs/pathway/#pathway.Table.asof_now_join_left "asof_now_join_left(other, *on, id=None, left_instance=None, right_instance=None)")
    *   [cast\_to\_types](https://pathway.com/developers/api-docs/pathway/#pathway.Table.cast_to_types "cast_to_types(**kwargs)")
    *   [concat](https://pathway.com/developers/api-docs/pathway/#pathway.Table.concat "concat(*others)")
    *   [concat\_reindex](https://pathway.com/developers/api-docs/pathway/#pathway.Table.concat_reindex "concat_reindex(*tables)")
    *   [copy](https://pathway.com/developers/api-docs/pathway/#pathway.Table.copy "copy()")
    *   [deduplicate](https://pathway.com/developers/api-docs/pathway/#pathway.Table.deduplicate "deduplicate(*, value, instance=None, acceptor, persistent_id=None)")
    *   [diff](https://pathway.com/developers/api-docs/pathway/#pathway.Table.diff "diff(timestamp, *values, instance=None)")
    *   [difference](https://pathway.com/developers/api-docs/pathway/#pathway.Table.difference "difference(other)")
    *   [empty](https://pathway.com/developers/api-docs/pathway/#pathway.Table.empty "empty()")
    *   [filter](https://pathway.com/developers/api-docs/pathway/#pathway.Table.filter "filter(filter_expression)")
    *   [flatten](https://pathway.com/developers/api-docs/pathway/#pathway.Table.flatten "flatten(to_flatten, *, origin_id=None)")
    *   [from\_columns](https://pathway.com/developers/api-docs/pathway/#pathway.Table.from_columns "from_columns(**kwargs)")
    *   [groupby](https://pathway.com/developers/api-docs/pathway/#pathway.Table.groupby "groupby(*args, id=None, sort_by=None, instance=None, )")
    *   [interpolate](https://pathway.com/developers/api-docs/pathway/#pathway.Table.interpolate "interpolate(timestamp, *values, mode=InterpolateMode.LINEAR)")
    *   [intersect](https://pathway.com/developers/api-docs/pathway/#pathway.Table.intersect "intersect(*tables)")
    *   [interval\_join](https://pathway.com/developers/api-docs/pathway/#pathway.Table.interval_join "interval_join(other, self_time, other_time, interval, *on, behavior=None, how=JoinMode.INNER, left_instance=None, right_instance=None)")
    *   [interval\_join\_inner](https://pathway.com/developers/api-docs/pathway/#pathway.Table.interval_join_inner "interval_join_inner(other, self_time, other_time, interval, *on, behavior=None, left_instance=None, right_instance=None)")
    *   [interval\_join\_left](https://pathway.com/developers/api-docs/pathway/#pathway.Table.interval_join_left "interval_join_left(other, self_time, other_time, interval, *on, behavior=None, left_instance=None, right_instance=None)")
    *   [interval\_join\_outer](https://pathway.com/developers/api-docs/pathway/#pathway.Table.interval_join_outer "interval_join_outer(other, self_time, other_time, interval, *on, behavior=None, left_instance=None, right_instance=None)")
    *   [interval\_join\_right](https://pathway.com/developers/api-docs/pathway/#pathway.Table.interval_join_right "interval_join_right(other, self_time, other_time, interval, *on, behavior=None, left_instance=None, right_instance=None)")
    *   [ix](https://pathway.com/developers/api-docs/pathway/#pathway.Table.ix "ix(expression, *, optional=False, context=None, allow_misses=False)")
    *   [ix\_ref](https://pathway.com/developers/api-docs/pathway/#pathway.Table.ix_ref "ix_ref(*args, optional=False, context=None, instance=None, allow_misses=False)")
    *   [plot](https://pathway.com/developers/api-docs/pathway/#pathway.Table.plot "plot(plotting_function, sorting_col=None)")
    *   [pointer\_from](https://pathway.com/developers/api-docs/pathway/#pathway.Table.pointer_from "pointer_from(*args, optional=False, instance=None)")
    *   [reduce](https://pathway.com/developers/api-docs/pathway/#pathway.Table.reduce "reduce(*args, **kwargs)")
    *   [remove\_errors](https://pathway.com/developers/api-docs/pathway/#pathway.Table.remove_errors "remove_errors()")
    *   [rename](https://pathway.com/developers/api-docs/pathway/#pathway.Table.rename "rename(names_mapping=None, **kwargs)")
    *   [rename\_by\_dict](https://pathway.com/developers/api-docs/pathway/#pathway.Table.rename_by_dict "rename_by_dict(names_mapping)")
    *   [rename\_columns](https://pathway.com/developers/api-docs/pathway/#pathway.Table.rename_columns "rename_columns(**kwargs)")
    *   [restrict](https://pathway.com/developers/api-docs/pathway/#pathway.Table.restrict "restrict(other)")
    *   [select](https://pathway.com/developers/api-docs/pathway/#pathway.Table.select "select(*args, **kwargs)")
    *   [show](https://pathway.com/developers/api-docs/pathway/#pathway.Table.show "show(*, snapshot=True, include_id=True, short_pointers=True, sorters=None)")
    *   [sort](https://pathway.com/developers/api-docs/pathway/#pathway.Table.sort "sort(key, instance=None)")
    *   [split](https://pathway.com/developers/api-docs/pathway/#pathway.Table.split "split(split_expression)")
    *   [typehints](https://pathway.com/developers/api-docs/pathway/#pathway.Table.typehints "typehints()")
    *   [update\_cells](https://pathway.com/developers/api-docs/pathway/#pathway.Table.update_cells "update_cells(other, )")
    *   [update\_rows](https://pathway.com/developers/api-docs/pathway/#pathway.Table.update_rows "update_rows(other)")
    *   [update\_types](https://pathway.com/developers/api-docs/pathway/#pathway.Table.update_types "update_types(**kwargs)")
    *   [window\_join](https://pathway.com/developers/api-docs/pathway/#pathway.Table.window_join "window_join(other, self_time, other_time, window, *on, how=JoinMode.INNER, left_instance=None, right_instance=None)")
    *   [window\_join\_inner](https://pathway.com/developers/api-docs/pathway/#pathway.Table.window_join_inner "window_join_inner(other, self_time, other_time, window, *on, left_instance=None, right_instance=None)")
    *   [window\_join\_left](https://pathway.com/developers/api-docs/pathway/#pathway.Table.window_join_left "window_join_left(other, self_time, other_time, window, *on, left_instance=None, right_instance=None)")
    *   [window\_join\_outer](https://pathway.com/developers/api-docs/pathway/#pathway.Table.window_join_outer "window_join_outer(other, self_time, other_time, window, *on, left_instance=None, right_instance=None)")
    *   [window\_join\_right](https://pathway.com/developers/api-docs/pathway/#pathway.Table.window_join_right "window_join_right(other, self_time, other_time, window, *on, left_instance=None, right_instance=None)")
    *   [windowby](https://pathway.com/developers/api-docs/pathway/#pathway.Table.windowby "windowby(time_expr, *, window, behavior=None, instance=None)")
    *   [with\_columns](https://pathway.com/developers/api-docs/pathway/#pathway.Table.with_columns "with_columns(*args, **kwargs)")
    *   [with\_id](https://pathway.com/developers/api-docs/pathway/#pathway.Table.with_id "with_id(new_index)")
    *   [with\_id\_from](https://pathway.com/developers/api-docs/pathway/#pathway.Table.with_id_from "with_id_from(*args, instance=None)")
    *   [with\_prefix](https://pathway.com/developers/api-docs/pathway/#pathway.Table.with_prefix "with_prefix(prefix)")
    *   [with\_suffix](https://pathway.com/developers/api-docs/pathway/#pathway.Table.with_suffix "with_suffix(suffix)")
    *   [with\_universe\_of](https://pathway.com/developers/api-docs/pathway/#pathway.Table.with_universe_of "with_universe_of(other)")
    *   [without](https://pathway.com/developers/api-docs/pathway/#pathway.Table.without "without(*columns)")
    *   [id: ColumnReference](https://pathway.com/developers/api-docs/pathway/#pathway.Table.id "property  id: ColumnReference ")
    *   [schema: type\[pathway.internals.schema.Schema\]](https://pathway.com/developers/api-docs/pathway/#pathway.Table.schema "property  schema: type[pathway.internals.schema.Schema] ")
    *   [slice: TableSlice](https://pathway.com/developers/api-docs/pathway/#pathway.Table.slice "property  slice: TableSlice ")
*   [pw.TableLike](https://pathway.com/developers/api-docs/pathway/#pathway.TableLike "class  pw.TableLike(context)")
    *   [promise\_universe\_is\_equal\_to](https://pathway.com/developers/api-docs/pathway/#pathway.TableLike.promise_universe_is_equal_to "promise_universe_is_equal_to(other)")
    *   [promise\_universe\_is\_subset\_of](https://pathway.com/developers/api-docs/pathway/#pathway.TableLike.promise_universe_is_subset_of "promise_universe_is_subset_of(other)")
    *   [promise\_universes\_are\_disjoint](https://pathway.com/developers/api-docs/pathway/#pathway.TableLike.promise_universes_are_disjoint "promise_universes_are_disjoint(other)")
*   [pw.TableSlice](https://pathway.com/developers/api-docs/pathway/#pathway.TableSlice "class  pw.TableSlice(mapping, table)")
*   [pw.UDF](https://pathway.com/developers/api-docs/pathway/#pathway.UDF "class  pw.UDF(*, return_type=..., deterministic=False, propagate_none=False, executor=AutoExecutor(), cache_strategy=None)")
*   [pw.UDFAsync](https://pathway.com/developers/api-docs/pathway/#pathway.UDFAsync "class  pw.UDFAsync(*, capacity=None, retry_strategy=None, cache_strategy=None)")
*   [pw.UDFSync](https://pathway.com/developers/api-docs/pathway/#pathway.UDFSync "class  pw.UDFSync(*, return_type=..., deterministic=False, propagate_none=False, executor=AutoExecutor(), cache_strategy=None)")
*   [pw.iterate\_universe](https://pathway.com/developers/api-docs/pathway/#pathway.iterate_universe "class  pw.iterate_universe(table)")
*   [pw.left](https://pathway.com/developers/api-docs/pathway/#pathway.left "class  pw.left")
*   [pw.right](https://pathway.com/developers/api-docs/pathway/#pathway.right "class  pw.right")
*   [pw.this](https://pathway.com/developers/api-docs/pathway/#pathway.this "class  pw.this")
*   [pw.apply](https://pathway.com/developers/api-docs/pathway/#pathway.apply "
    pw.apply(fun, *args, **kwargs)")
*   [pw.apply\_async](https://pathway.com/developers/api-docs/pathway/#pathway.apply_async "
    pw.apply_async(fun, *args, **kwargs)")
*   [pw.apply\_with\_type](https://pathway.com/developers/api-docs/pathway/#pathway.apply_with_type "
    pw.apply_with_type(fun, ret_type, *args, **kwargs)")
*   [pw.assert\_table\_has\_schema](https://pathway.com/developers/api-docs/pathway/#pathway.assert_table_has_schema "
    pw.assert_table_has_schema(table, schema, *, allow_superset=True, ignore_primary_keys=True, allow_subtype=True)")
*   [pw.cast](https://pathway.com/developers/api-docs/pathway/#pathway.cast "
    pw.cast(target_type, col)")
*   [pw.coalesce](https://pathway.com/developers/api-docs/pathway/#pathway.coalesce "
    pw.coalesce(*args)")
*   [pw.column\_definition](https://pathway.com/developers/api-docs/pathway/#pathway.column_definition "
    pw.column_definition(*, primary_key=False, default_value=_no_default_value_marker, dtype=None, name=None, append_only=None, description=None, example=None)")
*   [pw.declare\_type](https://pathway.com/developers/api-docs/pathway/#pathway.declare_type "
    pw.declare_type(target_type, col)")
*   [pw.fill\_error](https://pathway.com/developers/api-docs/pathway/#pathway.fill_error "
    pw.fill_error(col, replacement)")
*   [pw.groupby](https://pathway.com/developers/api-docs/pathway/#pathway.groupby "
    pw.groupby(grouped, *args, id=None, **kwargs)")
*   [pw.if\_else](https://pathway.com/developers/api-docs/pathway/#pathway.if_else "
    pw.if_else(if_clause, then_clause, else_clause)")
*   [pw.iterate](https://pathway.com/developers/api-docs/pathway/#pathway.iterate "
    pw.iterate(func, iteration_limit=None, **kwargs)")
*   [pw.join](https://pathway.com/developers/api-docs/pathway/#pathway.join "
    pw.join(left, right, *on, id=None, how=JoinMode.INNER, left_instance=None, right_instance=None)")
*   [pw.join\_inner](https://pathway.com/developers/api-docs/pathway/#pathway.join_inner "
    pw.join_inner(left, right, *on, id=None, left_instance=None, right_instance=None)")
*   [pw.join\_left](https://pathway.com/developers/api-docs/pathway/#pathway.join_left "
    pw.join_left(left, right, *on, id=None, left_instance=None, right_instance=None)")
*   [pw.join\_outer](https://pathway.com/developers/api-docs/pathway/#pathway.join_outer "
    pw.join_outer(left, right, *on, id=None, left_instance=None, right_instance=None)")
*   [pw.join\_right](https://pathway.com/developers/api-docs/pathway/#pathway.join_right "
    pw.join_right(left, right, *on, id=None, left_instance=None, right_instance=None)")
*   [pw.make\_tuple](https://pathway.com/developers/api-docs/pathway/#pathway.make_tuple "
    pw.make_tuple(*args)")
*   [pw.pandas\_transformer](https://pathway.com/developers/api-docs/pathway/#pathway.pandas_transformer "
    pw.pandas_transformer(output_schema, output_universe=None)")
*   [pw.require](https://pathway.com/developers/api-docs/pathway/#pathway.require "
    pw.require(val, *deps)")
*   [pw.run](https://pathway.com/developers/api-docs/pathway/#pathway.run "
    pw.run(*, debug=False, monitoring_level=MonitoringLevel.AUTO, with_http_server=False, default_logging=True, persistence_config=None, runtime_typechecking=None, license_key=None, terminate_on_error=None)")
*   [pw.run\_all](https://pathway.com/developers/api-docs/pathway/#pathway.run_all "
    pw.run_all(*, debug=False, monitoring_level=MonitoringLevel.AUTO, with_http_server=False, default_logging=True, persistence_config=None, runtime_typechecking=None, license_key=None, terminate_on_error=None)")
*   [pw.schema\_builder](https://pathway.com/developers/api-docs/pathway/#pathway.schema_builder "
    pw.schema_builder(columns, *, name=None, properties=SchemaProperties(), id_type=Pointer)")
*   [pw.schema\_from\_csv](https://pathway.com/developers/api-docs/pathway/#pathway.schema_from_csv "
    pw.schema_from_csv(path, *, name=None, properties=SchemaProperties(), delimiter=',', quote='\"', comment_character=None, escape=None, double_quote_escapes=True, num_parsed_rows=None)")
*   [pw.schema\_from\_dict](https://pathway.com/developers/api-docs/pathway/#pathway.schema_from_dict "
    pw.schema_from_dict(columns, *, name=None, properties=SchemaProperties())")
*   [pw.schema\_from\_types](https://pathway.com/developers/api-docs/pathway/#pathway.schema_from_types "
    pw.schema_from_types(**kwargs)")
*   [pw.set\_license\_key](https://pathway.com/developers/api-docs/pathway/#pathway.set_license_key "
    pw.set_license_key(key)")
*   [pw.set\_monitoring\_config](https://pathway.com/developers/api-docs/pathway/#pathway.set_monitoring_config "
    pw.set_monitoring_config(*, server_endpoint)")
*   [pw.sql](https://pathway.com/developers/api-docs/pathway/#pathway.sql "
    pw.sql(query, **kwargs)")
*   [pw.table\_transformer](https://pathway.com/developers/api-docs/pathway/#pathway.table_transformer "
    pw.table_transformer(func=None, *, allow_superset=True, ignore_primary_keys=True, allow_subtype=True, locals=None)")
*   [pw.udf](https://pathway.com/developers/api-docs/pathway/#pathway.udf "
    pw.udf(fun, /, *, return_type=Ellipsis, deterministic=False, propagate_none=False, executor=AutoExecutor(), cache_strategy=None)")
*   [pw.udf\_async](https://pathway.com/developers/api-docs/pathway/#pathway.udf_async "
    pw.udf_async(fun=None, *, capacity=None, retry_strategy=None, cache_strategy=None)")
*   [pw.unwrap](https://pathway.com/developers/api-docs/pathway/#pathway.unwrap "
    pw.unwrap(col)")
*   [pw.wrap\_py\_object](https://pathway.com/developers/api-docs/pathway/#pathway.wrap_py_object "
    pw.wrap_py_object(object, *, serializer=None)")
*   [pw.MonitoringLevel](https://pathway.com/developers/api-docs/pathway/#pathway.MonitoringLevel "class  pw.MonitoringLevel")
    *   [AUTO = 0](https://pathway.com/developers/api-docs/pathway/#pathway.MonitoringLevel.AUTO "AUTO = 0 ")
    *   [AUTO\_ALL = 1](https://pathway.com/developers/api-docs/pathway/#pathway.MonitoringLevel.AUTO_ALL "AUTO_ALL = 1 ")
    *   [NONE = 2](https://pathway.com/developers/api-docs/pathway/#pathway.MonitoringLevel.NONE "NONE = 2 ")
    *   [IN\_OUT = 3](https://pathway.com/developers/api-docs/pathway/#pathway.MonitoringLevel.IN_OUT "IN_OUT = 3 ")
    *   [ALL = 4](https://pathway.com/developers/api-docs/pathway/#pathway.MonitoringLevel.ALL "ALL = 4 ")
*   [pw.DateTimeNamespace](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace "class  pw.DateTimeNamespace(expression)")
    *   [add\_duration\_in\_timezone](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.add_duration_in_timezone "add_duration_in_timezone(duration, timezone)")
    *   [day](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.day "day()")
    *   [days](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.days "days()")
    *   [floor](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.floor "floor(duration)")
    *   [from\_timestamp](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.from_timestamp "from_timestamp(unit)")
    *   [hour](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.hour "hour()")
    *   [hours](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.hours "hours()")
    *   [microsecond](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.microsecond "microsecond()")
    *   [microseconds](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.microseconds "microseconds()")
    *   [millisecond](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.millisecond "millisecond()")
    *   [milliseconds](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.milliseconds "milliseconds()")
    *   [minute](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.minute "minute()")
    *   [minutes](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.minutes "minutes()")
    *   [month](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.month "month()")
    *   [nanosecond](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.nanosecond "nanosecond()")
    *   [nanoseconds](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.nanoseconds "nanoseconds()")
    *   [round](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.round "round(duration)")
    *   [second](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.second "second()")
    *   [seconds](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.seconds "seconds()")
    *   [strftime](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.strftime "strftime(fmt)")
    *   [strptime](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.strptime "strptime(fmt, contains_timezone=None)")
    *   [subtract\_date\_time\_in\_timezone](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.subtract_date_time_in_timezone "subtract_date_time_in_timezone(date_time, timezone)")
    *   [subtract\_duration\_in\_timezone](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.subtract_duration_in_timezone "subtract_duration_in_timezone(duration, timezone)")
    *   [timestamp](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.timestamp "timestamp(unit=None)")
    *   [to\_naive\_in\_timezone](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.to_naive_in_timezone "to_naive_in_timezone(timezone)")
    *   [to\_utc](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.to_utc "to_utc(from_timezone)")
    *   [utc\_from\_timestamp](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.utc_from_timestamp "utc_from_timestamp(unit)")
    *   [weekday](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.weekday "weekday()")
    *   [weeks](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.weeks "weeks()")
    *   [year](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.year "year()")
*   [pw.NumericalNamespace](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.NumericalNamespace "class  pw.NumericalNamespace(expression)")
    *   [abs](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.NumericalNamespace.abs "abs()")
    *   [fill\_na](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.NumericalNamespace.fill_na "fill_na(default_value)")
    *   [round](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.NumericalNamespace.round "round(decimals=0)")
*   [pw.StringNamespace](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace "class  pw.StringNamespace(expression)")
    *   [count](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.count "count(sub, start=None, end=None)")
    *   [endswith](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.endswith "endswith(suffix)")
    *   [find](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.find "find(sub, start=None, end=None)")
    *   [len](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.len "len()")
    *   [lower](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.lower "lower()")
    *   [parse\_bool](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.parse_bool "parse_bool(true_values=default_true_values, false_values=default_false_values, optional=False)")
    *   [parse\_float](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.parse_float "parse_float(optional=False)")
    *   [parse\_int](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.parse_int "parse_int(optional=False)")
    *   [removeprefix](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.removeprefix "removeprefix(prefix, /)")
    *   [removesuffix](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.removesuffix "removesuffix(suffix, /)")
    *   [replace](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.replace "replace(old_value, new_value, count=-1, /)")
    *   [reversed](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.reversed "reversed()")
    *   [rfind](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.rfind "rfind(sub, start=None, end=None)")
    *   [slice](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.slice "slice(start, end, /)")
    *   [startswith](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.startswith "startswith(prefix)")
    *   [strip](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.strip "strip(chars=None)")
    *   [swapcase](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.swapcase "swapcase()")
    *   [title](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.title "title()")
    *   [upper](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.upper "upper()")

[Pathway API](https://pathway.com/developers/api-docs/pathway/#pathway-api)
===========================================================================

Reference for all the Pathway classes and functions.

See [Table API](https://pathway.com/developers/api-docs/pathway-table) for the main **Table** class.

[class pw.**AsyncTransformer**(input\_table, \*, instance=pw.this.id, autocommit\_duration\_ms=1500)](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/utils/async_transformer.py#L282-L527)

Allows to perform async transformations on a table.

[`invoke()`](https://pathway.com/developers/api-docs/pathway#pathway.AsyncTransformer.invoke) will be called asynchronously for each row of an input\_table.

Output table can be acccesed via [`result`](https://pathway.com/developers/api-docs/pathway#pathway.AsyncTransformer.result).

Example:

```
import pathway as pw
import asyncio
class OutputSchema(pw.Schema):
   ret: int
class AsyncIncrementTransformer(pw.AsyncTransformer, output_schema=OutputSchema):
    async def invoke(self, value) -> Dict[str, Any]:
        await asyncio.sleep(0.1)
        return {"ret": value + 1 }
input = pw.debug.table_from_markdown('''
  | value
1 | 42
2 | 44
''')
result = AsyncIncrementTransformer(input_table=input).result
pw.debug.compute_and_print(result, include_id=False)
```

Show Code Results

```
ret
43
45
```

### [**close**()](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.close)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/utils/async_transformer.py#L379-L383)Called once at the end. Proper place for cleanup.

### [abstract async **invoke**(\*args, \*\*kwargs)](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.invoke)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/utils/async_transformer.py#L385-L393)Called for every row of input\_table. The arguments will correspond to the columns in the input table.

Should return dict of values matching `output_schema`.

### [**open**()](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.open)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/utils/async_transformer.py#L373-L377)Called before actual work. Suitable for one time setup.

### [**with\_options**(capacity=None, timeout=None, retry\_strategy=None, cache\_strategy=None)](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.with_options)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/utils/async_transformer.py#L395-L419)Sets async options.

*   **Parameters**
    *   **capacity** (`int` | `None`) – Maximum number of concurrent operations. Defaults to None, indicating no specific limit.
    *   **timeout** (`float` | `None`) – Maximum time (in seconds) to wait for the function result. Defaults to None, indicating no time limit.
    *   **retry\_strategy** ([`AsyncRetryStrategy`](https://pathway.com/developers/api-docs/udfs#pathway.udfs.AsyncRetryStrategy) | `None`) – Strategy for handling retries in case of failures. Defaults to None, meaning no retries.
    *   **cache\_strategy** ([`CacheStrategy`](https://pathway.com/developers/api-docs/udfs#pathway.udfs.CacheStrategy) | `None`) – Defines the caching mechanism. If set to None and a persistency is enabled, operations will be cached using the persistence layer. Defaults to None.
*   **Returns**  
    self

### [property **failed**:](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.failed) [Table](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)

The resulting table containing only rows that failed during execution. If the `instance` argument is specified, it also contains rows that were executed successfully but at least one element from their instance with less or equal time failed.

### [property **finished**:](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.finished) [Table](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)

The resulting table containing all rows that finished their execution. The column `_async_status` contains the state of the row. The rows that finished successfully, have their status set to “-SUCCESS-”. The rows that failed, have their status set to “-FAILURE-“. If the `instance` argument is specified, rows that were executed successfully but at least one element from their instance with less or equal time failed, have their status set as “-FAILURE-“.

If you want to get only rows that executed successfully, use `successful` property instead.

### [property **output\_table**:](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.output_table) [Table](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)

The resulting table containing all rows that started their execution. The column `_async_status` contains the state of the row. The rows that finished successfully, have their status set to “-SUCCESS-”. The rows that failed, have their status set to “-FAILURE-”. The rows that are still being executed, have their state set to “-PENDING-“.

It is recommended to use this property for debugging/presentational purposes only. For other purposes, `successful` property should be preferred. It returns a Table containing only rows that were executed successfully.

### [property **result**:](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.result) [Table](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)

The resulting table containing only rows that were executed successfully.

Deprecated. Use `successful` instead.

### [property **successful**:](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.successful) [Table](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)

The resulting table containing only rows that were executed successfully.

[class pw.**BaseCustomAccumulator**](https://pathway.com/developers/api-docs/pathway/#pathway.BaseCustomAccumulator)
--------------------------------------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/custom_reducers.py#L174-L268)

Utility class for defining custom accumulators, used for stateful reducers. Custom accumulators should inherit from this class, and should implement `from_row`, `update` and `compute_result`. Optionally `neutral` and `retract` can be provided for more efficient processing on streams with changing data. Additionally, `serialize` and `deserialize` can be customized. By default they use `pickle` module, but if the accumulator state is serializable to pathway value type in an easier way, this can be overwritten.

```
import pathway as pw
class CustomAvgAccumulator(pw.BaseCustomAccumulator):
  def __init__(self, sum, cnt):
    self.sum = sum
    self.cnt = cnt
  @classmethod
  def from_row(self, row):
    [val] = row
    return CustomAvgAccumulator(val, 1)
  def update(self, other):
    self.sum += other.sum
    self.cnt += other.cnt
  def compute_result(self) -> float:
    return self.sum / self.cnt
custom_avg = pw.reducers.udf_reducer(CustomAvgAccumulator)
t1 = pw.debug.table_from_markdown('''
age | owner | pet | price
10  | Alice | dog | 100
9   | Bob   | cat | 80
8   | Alice | cat | 90
7   | Bob   | dog | 70
''')
t2 = t1.groupby(t1.owner).reduce(t1.owner, avg_price=custom_avg(t1.price))
pw.debug.compute_and_print(t2, include_id=False)
```

Show Code Results

```
owner | avg_price
Alice | 95.0
Bob   | 75.0
```

### [abstract **compute\_result**()](https://pathway.com/developers/api-docs/pathway/#pathway.BaseCustomAccumulator.compute_result)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/custom_reducers.py#L251-L258)Mandatory function to finalize computation. Used to extract answer from final state of accumulator.

Narrowing the type of this function helps better type the output of the reducer.

### [classmethod **deserialize**(val)](https://pathway.com/developers/api-docs/pathway/#pathway.BaseCustomAccumulator.deserialize)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/custom_reducers.py#L264-L268)Deserialize state from pathway value type.

### [abstract classmethod **from\_row**(row)](https://pathway.com/developers/api-docs/pathway/#pathway.BaseCustomAccumulator.from_row)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/custom_reducers.py#L225-L232)Construct the accumulator from a row of data. Row will be passed as a list of values.

This is a mandatory function.

### [classmethod **neutral**()](https://pathway.com/developers/api-docs/pathway/#pathway.BaseCustomAccumulator.neutral)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/custom_reducers.py#L216-L223)Neutral element of the accumulator (aggregation of an empty list).

This function is optional, and allows for more efficient processing on streams with changing data.

### [**retract**(other)](https://pathway.com/developers/api-docs/pathway/#pathway.BaseCustomAccumulator.retract)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/custom_reducers.py#L242-L249)Update the accumulator by removing the value of another one.

This function is optional, and allows more efficient reductions on streams with changing data.

### [**serialize**()](https://pathway.com/developers/api-docs/pathway/#pathway.BaseCustomAccumulator.serialize)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/custom_reducers.py#L260-L262)Serialize state to pathway value type.

### [abstract **update**(other)](https://pathway.com/developers/api-docs/pathway/#pathway.BaseCustomAccumulator.update)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/custom_reducers.py#L234-L240)Update the accumulator with another one. Method does not need to return anything, the change should be in-place.

This is a mandatory function.

[class pw.**ColumnExpression**](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression)
----------------------------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expression.py#L88-L529)

### [**as\_bool**()](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression.as_bool)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expression.py#L511-L529)Converts value to a bool or None if not possible. Currently works for Json columns only.

Example:

```
import pathway as pw
import pandas as pd
class InputSchema(pw.Schema):
    data: dict
dt = pd.DataFrame(data={"data": [{"value": True}, {"value": False}]})
table = pw.debug.table_from_pandas(dt, schema=InputSchema)
result = table.select(result=pw.this.data.get("value").as_bool())
pw.debug.compute_and_print(result, include_id=False)
```

Show Code Results

```
result
False
True
```

### [**as\_float**()](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression.as_float)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expression.py#L471-L489)Converts value to a float or None if not possible. Currently works for Json columns only.

Example:

```
import pathway as pw
import pandas as pd
class InputSchema(pw.Schema):
    data: dict
dt = pd.DataFrame(data={"data": [{"value": 1.5}, {"value": 3.14}]})
table = pw.debug.table_from_pandas(dt, schema=InputSchema)
result = table.select(result=pw.this.data.get("value").as_float())
pw.debug.compute_and_print(result, include_id=False)
```

Show Code Results

```
result
1.5
3.14
```

### [**as\_int**()](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression.as_int)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expression.py#L451-L469)Converts value to an int or None if not possible. Currently works for Json columns only.

Example:

```
import pathway as pw
import pandas as pd
class InputSchema(pw.Schema):
    data: dict
dt = pd.DataFrame(data={"data": [{"value": 1}, {"value": 2}]})
table = pw.debug.table_from_pandas(dt, schema=InputSchema)
result = table.select(result=pw.this.data.get("value").as_int())
pw.debug.compute_and_print(result, include_id=False)
```

Show Code Results

```
result
1
2
```

### [**as\_str**()](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression.as_str)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expression.py#L491-L509)Converts value to a string or None if not possible. Currently works for Json columns only.

Example:

```
import pathway as pw
import pandas as pd
class InputSchema(pw.Schema):
    data: dict
dt = pd.DataFrame(data={"data": [{"value": "dog"}, {"value": "cat"}]})
table = pw.debug.table_from_pandas(dt, schema=InputSchema)
result = table.select(result=pw.this.data.get("value").as_str())
pw.debug.compute_and_print(result, include_id=False)
```

Show Code Results

```
result
cat
dog
```

### [**get**(index, default=None)](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression.get)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expression.py#L350-L389)Extracts element at index from an object. The object has to be a Tuple or Json. If no element is present at index, it returns value specified by a default parameter.

Index can be effectively int for Tuple and int or str for Json. For Tuples, using negative index can be used to access elements at the end, moving backwards.

*   **Parameters**
    *   **index** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression) | `int` | `str`) – Position to extract element at.
    *   **default** (`Union`\[[`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression), `None`, `int`, `float`, `str`, `bytes`, `bool`, `Pointer`, `datetime`, `timedelta`, `ndarray`, [`Json`](https://pathway.com/developers/api-docs/pathway#pathway.Json), `dict`\[`str`, `Any`\], `tuple`\[`Any`, `...`\], `Error`\]) – Value returned when no element is at position index. Defaults to None.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
  | a | b | c
1 | 3 | 2 | 2
2 | 4 | 1 | 0
3 | 7 | 3 | 1
'''
)
t2 = t1.with_columns(tup=pw.make_tuple(pw.this.a, pw.this.b))
t3 = t2.select(
    x=pw.this.tup.get(1),
    y=pw.this.tup.get(3),
    z=pw.this.tup.get(pw.this.c),
    t=pw.this.tup.get(pw.this.c, default=100),
)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
x | y | z | t
1 |   | 4 | 4
2 |   |   | 100
3 |   | 3 | 3
```

### [**is\_none**()](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression.is_none)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expression.py#L270-L289)Returns true if the value is None.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
  | owner | pet
1 | Alice | dog
2 | Bob   |
3 | Carol | cat
''')
t2 = t1.with_columns(has_no_pet=pw.this.pet.is_none())
pw.debug.compute_and_print(t2, include_id=False)
```

Show Code Results

```
owner | pet | has_no_pet
Alice | dog | False
Bob   |     | True
Carol | cat | False
```

### [**is\_not\_none**()](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression.is_not_none)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expression.py#L291-L310)Returns true if the value is not None.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
  | owner | pet
1 | Alice | dog
2 | Bob   |
3 | Carol | cat
''')
t2 = t1.with_columns(has_pet=pw.this.pet.is_not_none())
pw.debug.compute_and_print(t2, include_id=False)
```

Show Code Results

```
owner | pet | has_pet
Alice | dog | True
Bob   |     | False
Carol | cat | True
```

### [**to\_string**()](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression.to_string)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expression.py#L409-L449)Changes the values to strings.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
val
1
2
3
4''')
t1.schema
```

Show Code Results

```
<pathway.Schema types={'val': <class 'int'>}, id_type=<class 'pathway.engine.Pointer'>>
```

```
pw.debug.compute_and_print(t1, include_id=False)
```

Show Code Results

```
val
1
2
3
4
```

```
t2 = t1.select(val = pw.this.val.to_string())
t2.schema
```

Show Code Results

```
<pathway.Schema types={'val': <class 'str'>}, id_type=<class 'pathway.engine.Pointer'>>
```

```
pw.debug.compute_and_print(t2.select(val=pw.this.val + "a"), include_id=False)
```

Show Code Results

```
val
1a
2a
3a
4a
```

[class pw.**ColumnReference**()](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnReference)
----------------------------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expression.py#L566-L661)

Reference to the column.

Inherits from ColumnExpression.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
   age  owner  pet
1   10  Alice  dog
2    9    Bob  dog
3    8  Alice  cat
4    7    Bob  dog''')
isinstance(t1.age, pw.ColumnReference)
```

Show Code Results

```
True
```

```
isinstance(t1["owner"], pw.ColumnReference)
```

Show Code Results

```
True
```

### [property **name**](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnReference.name)

Name of the referred column.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
   age  owner  pet
1   10  Alice  dog
2    9    Bob  dog
3    8  Alice  cat
4    7    Bob  dog''')
t1.age.name
```

Show Code Results

```
'age'
```

### [property **table**](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnReference.table)

Table where the referred column belongs to.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
   age  owner  pet
1   10  Alice  dog
2    9    Bob  dog
3    8  Alice  cat
4    7    Bob  dog''')
t1.age.table is t1
```

Show Code Results

```
True
```

[class pw.**DateTimeNaive**(ts\_input=<object object>, year=None, month=None, day=None, hour=None, minute=None, second=None, microsecond=None, tzinfo=None, \*, nanosecond=None, tz=None, unit=None, fold=None)](https://pathway.com/developers/api-docs/pathway/#pathway.DateTimeNaive)
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/datetime_types.py#L6-L9)

Type for storing datetime without timezone information. Extends pandas.Timestamp type.

[class pw.**DateTimeUtc**(ts\_input=<object object>, year=None, month=None, day=None, hour=None, minute=None, second=None, microsecond=None, tzinfo=None, \*, nanosecond=None, tz=None, unit=None, fold=None)](https://pathway.com/developers/api-docs/pathway/#pathway.DateTimeUtc)
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/datetime_types.py#L12-L15)

Type for storing datetime with default timezone. Extends pandas.Timestamp type.

[class pw.**Duration**(value=<object object>, unit=None, \*\*kwargs)](https://pathway.com/developers/api-docs/pathway/#pathway.Duration)
----------------------------------------------------------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/datetime_types.py#L18-L21)

Type for storing duration of time. Extends pandas.Timedelta type.

[class pw.**GroupedJoinResult**()](https://pathway.com/developers/api-docs/pathway/#pathway.GroupedJoinResult)
--------------------------------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/groupbys.py#L272-L345)

### [**reduce**(\*args, \*\*kwargs)](https://pathway.com/developers/api-docs/pathway/#pathway.GroupedJoinResult.reduce)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/groupbys.py#L298-L336)Reduces grouped join result to table.

*   **Returns**  
    _Table_ – Created table.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
   cost  owner  pet
1   100  Alice    1
2    90    Bob    1
3    80  Alice    2
''')
t2 = pw.debug.table_from_markdown('''
    cost  owner  pet size
11   100  Alice    3    M
12    90    Bob    1    L
13    80    Tom    1   XL
''')
result = (t1.join(t2, t1.owner==t2.owner).groupby(pw.this.owner)
    .reduce(pw.this.owner, pairs = pw.reducers.count()))
pw.debug.compute_and_print(result, include_id=False)
```

Show Code Results

```
owner | pairs
Alice | 2
Bob   | 1
```

[class pw.**GroupedTable**()](https://pathway.com/developers/api-docs/pathway/#pathway.GroupedTable)
----------------------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/groupbys.py#L71-L269)

Result of a groupby operation on a Table.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
age | owner | pet
10  | Alice | dog
9   | Bob   | dog
8   | Alice | cat
7   | Bob   | dog
''')
t2 = t1.groupby(t1.pet, t1.owner)
isinstance(t2, pw.GroupedTable)
```

Show Code Results

```
True
```

### [**reduce**(\*args, \*\*kwargs)](https://pathway.com/developers/api-docs/pathway/#pathway.GroupedTable.reduce)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/groupbys.py#L155-L208)Reduces grouped table to a table.

*   **Parameters**
    *   **args** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference)) – Column references.
    *   **kwargs** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – Column expressions with their new assigned names.
*   **Returns**  
    _Table_ – Created table.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
age | owner | pet
10  | Alice | dog
9   | Bob   | dog
8   | Alice | cat
7   | Bob   | dog
''')
t2 = t1.groupby(t1.pet, t1.owner).reduce(t1.owner, t1.pet, ageagg=pw.reducers.sum(t1.age))
pw.debug.compute_and_print(t2, include_id=False)
```

Show Code Results

```
owner | pet | ageagg
Alice | cat | 8
Alice | dog | 10
Bob   | dog | 16
```

[class pw.**JoinMode**(value, names=None, \*, module=None, qualname=None, type=None, start=1, boundary=None)](https://pathway.com/developers/api-docs/pathway/#pathway.JoinMode)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/join_mode.py#L9-L51)

Enum used for controlling type of a join when passed to a generic join function. Consists of values: JoinMode.INNER, JoinMode.LEFT, JoinMode.RIGHT, JoinMode.OUTER

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
age  | owner  | pet
 10  | Alice  | 1
  9  | Bob    | 1
  8  | Alice  | 2
''')
t2 = pw.debug.table_from_markdown('''
age  | owner  | pet | size
 10  | Alice  | 3   | M
 9   | Bob    | 1   | L
 8   | Tom    | 1   | XL
''')
inner_join = t1.join(
    t2, t1.pet == t2.pet, t1.owner == t2.owner, how=pw.JoinMode.INNER
).select(age=t1.age, owner_name=t2.owner, size=t2.size)
pw.debug.compute_and_print(inner_join, include_id = False)
```

Show Code Results

```
age | owner_name | size
9   | Bob        | L
```

```
outer_join = t1.join(
    t2, t1.pet == t2.pet, t1.owner == t2.owner, how=pw.JoinMode.OUTER
).select(age=t1.age, owner_name=t2.owner, size=t2.size)
pw.debug.compute_and_print(outer_join, include_id = False)
```

Show Code Results

```
age | owner_name | size
    | Alice      | M
    | Tom        | XL
8   |            |
9   | Bob        | L
10  |            |
```

### [**INNER** = 0](https://pathway.com/developers/api-docs/pathway/#pathway.JoinMode.INNER)

Use inner join.

### [**LEFT** = 1](https://pathway.com/developers/api-docs/pathway/#pathway.JoinMode.LEFT)

Use left join.

### [**OUTER** = 3](https://pathway.com/developers/api-docs/pathway/#pathway.JoinMode.OUTER)

Use outer join.

### [**RIGHT** = 2](https://pathway.com/developers/api-docs/pathway/#pathway.JoinMode.RIGHT)

Use right join.

[class pw.**JoinResult**()](https://pathway.com/developers/api-docs/pathway/#pathway.JoinResult)
------------------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/joins.py#L493-L1055)

Result of a join between tables.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
   age  owner  pet
1   10  Alice    1
2    9    Bob    1
3    8  Alice    2
''')
t2 = pw.debug.table_from_markdown('''
    age  owner  pet size
11   10  Alice    3    M
12    9    Bob    1    L
13    8    Tom    1   XL
''')
joinresult= t1.join(t2, t1.pet == t2.pet, t1.owner == t2.owner)   # noqa: E501
isinstance(joinresult, pw.JoinResult)
```

Show Code Results

```
True
```

```
pw.debug.compute_and_print(joinresult.select(t1.age, t2.size), include_id=False)
```

Show Code Results

```
age | size
9   | L
```

### [**filter**(filter\_expression)](https://pathway.com/developers/api-docs/pathway/#pathway.JoinResult.filter)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/joins.py#L691-L744)Filters rows, keeping the ones satisfying the predicate.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
   age  owner  pet
1   10  Alice    1
2    9    Bob    1
3    8  Alice    2
''')
t2 = pw.debug.table_from_markdown('''
    age  owner  pet size
11   10  Alice    3    M
12    9    Bob    1    L
13    8    Tom    1   XL
''')
result = t1.join(t2).filter(t1.owner == t2.owner).select(t1.age, t2.size)   # noqa: E501
pw.debug.compute_and_print(result, include_id=False)
```

Show Code Results

```
age | size
8   | M
9   | L
10  | M
```

### [**groupby**(\*args, id=None)](https://pathway.com/developers/api-docs/pathway/#pathway.JoinResult.groupby)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/joins.py#L746-L803)Groups join result by columns from args.

**NOTE**: Usually followed by .reduce() that aggregates the result and returns a table.

*   **Parameters**
    *   **args** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference)) – columns to group by.
    *   **id** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference) | `None`) – if provided, is the column used to set id’s of the rows of the result
*   **Returns**  
    _GroupedJoinResult_ – Groupby object.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
   cost  owner  pet
1   100  Alice    1
2    90    Bob    1
3    80  Alice    2
''')
t2 = pw.debug.table_from_markdown('''
    cost  owner  pet size
11   100  Alice    3    M
12    90    Bob    1    L
13    80    Tom    1   XL
''')
result = (t1.join(t2, t1.owner==t2.owner).groupby(pw.this.owner)
    .reduce(pw.this.owner, pairs = pw.reducers.count()))
pw.debug.compute_and_print(result, include_id=False)
```

Show Code Results

```
owner | pairs
Alice | 2
Bob   | 1
```

### [**reduce**(\*args, \*\*kwargs)](https://pathway.com/developers/api-docs/pathway/#pathway.JoinResult.reduce)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/joins.py#L805-L852)Reduce a join result to a single row.

Equivalent to self.groupby().reduce(\*args, \*\*kwargs).

*   **Parameters**
    *   **args** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference)) – reducer to reduce the table with
    *   **kwargs** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – reducer to reduce the table with. Its key is the new name of a column.
*   **Returns**  
    _Table_ – Reduced table.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
   cost  owner  pet
1   100  Alice    1
2    90    Bob    1
3    80  Alice    2
''')
t2 = pw.debug.table_from_markdown('''
    cost  owner  pet size
11   100  Alice    3    M
12    90    Bob    1    L
13    80    Tom    1   XL
''')
result = t1.join(t2, t1.owner==t2.owner).reduce(total_pairs = pw.reducers.count())
pw.debug.compute_and_print(result, include_id=False)
```

Show Code Results

```
total_pairs
3
```

### [**select**(\*args, \*\*kwargs)](https://pathway.com/developers/api-docs/pathway/#pathway.JoinResult.select)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/joins.py#L640-L682)Computes result of a join.

*   **Parameters**
    *   **args** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference)) – Column references.
    *   **kwargs** (`Any`) – Column expressions with their new assigned names.
*   **Returns**  
    _Table_ – Created table.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
age  | owner  | pet
 10  | Alice  | 1
  9  | Bob    | 1
  8  | Alice  | 2
''')
t2 = pw.debug.table_from_markdown('''
age  | owner  | pet | size
 10  | Alice  | 3   | M
 9   | Bob    | 1   | L
 8   | Tom    | 1   | XL
''')
t3 = t1.join(t2, t1.pet == t2.pet, t1.owner == t2.owner).select(age=t1.age, owner_name=t2.owner, size=t2.size)   # noqa: E501
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
age | owner_name | size
9   | Bob        | L
```

[class pw.**Joinable**(context)](https://pathway.com/developers/api-docs/pathway/#pathway.Joinable)
---------------------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/joins.py#L46-L490)

### [**join**(other, \*on, id=None, how=JoinMode.INNER, left\_instance=None, right\_instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Joinable.join)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/joins.py#L132-L190)Join self with other using the given join expression.

*   **Parameters**
    *   **other** ([`Joinable`](https://pathway.com/developers/api-docs/pathway#pathway.Joinable)) – the right side of the join, `Table` or `JoinResult`.
    *   **on** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – a list of column expressions. Each must have == as the top level operation and be of the form LHS: ColumnReference == RHS: ColumnReference.
    *   **id** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference) | `None`) – optional argument for id of result, can be only self.id or other.id
    *   **how** ([`JoinMode`](https://pathway.com/developers/api-docs/pathway#pathway.JoinMode)) – by default, inner join is performed. Possible values are JoinMode.{INNER,LEFT,RIGHT,OUTER} correspond to inner, left, right and outer join respectively.
    *   **left\_instance/right\_instance** – optional arguments describing partitioning of the data into separate instances
*   **Returns**  
    _JoinResult_ – an object on which .select() may be called to extract relevant columns from the result of the join.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
age  | owner  | pet
 10  | Alice  | 1
  9  | Bob    | 1
  8  | Alice  | 2
''')
t2 = pw.debug.table_from_markdown('''
age  | owner  | pet | size
 10  | Alice  | 3   | M
 9   | Bob    | 1   | L
 8   | Tom    | 1   | XL
''')
t3 = t1.join(
    t2, t1.pet == t2.pet, t1.owner == t2.owner, how=pw.JoinMode.INNER
).select(age=t1.age, owner_name=t2.owner, size=t2.size)
pw.debug.compute_and_print(t3, include_id = False)
```

Show Code Results

```
age | owner_name | size
9   | Bob        | L
```

### [**join\_inner**(other, \*on, id=None, left\_instance=None, right\_instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Joinable.join_inner)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/joins.py#L192-L247)Inner-joins two tables or join results.

*   **Parameters**
    *   **other** ([`Joinable`](https://pathway.com/developers/api-docs/pathway#pathway.Joinable)) – the right side of the join, `Table` or `JoinResult`.
    *   **on** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – a list of column expressions. Each must have == as the top level operation and be of the form LHS: ColumnReference == RHS: ColumnReference.
    *   **id** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference) | `None`) – optional argument for id of result, can be only self.id or other.id
    *   **left\_instance/right\_instance** – optional arguments describing partitioning of the data into separate instances
*   **Returns**  
    _JoinResult_ – an object on which .select() may be called to extract relevant columns from the result of the join.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
age  | owner  | pet
 10  | Alice  | 1
  9  | Bob    | 1
  8  | Alice  | 2
''')
t2 = pw.debug.table_from_markdown('''
age  | owner  | pet | size
 10  | Alice  | 3   | M
 9   | Bob    | 1   | L
 8   | Tom    | 1   | XL
''')
t3 = t1.join_inner(t2, t1.pet == t2.pet, t1.owner == t2.owner).select(
    age=t1.age, owner_name=t2.owner, size=t2.size
)
pw.debug.compute_and_print(t3, include_id = False)
```

Show Code Results

```
age | owner_name | size
9   | Bob        | L
```

### [**join\_left**(other, \*on, id=None, left\_instance=None, right\_instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Joinable.join_left)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/joins.py#L249-L324)Left-joins two tables or join results.

*   **Parameters**
    *   **other** ([`Joinable`](https://pathway.com/developers/api-docs/pathway#pathway.Joinable)) – the right side of the join, `Table` or `JoinResult`.
    *   **\*on** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – Columns to join, syntax self.col1 == other.col2
    *   **id** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference) | `None`) – optional id column of the result
    *   **left\_instance/right\_instance** – optional arguments describing partitioning of the data into separate instances

Remarks: args cannot contain id column from either of tables, as the result table has id column with auto-generated ids; it can be selected by assigning it to a column with defined name (passed in kwargs)

Behavior:

*   for rows from the left side that were not matched with the right side, missing values on the right are replaced with None
*   rows from the right side that were not matched with the left side are skipped
*   for rows that were matched the behavior is the same as that of an inner join.

*   **Returns**  
    _JoinResult_ – an object on which .select() may be called to extract relevant columns from the result of the join.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
        | a  | b
      1 | 11 | 111
      2 | 12 | 112
      3 | 13 | 113
      4 | 13 | 114
    '''
)
t2 = pw.debug.table_from_markdown(
    '''
        | c  | d
      1 | 11 | 211
      2 | 12 | 212
      3 | 14 | 213
      4 | 14 | 214
    '''
)
pw.debug.compute_and_print(t1.join_left(t2, t1.a == t2.c
).select(t1.a, t2_c=t2.c, s=pw.require(t1.b + t2.d, t2.id)),
include_id=False)
```

Show Code Results

```
a  | t2_c | s
11 | 11   | 322
12 | 12   | 324
13 |      |
13 |      |
```

### [**join\_outer**(other, \*on, id=None, left\_instance=None, right\_instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Joinable.join_outer)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/joins.py#L406-L481)Outer-joins two tables or join results.

*   **Parameters**
    *   **other** ([`Joinable`](https://pathway.com/developers/api-docs/pathway#pathway.Joinable)) – the right side of the join, `Table` or `JoinResult`.
    *   **\*on** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – Columns to join, syntax self.col1 == other.col2
    *   **id** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference) | `None`) – optional id column of the result
    *   **instance** – optional argument describing partitioning of the data into separate instances

Remarks: args cannot contain id column from either of tables, as the result table has id column with auto-generated ids; it can be selected by assigning it to a column with defined name (passed in kwargs)

Behavior:

*   for rows from the left side that were not matched with the right side, missing values on the right are replaced with None
*   for rows from the right side that were not matched with the left side, missing values on the left are replaced with None
*   for rows that were matched the behavior is the same as that of an inner join.

*   **Returns**  
    _JoinResult_ – an object on which .select() may be called to extract relevant columns from the result of the join.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
        | a  | b
      1 | 11 | 111
      2 | 12 | 112
      3 | 13 | 113
      4 | 13 | 114
    '''
)
t2 = pw.debug.table_from_markdown(
    '''
        | c  | d
      1 | 11 | 211
      2 | 12 | 212
      3 | 14 | 213
      4 | 14 | 214
    '''
)
pw.debug.compute_and_print(t1.join_outer(t2, t1.a == t2.c
).select(t1.a, t2_c=t2.c, s=pw.require(t1.b + t2.d, t1.id, t2.id)),
include_id=False)
```

Show Code Results

```
a  | t2_c | s
   | 14   |
   | 14   |
11 | 11   | 322
12 | 12   | 324
13 |      |
13 |      |
```

### [**join\_right**(other, \*on, id=None, left\_instance=None, right\_instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Joinable.join_right)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/joins.py#L326-L404)Outer-joins two tables or join results.

*   **Parameters**
    *   **other** ([`Joinable`](https://pathway.com/developers/api-docs/pathway#pathway.Joinable)) – the right side of the join, `Table` or `JoinResult`.
    *   **\*on** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – Columns to join, syntax self.col1 == other.col2
    *   **id** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference) | `None`) – optional id column of the result
    *   **left\_instance/right\_instance** – optional arguments describing partitioning of the data into separate instances

Remarks: args cannot contain id column from either of tables, as the result table has id column with auto-generated ids; it can be selected by assigning it to a column with defined name (passed in kwargs)

Behavior:

*   rows from the left side that were not matched with the right side are skipped
*   for rows from the right side that were not matched with the left side, missing values on the left are replaced with None
*   for rows that were matched the behavior is the same as that of an inner join.

*   **Returns**  
    _JoinResult_ – an object on which .select() may be called to extract relevant columns from the result of the join.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
        | a  | b
      1 | 11 | 111
      2 | 12 | 112
      3 | 13 | 113
      4 | 13 | 114
    '''
)
t2 = pw.debug.table_from_markdown(
    '''
        | c  | d
      1 | 11 | 211
      2 | 12 | 212
      3 | 14 | 213
      4 | 14 | 214
    '''
)
pw.debug.compute_and_print(t1.join_right(t2, t1.a == t2.c
).select(t1.a, t2_c=t2.c, s=pw.require(pw.coalesce(t1.b,0) + t2.d,t1.id)),
include_id=False)
```

Show Code Results

```
a  | t2_c | s
   | 14   |
   | 14   |
11 | 11   | 322
12 | 12   | 324
```

*   **Returns**  
    OuterJoinResult object

### [property **C**: ColumnNamespace](https://pathway.com/developers/api-docs/pathway/#pathway.Joinable.C)

Returns the namespace of all the columns of a joinable. Allows accessing column names that might otherwise be a reserved methods.

```
import pathway as pw
tab = pw.debug.table_from_markdown('''
age | owner | pet | filter
10  | Alice | dog | True
9   | Bob   | dog | True
8   | Alice | cat | False
7   | Bob   | dog | True
''')
isinstance(tab.C.age, pw.ColumnReference)
```

Show Code Results

```
True
```

```
pw.debug.compute_and_print(tab.filter(tab.C.filter), include_id=False)
```

Show Code Results

```
age | owner | pet | filter
7   | Bob   | dog | True
9   | Bob   | dog | True
10  | Alice | dog | True
```

[class pw.**Json**()](https://pathway.com/developers/api-docs/pathway/#pathway.Json)
------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/json.py#L19-L234)

Represents JSON values.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
a    | b | c
True | 2 | manul
''')
@pw.udf
def to_json(val) -> pw.Json:
    return pw.Json(val)
result = t1.select(**{c: to_json(pw.this[c]) for c in t1.column_names()})
pw.debug.compute_and_print(result, include_id=False)
```

Show Code Results

```
a    | b | c
true | 2 | "manul"
```

### [**as\_bool**()](https://pathway.com/developers/api-docs/pathway/#pathway.Json.as_bool)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/json.py#L162-L183)Returns Json value as a float if possible.

Example:

```
import pathway as pw
class InputSchema(pw.Schema):
    data: pw.Json
@pw.udf
def extract(data: pw.Json) -> bool:
    return data["value"].as_bool()
table = pw.debug.table_from_rows(schema=InputSchema, rows=[({"value": True},)])
result = table.select(result=extract(pw.this.data))
pw.debug.compute_and_print(result, include_id=False)
```

Show Code Results

```
result
True
```

### [**as\_dict**()](https://pathway.com/developers/api-docs/pathway/#pathway.Json.as_dict)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/json.py#L208-L228)Returns Json value as a dict if possible.

Example:

```
import pathway as pw
class InputSchema(pw.Schema):
    data: pw.Json
@pw.udf
def extract(data: pw.Json) -> tuple:
    return tuple(data["value"].as_dict().values())
table = pw.debug.table_from_rows(schema=InputSchema, rows=[({"value": {"inner": 42}},)])
result = table.select(result=extract(pw.this.data))
pw.debug.compute_and_print(result, include_id=False)
```

Show Code Results

```
result
(42,)
```

### [**as\_float**()](https://pathway.com/developers/api-docs/pathway/#pathway.Json.as_float)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/json.py#L136-L160)Returns Json value as a float if possible.

Example:

```
import pathway as pw
class InputSchema(pw.Schema):
    data: pw.Json
@pw.udf
def extract(data: pw.Json) -> float:
    return data["value"].as_float()
table = pw.debug.table_from_rows(schema=InputSchema, rows=[({"value": 3.14},)])
result = table.select(result=extract(pw.this.data))
pw.debug.compute_and_print(result, include_id=False)
```

Show Code Results

```
result
3.14
```

### [**as\_int**()](https://pathway.com/developers/api-docs/pathway/#pathway.Json.as_int)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/json.py#L90-L111)Returns Json value as an int if possible.

Example:

```
import pathway as pw
class InputSchema(pw.Schema):
    data: pw.Json
@pw.udf
def extract(data: pw.Json) -> int:
    return data["value"].as_int()
table = pw.debug.table_from_rows(schema=InputSchema, rows=[({"value": 42},)])
result = table.select(result=extract(pw.this.data))
pw.debug.compute_and_print(result, include_id=False)
```

Show Code Results

```
result
42
```

### [**as\_list**()](https://pathway.com/developers/api-docs/pathway/#pathway.Json.as_list)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/json.py#L185-L206)Returns Json value as a list if possible.

Example:

```
import pathway as pw
class InputSchema(pw.Schema):
    data: pw.Json
@pw.udf
def extract(data: pw.Json) -> int:
    return data["value"].as_list()[-1]
table = pw.debug.table_from_rows(schema=InputSchema, rows=[({"value": [1,2,3]},)])
result = table.select(result=extract(pw.this.data))
pw.debug.compute_and_print(result, include_id=False)
```

Show Code Results

```
result
3
```

### [**as\_str**()](https://pathway.com/developers/api-docs/pathway/#pathway.Json.as_str)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/json.py#L113-L134)Returns Json value as a string if possible.

Example:

```
import pathway as pw
class InputSchema(pw.Schema):
    data: pw.Json
@pw.udf
def extract(data: pw.Json) -> str:
    return data["value"].as_str()
table = pw.debug.table_from_rows(schema=InputSchema, rows=[({"value": "foo"},)])
result = table.select(result=extract(pw.this.data))
pw.debug.compute_and_print(result, include_id=False)
```

Show Code Results

```
result
foo
```

[class pw.**LiveTable**()](https://pathway.com/developers/api-docs/pathway/#pathway.LiveTable)
----------------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/interactive.py#L130-L178)

[class pw.**Schema**](https://pathway.com/developers/api-docs/pathway/#pathway.Schema)
--------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/schema.py#L913-L947)

Base class to inherit from when creating schemas. All schemas should be subclasses of this one.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
   age  owner  pet
1   10  Alice  dog
2    9    Bob  dog
3    8  Alice  cat
4    7    Bob  dog''')
t1.schema
```

Show Code Results

```
<pathway.Schema types={'age': <class 'int'>, 'owner': <class 'str'>, 'pet': <class 'str'>}, id_type=<class 'pathway.engine.Pointer'>>
```

```
issubclass(t1.schema, pw.Schema)
```

Show Code Results

```
True
```

```
class NewSchema(pw.Schema):
  foo: int
SchemaSum = NewSchema | t1.schema
SchemaSum
```

Show Code Results

```
<pathway.Schema types={'age': <class 'int'>, 'owner': <class 'str'>, 'pet': <class 'str'>, 'foo': <class 'int'>}, id_type=<class 'pathway.engine.Pointer'>>
```

[class pw.**SchemaProperties**(append\_only=None)](https://pathway.com/developers/api-docs/pathway/#pathway.SchemaProperties)
-----------------------------------------------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/schema.py#L262-L264)

[class pw.**Table**()](https://pathway.com/developers/api-docs/pathway/#pathway.Table)
--------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L52-L2570)

Collection of named columns over identical universes.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
age | owner | pet
10  | Alice | dog
9   | Bob   | dog
8   | Alice | cat
7   | Bob   | dog
''')
isinstance(t1, pw.Table)
```

Show Code Results

```
True
```

### [**asof\_join**(other, self\_time, other\_time, \*on, how, behavior=None, defaults={}, direction=Direction.BACKWARD, left\_instance=None, right\_instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.asof_join)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/temporal/_asof_join.py#L475-L650)Perform an ASOF join of two tables.

*   **Parameters**
    *   **other** ([`Table`](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)) – Table to join with self, both must contain a column val
    *   **self\_time** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – time-like column expression to do the join against
    *   **other\_time** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – time-like column expression to do the join against
    *   **on** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – a list of column expressions. Each must have == as the top level operation and be of the form LHS: ColumnReference == RHS: ColumnReference.
    *   **behavior** ([`CommonBehavior`](https://pathway.com/developers/api-docs/pathway-stdlib-temporal#pathway.stdlib.temporal.temporal_behavior.CommonBehavior) | `None`) – defines the temporal behavior of a join - features like delaying entries or ignoring late entries.
    *   **how** ([`JoinMode`](https://pathway.com/developers/api-docs/pathway#pathway.JoinMode)) – mode of the join (LEFT, RIGHT, FULL)
    *   **defaults** (`dict`\[[`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference), `Any`\]) – dictionary column-> default value. Entries in the resulting table that not have a predecessor in the join will be set to this default value. If no default is provided, None will be used.
    *   **direction** ([`Direction`](https://pathway.com/developers/api-docs/pathway-stdlib-temporal#pathway.stdlib.temporal.Direction)) – direction of the join, accepted values: Direction.BACKWARD, Direction.FORWARD, Direction.NEAREST
    *   **left\_instance/right\_instance** – optional arguments describing partitioning of the data into separate instances

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
        | K | val |  t
    1   | 0 | 1   |  1
    2   | 0 | 2   |  4
    3   | 0 | 3   |  5
    4   | 0 | 4   |  6
    5   | 0 | 5   |  7
    6   | 0 | 6   |  11
    7   | 0 | 7   |  12
    8   | 1 | 8   |  5
    9   | 1 | 9   |  7
'''
)
t2 = pw.debug.table_from_markdown(
    '''
         | K | val | t
    21   | 1 | 7  | 2
    22   | 1 | 3  | 8
    23   | 0 | 0  | 2
    24   | 0 | 6  | 3
    25   | 0 | 2  | 7
    26   | 0 | 3  | 8
    27   | 0 | 9  | 9
    28   | 0 | 7  | 13
    29   | 0 | 4  | 14
    '''
)
res = t1.asof_join(
    t2,
    t1.t,
    t2.t,
    t1.K == t2.K,
    how=pw.JoinMode.LEFT,
    defaults={t2.val: -1},
).select(
    pw.this.instance,
    pw.this.t,
    val_left=t1.val,
    val_right=t2.val,
    sum=t1.val + t2.val,
)
pw.debug.compute_and_print(res, include_id=False)
```

Show Code Results

```
instance | t  | val_left | val_right | sum
0        | 1  | 1        | -1        | 0
0        | 4  | 2        | 6         | 8
0        | 5  | 3        | 6         | 9
0        | 6  | 4        | 6         | 10
0        | 7  | 5        | 2         | 7
0        | 11 | 6        | 9         | 15
0        | 12 | 7        | 9         | 16
1        | 5  | 8        | 7         | 15
1        | 7  | 9        | 7         | 16
```

Setting behavior allows to control temporal behavior of an asof join. Then, each side of the asof join keeps track of the maximal already seen time (self\_time and other\_time). In the context of asof\_join the arguments of behavior are defined as follows:

*   **delay** - buffers results until the maximal already seen time is greater than or equal to their time plus delay.
*   **cutoff** - ignores records with times less or equal to the maximal already seen time minus cutoff; it is also used to garbage collect records that have times lower or equal to the above threshold. When cutoff is not set, the asof join will remember all records from both sides.
*   **keep\_results** - if set to True, keeps all results of the operator. If set to False, keeps only results that are newer than the maximal seen time minus cutoff.

Examples without and with forgetting:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
    value | event_time | __time__
      2   |      2     |     4
      3   |      5     |     6
      4   |      1     |     8
      5   |      7     |    14
'''
)
t2 = pw.debug.table_from_markdown(
    '''
    value | event_time | __time__
      42  |      1     |     2
       8  |      4     |    10
'''
)
result_without_cutoff = t1.asof_join(
    t2, t1.event_time, t2.event_time, how=pw.JoinMode.LEFT
).select(
    left_value=t1.value,
    right_value=t2.value,
    left_time=t1.event_time,
    right_time=t2.event_time,
)
pw.debug.compute_and_print_update_stream(result_without_cutoff, include_id=False)
```

Show Code Results

```
left_value | right_value | left_time | right_time | __time__ | __diff__
2          | 42          | 2         | 1          | 4        | 1
3          | 42          | 5         | 1          | 6        | 1
4          | 42          | 1         | 1          | 8        | 1
3          | 42          | 5         | 1          | 10       | -1
3          | 8           | 5         | 4          | 10       | 1
5          | 8           | 7         | 4          | 14       | 1
```

```
result_without_cutoff = t1.asof_join(
    t2,
    t1.event_time,
    t2.event_time,
    how=pw.JoinMode.LEFT,
    behavior=pw.temporal.common_behavior(cutoff=2),
).select(
    left_value=t1.value,
    right_value=t2.value,
    left_time=t1.event_time,
    right_time=t2.event_time,
)
pw.debug.compute_and_print_update_stream(result_without_cutoff, include_id=False)
```

Show Code Results

```
left_value | right_value | left_time | right_time | __time__ | __diff__
2          | 42          | 2         | 1          | 4        | 1
3          | 42          | 5         | 1          | 6        | 1
3          | 42          | 5         | 1          | 10       | -1
3          | 8           | 5         | 4          | 10       | 1
5          | 8           | 7         | 4          | 14       | 1
```

The record with `value=4` from table `t1` was not joined because its `event_time` was less than the maximal already seen time minus `cutoff` (`1 <= 5-2`).

### [**asof\_join\_left**(other, self\_time, other\_time, \*on, behavior=None, defaults={}, direction=Direction.BACKWARD, left\_instance=None, right\_instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.asof_join_left)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/temporal/_asof_join.py#L653-L822)Perform a left ASOF join of two tables.

*   **Parameters**
    *   **other** ([`Table`](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)) – Table to join with self, both must contain a column val
    *   **self\_time** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – time-like column expression to do the join against
    *   **other\_time** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – time-like column expression to do the join against
    *   **on** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – a list of column expressions. Each must have == as the top level operation and be of the form LHS: ColumnReference == RHS: ColumnReference.
    *   **behavior** ([`CommonBehavior`](https://pathway.com/developers/api-docs/pathway-stdlib-temporal#pathway.stdlib.temporal.temporal_behavior.CommonBehavior) | `None`) – defines the temporal behavior of a join - features like delaying entries or ignoring late entries.
    *   **defaults** (`dict`\[[`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference), `Any`\]) – dictionary column-> default value. Entries in the resulting table that not have a predecessor in the join will be set to this default value. If no default is provided, None will be used.
    *   **direction** ([`Direction`](https://pathway.com/developers/api-docs/pathway-stdlib-temporal#pathway.stdlib.temporal.Direction)) – direction of the join, accepted values: Direction.BACKWARD, Direction.FORWARD, Direction.NEAREST
    *   **left\_instance/right\_instance** – optional arguments describing partitioning of the data into separate instances

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
        | K | val |  t
    1   | 0 | 1   |  1
    2   | 0 | 2   |  4
    3   | 0 | 3   |  5
    4   | 0 | 4   |  6
    5   | 0 | 5   |  7
    6   | 0 | 6   |  11
    7   | 0 | 7   |  12
    8   | 1 | 8   |  5
    9   | 1 | 9   |  7
'''
)
t2 = pw.debug.table_from_markdown(
    '''
         | K | val | t
    21   | 1 | 7  | 2
    22   | 1 | 3  | 8
    23   | 0 | 0  | 2
    24   | 0 | 6  | 3
    25   | 0 | 2  | 7
    26   | 0 | 3  | 8
    27   | 0 | 9  | 9
    28   | 0 | 7  | 13
    29   | 0 | 4  | 14
    '''
)
res = t1.asof_join_left(
    t2,
    t1.t,
    t2.t,
    t1.K == t2.K,
    defaults={t2.val: -1},
).select(
    pw.this.instance,
    pw.this.t,
    val_left=t1.val,
    val_right=t2.val,
    sum=t1.val + t2.val,
)
pw.debug.compute_and_print(res, include_id=False)
```

Show Code Results

```
instance | t  | val_left | val_right | sum
0        | 1  | 1        | -1        | 0
0        | 4  | 2        | 6         | 8
0        | 5  | 3        | 6         | 9
0        | 6  | 4        | 6         | 10
0        | 7  | 5        | 2         | 7
0        | 11 | 6        | 9         | 15
0        | 12 | 7        | 9         | 16
1        | 5  | 8        | 7         | 15
1        | 7  | 9        | 7         | 16
```

Setting behavior allows to control temporal behavior of an asof join. Then, each side of the asof join keeps track of the maximal already seen time (self\_time and other\_time). In the context of asof\_join the arguments of behavior are defined as follows:

*   **delay** - buffers results until the maximal already seen time is greater than or equal to their time plus delay.
*   **cutoff** - ignores records with times less or equal to the maximal already seen time minus cutoff; it is also used to garbage collect records that have times lower or equal to the above threshold. When cutoff is not set, the asof join will remember all records from both sides.
*   **keep\_results** - if set to True, keeps all results of the operator. If set to False, keeps only results that are newer than the maximal seen time minus cutoff.

Examples without and with forgetting:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
    value | event_time | __time__
      2   |      2     |     4
      3   |      5     |     6
      4   |      1     |     8
      5   |      7     |    14
'''
)
t2 = pw.debug.table_from_markdown(
    '''
    value | event_time | __time__
      42  |      1     |     2
       8  |      4     |    10
'''
)
result_without_cutoff = t1.asof_join_left(t2, t1.event_time, t2.event_time).select(
    left_value=t1.value,
    right_value=t2.value,
    left_time=t1.event_time,
    right_time=t2.event_time,
)
pw.debug.compute_and_print_update_stream(result_without_cutoff, include_id=False)
```

Show Code Results

```
left_value | right_value | left_time | right_time | __time__ | __diff__
2          | 42          | 2         | 1          | 4        | 1
3          | 42          | 5         | 1          | 6        | 1
4          | 42          | 1         | 1          | 8        | 1
3          | 42          | 5         | 1          | 10       | -1
3          | 8           | 5         | 4          | 10       | 1
5          | 8           | 7         | 4          | 14       | 1
```

```
result_without_cutoff = t1.asof_join_left(
    t2,
    t1.event_time,
    t2.event_time,
    behavior=pw.temporal.common_behavior(cutoff=2),
).select(
    left_value=t1.value,
    right_value=t2.value,
    left_time=t1.event_time,
    right_time=t2.event_time,
)
pw.debug.compute_and_print_update_stream(result_without_cutoff, include_id=False)
```

Show Code Results

```
left_value | right_value | left_time | right_time | __time__ | __diff__
2          | 42          | 2         | 1          | 4        | 1
3          | 42          | 5         | 1          | 6        | 1
3          | 42          | 5         | 1          | 10       | -1
3          | 8           | 5         | 4          | 10       | 1
5          | 8           | 7         | 4          | 14       | 1
```

The record with `value=4` from table `t1` was not joined because its `event_time` was less than the maximal already seen time minus `cutoff` (`1 <= 5-2`).

### [**asof\_join\_outer**(other, self\_time, other\_time, \*on, behavior=None, defaults={}, direction=Direction.BACKWARD, left\_instance=None, right\_instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.asof_join_outer)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/temporal/_asof_join.py#L996-L1107)Perform an outer ASOF join of two tables.

*   **Parameters**
    *   **other** ([`Table`](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)) – Table to join with self, both must contain a column val
    *   **self\_time** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – time-like column expression to do the join against
    *   **other\_time** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – time-like column expression to do the join against
    *   **on** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – a list of column expressions. Each must have == as the top level operation and be of the form LHS: ColumnReference == RHS: ColumnReference.
    *   **behavior** ([`CommonBehavior`](https://pathway.com/developers/api-docs/pathway-stdlib-temporal#pathway.stdlib.temporal.temporal_behavior.CommonBehavior) | `None`) – defines the temporal behavior of a join - features like delaying entries or ignoring late entries.
    *   **defaults** (`dict`\[[`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference), `Any`\]) – dictionary column-> default value. Entries in the resulting table that not have a predecessor in the join will be set to this default value. If no default is provided, None will be used.
    *   **direction** ([`Direction`](https://pathway.com/developers/api-docs/pathway-stdlib-temporal#pathway.stdlib.temporal.Direction)) – direction of the join, accepted values: Direction.BACKWARD, Direction.FORWARD, Direction.NEAREST
    *   **left\_instance/right\_instance** – optional arguments describing partitioning of the data into separate instances

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
        | K | val |  t
    1   | 0 | 1   |  1
    2   | 0 | 2   |  4
    3   | 0 | 3   |  5
    4   | 0 | 4   |  6
    5   | 0 | 5   |  7
    6   | 0 | 6   |  11
    7   | 0 | 7   |  12
    8   | 1 | 8   |  5
    9   | 1 | 9   |  7
'''
)
t2 = pw.debug.table_from_markdown(
    '''
         | K | val | t
    21   | 1 | 7  | 2
    22   | 1 | 3  | 8
    23   | 0 | 0  | 2
    24   | 0 | 6  | 3
    25   | 0 | 2  | 7
    26   | 0 | 3  | 8
    27   | 0 | 9  | 9
    28   | 0 | 7  | 13
    29   | 0 | 4  | 14
    '''
)
res = t1.asof_join_outer(
    t2,
    t1.t,
    t2.t,
    t1.K == t2.K,
    defaults={t1.val: -1, t2.val: -1},
).select(
    pw.this.instance,
    pw.this.t,
    val_left=t1.val,
    val_right=t2.val,
    sum=t1.val + t2.val,
)
pw.debug.compute_and_print(res, include_id=False)
```

Show Code Results

```
instance | t  | val_left | val_right | sum
0        | 1  | 1        | -1        | 0
0        | 2  | 1        | 0         | 1
0        | 3  | 1        | 6         | 7
0        | 4  | 2        | 6         | 8
0        | 5  | 3        | 6         | 9
0        | 6  | 4        | 6         | 10
0        | 7  | 5        | 2         | 7
0        | 7  | 5        | 6         | 11
0        | 8  | 5        | 3         | 8
0        | 9  | 5        | 9         | 14
0        | 11 | 6        | 9         | 15
0        | 12 | 7        | 9         | 16
0        | 13 | 7        | 7         | 14
0        | 14 | 7        | 4         | 11
1        | 2  | -1       | 7         | 6
1        | 5  | 8        | 7         | 15
1        | 7  | 9        | 7         | 16
1        | 8  | 9        | 3         | 12
```

### [**asof\_join\_right**(other, self\_time, other\_time, \*on, behavior=None, defaults={}, direction=Direction.BACKWARD, left\_instance=None, right\_instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.asof_join_right)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/temporal/_asof_join.py#L825-L993)Perform a right ASOF join of two tables.

*   **Parameters**
    *   **other** ([`Table`](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)) – Table to join with self, both must contain a column val
    *   **self\_time** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – time-like column expression to do the join against
    *   **other\_time** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – time-like column expression to do the join against
    *   **on** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – a list of column expressions. Each must have == as the top level operation and be of the form LHS: ColumnReference == RHS: ColumnReference.
    *   **behavior** ([`CommonBehavior`](https://pathway.com/developers/api-docs/pathway-stdlib-temporal#pathway.stdlib.temporal.temporal_behavior.CommonBehavior) | `None`) – defines the temporal behavior of a join - features like delaying entries or ignoring late entries.
    *   **defaults** (`dict`\[[`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference), `Any`\]) – dictionary column-> default value. Entries in the resulting table that not have a predecessor in the join will be set to this default value. If no default is provided, None will be used.
    *   **direction** ([`Direction`](https://pathway.com/developers/api-docs/pathway-stdlib-temporal#pathway.stdlib.temporal.Direction)) – direction of the join, accepted values: Direction.BACKWARD, Direction.FORWARD, Direction.NEAREST
    *   **left\_instance/right\_instance** – optional arguments describing partitioning of the data into separate instances

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
        | K | val |  t
    1   | 0 | 1   |  1
    2   | 0 | 2   |  4
    3   | 0 | 3   |  5
    4   | 0 | 4   |  6
    5   | 0 | 5   |  7
    6   | 0 | 6   |  11
    7   | 0 | 7   |  12
    8   | 1 | 8   |  5
    9   | 1 | 9   |  7
'''
)
t2 = pw.debug.table_from_markdown(
    '''
         | K | val | t
    21   | 1 | 7  | 2
    22   | 1 | 3  | 8
    23   | 0 | 0  | 2
    24   | 0 | 6  | 3
    25   | 0 | 2  | 7
    26   | 0 | 3  | 8
    27   | 0 | 9  | 9
    28   | 0 | 7  | 13
    29   | 0 | 4  | 14
    '''
)
res = t1.asof_join_right(
    t2,
    t1.t,
    t2.t,
    t1.K == t2.K,
    defaults={t1.val: -1},
).select(
    pw.this.instance,
    pw.this.t,
    val_left=t1.val,
    val_right=t2.val,
    sum=t1.val + t2.val,
)
pw.debug.compute_and_print(res, include_id=False)
```

Show Code Results

```
instance | t  | val_left | val_right | sum
0        | 2  | 1        | 0         | 1
0        | 3  | 1        | 6         | 7
0        | 7  | 5        | 2         | 7
0        | 8  | 5        | 3         | 8
0        | 9  | 5        | 9         | 14
0        | 13 | 7        | 7         | 14
0        | 14 | 7        | 4         | 11
1        | 2  | -1       | 7         | 6
1        | 8  | 9        | 3         | 12
```

Setting behavior allows to control temporal behavior of an asof join. Then, each side of the asof join keeps track of the maximal already seen time (self\_time and other\_time). In the context of asof\_join the arguments of behavior are defined as follows:

*   **delay** - buffers results until the maximal already seen time is greater than or equal to their time plus delay.
*   **cutoff** - ignores records with times less or equal to the maximal already seen time minus cutoff; it is also used to garbage collect records that have times lower or equal to the above threshold. When cutoff is not set, the asof join will remember all records from both sides.
*   **keep\_results** - if set to True, keeps all results of the operator. If set to False, keeps only results that are newer than the maximal seen time minus cutoff.

Examples without and with forgetting:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
    value | event_time | __time__
      42  |      1     |     2
       8  |      4     |    10
'''
)
t2 = pw.debug.table_from_markdown(
    '''
    value | event_time | __time__
      2   |      2     |     4
      3   |      5     |     6
      4   |      1     |     8
      5   |      7     |    14
'''
)
result_without_cutoff = t1.asof_join_right(t2, t1.event_time, t2.event_time).select(
    left_value=t1.value,
    right_value=t2.value,
    left_time=t1.event_time,
    right_time=t2.event_time,
)
pw.debug.compute_and_print_update_stream(result_without_cutoff, include_id=False)
```

Show Code Results

```
left_value | right_value | left_time | right_time | __time__ | __diff__
42         | 2           | 1         | 2          | 4        | 1
42         | 3           | 1         | 5          | 6        | 1
42         | 4           | 1         | 1          | 8        | 1
42         | 3           | 1         | 5          | 10       | -1
8          | 3           | 4         | 5          | 10       | 1
8          | 5           | 4         | 7          | 14       | 1
```

```
result_without_cutoff = t1.asof_join_right(
    t2,
    t1.event_time,
    t2.event_time,
    behavior=pw.temporal.common_behavior(cutoff=2),
).select(
    left_value=t1.value,
    right_value=t2.value,
    left_time=t1.event_time,
    right_time=t2.event_time,
)
pw.debug.compute_and_print_update_stream(result_without_cutoff, include_id=False)
```

Show Code Results

```
left_value | right_value | left_time | right_time | __time__ | __diff__
42         | 2           | 1         | 2          | 4        | 1
42         | 3           | 1         | 5          | 6        | 1
42         | 3           | 1         | 5          | 10       | -1
8          | 3           | 4         | 5          | 10       | 1
8          | 5           | 4         | 7          | 14       | 1
```

The record with `value=4` from table `t2` was not joined because its `event_time` was less than the maximal already seen time minus `cutoff` (`1 <= 5-2`).

### [**asof\_now\_join**(other, \*on, how=JoinMode.INNER, id=None, left\_instance=None, right\_instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.asof_now_join)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/temporal/_asof_now_join.py#L172-L249)Performs asof now join of self with other using join expressions. Each row of self is joined with rows from other at a given processing time. Rows from self are not stored. They are joined with rows of other at their processing time. If other is updated in the future, rows from self from the past won’t be updated. Rows from other are stored. They can be joined with future rows of self.

*   **Parameters**
    *   **other** ([`Table`](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)) – the right side of a join.
    *   **on** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – a list of column expressions. Each must have == as the top level operation and be of the form LHS: ColumnReference == RHS: ColumnReference.
    *   **id** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference) | `None`) – optional argument for id of result, can be only self.id or other.id
    *   **how** ([`JoinMode`](https://pathway.com/developers/api-docs/pathway#pathway.JoinMode)) – by default, inner join is performed. Possible values are JoinMode.{INNER,LEFT} which correspond to inner and left join respectively.
*   **Returns**  
    _AsofNowJoinResult_ – an object on which .select() may be called to extract relevant columns from the result of the join.

Example:

```
import pathway as pw
data = pw.debug.table_from_markdown(
    '''
    id | value | instance | __time__ | __diff__
     2 |   4   |    1     |     4    |     1
     2 |   4   |    1     |    10    |    -1
     5 |   5   |    1     |    10    |     1
     7 |   2   |    2     |    14    |     1
     7 |   2   |    2     |    22    |    -1
    11 |   3   |    2     |    26    |     1
     5 |   5   |    1     |    30    |    -1
    14 |   9   |    1     |    32    |     1
    '''
)
queries = pw.debug.table_from_markdown(
    '''
    value | instance | __time__
      1   |    1     |     2
      2   |    1     |     6
      4   |    1     |    12
      5   |    2     |    16
     10   |    1     |    26
    '''
)
result = queries.asof_now_join(
    data, pw.left.instance == pw.right.instance, how=pw.JoinMode.LEFT
).select(query=pw.left.value, ans=pw.right.value)
pw.debug.compute_and_print_update_stream(result, include_id=False)
```

Show Code Results

```
query | ans | __time__ | __diff__
1     |     | 2        | 1
2     | 4   | 6        | 1
4     | 5   | 12       | 1
5     | 2   | 16       | 1
10    | 5   | 26       | 1
```

### [**asof\_now\_join\_inner**(other, \*on, id=None, left\_instance=None, right\_instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.asof_now_join_inner)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/temporal/_asof_now_join.py#L252-L325)Performs asof now join of self with other using join expressions. Each row of self is joined with rows from other at a given processing time. Rows from self are not stored. They are joined with rows of other at their processing time. If other is updated in the future, rows from self from the past won’t be updated. Rows from other are stored. They can be joined with future rows of self.

*   **Parameters**
    *   **other** ([`Table`](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)) – the right side of a join.
    *   **on** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – a list of column expressions. Each must have == as the top level operation and be of the form LHS: ColumnReference == RHS: ColumnReference.
    *   **id** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference) | `None`) – optional argument for id of result, can be only self.id or other.id
*   **Returns**  
    _AsofNowJoinResult_ – an object on which .select() may be called to extract relevant columns from the result of the join.

Example:

```
import pathway as pw
data = pw.debug.table_from_markdown(
    '''
    id | value | instance | __time__ | __diff__
     2 |   4   |    1     |     4    |     1
     2 |   4   |    1     |    10    |    -1
     5 |   5   |    1     |    10    |     1
     7 |   2   |    2     |    14    |     1
     7 |   2   |    2     |    22    |    -1
    11 |   3   |    2     |    26    |     1
     5 |   5   |    1     |    30    |    -1
    14 |   9   |    1     |    32    |     1
    '''
)
queries = pw.debug.table_from_markdown(
    '''
    value | instance | __time__
      1   |    1     |     2
      2   |    1     |     6
      4   |    1     |    12
      5   |    2     |    16
     10   |    1     |    26
    '''
)
result = queries.asof_now_join_inner(
    data, pw.left.instance == pw.right.instance
).select(query=pw.left.value, ans=pw.right.value)
pw.debug.compute_and_print_update_stream(result, include_id=False)
```

Show Code Results

```
query | ans | __time__ | __diff__
2     | 4   | 6        | 1
4     | 5   | 12       | 1
5     | 2   | 16       | 1
10    | 5   | 26       | 1
```

### [**asof\_now\_join\_left**(other, \*on, id=None, left\_instance=None, right\_instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.asof_now_join_left)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/temporal/_asof_now_join.py#L328-L403)Performs asof now join of self with other using join expressions. Each row of self is joined with rows from other at a given processing time. If there are no matching rows in other, missing values on the right side are replaced with None. Rows from self are not stored. They are joined with rows of other at their processing time. If other is updated in the future, rows from self from the past won’t be updated. Rows from other are stored. They can be joined with future rows of self.

*   **Parameters**
    *   **other** ([`Table`](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)) – the right side of a join.
    *   **on** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – a list of column expressions. Each must have == as the top level operation and be of the form LHS: ColumnReference == RHS: ColumnReference.
    *   **id** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference) | `None`) – optional argument for id of result, can be only self.id or other.id
*   **Returns**  
    _AsofNowJoinResult_ – an object on which .select() may be called to extract relevant columns from the result of the join.

Example:

```
import pathway as pw
data = pw.debug.table_from_markdown(
    '''
    id | value | instance | __time__ | __diff__
     2 |   4   |    1     |     4    |     1
     2 |   4   |    1     |    10    |    -1
     5 |   5   |    1     |    10    |     1
     7 |   2   |    2     |    14    |     1
     7 |   2   |    2     |    22    |    -1
    11 |   3   |    2     |    26    |     1
     5 |   5   |    1     |    30    |    -1
    14 |   9   |    1     |    32    |     1
    '''
)
queries = pw.debug.table_from_markdown(
    '''
    value | instance | __time__
      1   |    1     |     2
      2   |    1     |     6
      4   |    1     |    12
      5   |    2     |    16
     10   |    1     |    26
    '''
)
result = queries.asof_now_join_left(
    data, pw.left.instance == pw.right.instance
).select(query=pw.left.value, ans=pw.right.value)
pw.debug.compute_and_print_update_stream(result, include_id=False)
```

Show Code Results

```
query | ans | __time__ | __diff__
1     |     | 2        | 1
2     | 4   | 6        | 1
4     | 5   | 12       | 1
5     | 2   | 16       | 1
10    | 5   | 26       | 1
```

### [**cast\_to\_types**(\*\*kwargs)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.cast_to_types)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L2010-L2023)Casts columns to types.

### [**concat**(\*others)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.concat)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L1332-L1414)Concats self with every other ∊ others.

Semantics:

*   result.columns == self.columns == other.columns
*   result.id == self.id ∪ other.id

if self.id and other.id collide, throws an exception.

Requires:

*   other.columns == self.columns
*   self.id disjoint with other.id

*   **Parameters**  
    **other** – the other table.
*   **Returns**  
    _Table_ – The concatenated table. Id’s of rows from original tables are preserved.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
  | age | owner | pet
1 | 10  | Alice | 1
2 | 9   | Bob   | 1
3 | 8   | Alice | 2
''')
t2 = pw.debug.table_from_markdown('''
   | age | owner | pet
11 | 11  | Alice | 30
12 | 12  | Tom   | 40
''')
pw.universes.promise_are_pairwise_disjoint(t1, t2)
t3 = t1.concat(t2)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
age | owner | pet
8   | Alice | 2
9   | Bob   | 1
10  | Alice | 1
11  | Alice | 30
12  | Tom   | 40
```

### [**concat\_reindex**(\*tables)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.concat_reindex)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L306-L350)Concatenate contents of several tables.

This is similar to PySpark union. All tables must have the same schema. Each row is reindexed.

*   **Parameters**  
    **tables** ([`Table`](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)) – List of tables to concatenate. All tables must have the same schema.
*   **Returns**  
    _Table_ – The concatenated table. It will have new, synthetic ids.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
  | pet
1 | Dog
7 | Cat
''')
t2 = pw.debug.table_from_markdown('''
  | pet
1 | Manul
8 | Octopus
''')
t3 = t1.concat_reindex(t2)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
pet
Cat
Dog
Manul
Octopus
```

### [**copy**()](https://pathway.com/developers/api-docs/pathway/#pathway.Table.copy)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L902-L928)Returns a copy of a table.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
age | owner | pet
10  | Alice | dog
9   | Bob   | dog
8   | Alice | cat
7   | Bob   | dog
''')
t2 = t1.copy()
pw.debug.compute_and_print(t2, include_id=False)
```

Show Code Results

```
age | owner | pet
7   | Bob   | dog
8   | Alice | cat
9   | Bob   | dog
10  | Alice | dog
```

```
t1 is t2
```

Show Code Results

```
False
```

### [**deduplicate**(\*, value, instance=None, acceptor, persistent\_id=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.deduplicate)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L1060-L1161)Deduplicates rows in self on value column using acceptor function.

It keeps rows which where accepted by the acceptor function. Acceptor operates on two arguments - _CURRENT_ value and _PREVIOUS_ value.

*   **Parameters**
    *   **value** (`Union`\[[`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression), `None`, `int`, `float`, `str`, `bytes`, `bool`, `Pointer`, `datetime`, `timedelta`, `ndarray`, [`Json`](https://pathway.com/developers/api-docs/pathway#pathway.Json), `dict`\[`str`, `Any`\], `tuple`\[`Any`, `...`\], `Error`\]) – column expression used for deduplication.
    *   **instance** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression) | `None`) – Grouping column. For rows with different values in this column, deduplication will be performed separately. Defaults to None.
    *   **acceptor** (`Callable`\[\[`TypeVar`(`T`, bound= `Union`\[`None`, `int`, `float`, `str`, `bytes`, `bool`, `Pointer`, `datetime`, `timedelta`, `ndarray`, [`Json`](https://pathway.com/developers/api-docs/pathway#pathway.Json), `dict`\[`str`, `Any`\], `tuple`\[`Any`, `...`\], `Error`\]), `TypeVar`(`T`, bound= `Union`\[`None`, `int`, `float`, `str`, `bytes`, `bool`, `Pointer`, `datetime`, `timedelta`, `ndarray`, [`Json`](https://pathway.com/developers/api-docs/pathway#pathway.Json), `dict`\[`str`, `Any`\], `tuple`\[`Any`, `...`\], `Error`\])\], `bool`\]) – callback telling whether two values are different.
    *   **persistent\_id** (`str` | `None`) – (unstable) An identifier, under which the state of the table will be persisted or `None`, if there is no need to persist the state of this table. When a program restarts, it restores the state for all input tables according to what was saved for their `persistent_id`. This way it’s possible to configure the start of computations from the moment they were terminated last time.
*   **Returns**  
    _Table_ – the result of deduplication.

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
    val | __time__
     1  |     2
     2  |     4
     3  |     6
     4  |     8
'''
)
def acceptor(new_value, old_value) -> bool:
    return new_value >= old_value + 2
result = table.deduplicate(value=pw.this.val, acceptor=acceptor)
pw.debug.compute_and_print_update_stream(result, include_id=False)
```

Show Code Results

```
val | __time__ | __diff__
1   | 2        | 1
1   | 6        | -1
3   | 6        | 1
```

```
table = pw.debug.table_from_markdown(
    '''
    val | instance | __time__
     1  |     1    |     2
     2  |     1    |     4
     3  |     2    |     6
     4  |     1    |     8
     4  |     2    |     8
     5  |     1    |    10
'''
)
def acceptor(new_value, old_value) -> bool:
    return new_value >= old_value + 2
result = table.deduplicate(
    value=pw.this.val, instance=pw.this.instance, acceptor=acceptor
)
pw.debug.compute_and_print_update_stream(result, include_id=False)
```

Show Code Results

```
val | instance | __time__ | __diff__
1   | 1        | 2        | 1
3   | 2        | 6        | 1
1   | 1        | 8        | -1
4   | 1        | 8        | 1
```

### [**diff**(timestamp, \*values, instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.diff)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/ordered/diff.py#L8-L123)Compute the difference between the values in the `values` columns and the previous values according to the order defined by the column `timestamp`.

*   **Parameters**
    *   **timestamp** (`-`) – The column reference to the `timestamp` column on which the order is computed.
    *   **\*values** (`-`) – Variable-length argument representing the column references to the `values` columns.
    *   **instance** (`-`) – Can be used to group the values. The difference is only computed between rows with the same `instance` value.
*   **Returns**  
    `Table` – A new table where each column is replaced with a new column containing the difference and whose name is the concatenation of diff\_ and the former name.
*   **Raises**  
    **ValueError** – If the columns are not ColumnReference.

**NOTE**: \* The value of the “first” value (the row with the lowest value in the `timestamp` column) is `None`.

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown('''
timestamp | values
1         | 1
2         | 2
3         | 4
4         | 7
5         | 11
6         | 16
''')
table += table.diff(pw.this.timestamp, pw.this.values)
pw.debug.compute_and_print(table, include_id=False)
```

Show Code Results

```
timestamp | values | diff_values
1         | 1      |
2         | 2      | 1
3         | 4      | 2
4         | 7      | 3
5         | 11     | 4
6         | 16     | 5
```

```
table = pw.debug.table_from_markdown(
    '''
timestamp | instance | values
1         | 0        | 1
2         | 1        | 2
3         | 1        | 4
3         | 0        | 7
6         | 1        | 11
6         | 0        | 16
'''
)
table += table.diff(pw.this.timestamp, pw.this.values, instance=pw.this.instance)
pw.debug.compute_and_print(table, include_id=False)
```

Show Code Results

```
timestamp | instance | values | diff_values
1         | 0        | 1      |
2         | 1        | 2      |
3         | 0        | 7      | 6
3         | 1        | 4      | 2
6         | 0        | 16     | 9
6         | 1        | 11     | 7
```

### [**difference**(other)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.difference)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L737-L773)Restrict self universe to keys not appearing in the other table.

*   **Parameters**  
    **other** ([`Table`](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)) – table with ids to remove from self.
*   **Returns**  
    _Table_ – table with restricted universe, with the same set of columns

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
  | age  | owner  | pet
1 | 10   | Alice  | 1
2 | 9    | Bob    | 1
3 | 8    | Alice  | 2
''')
t2 = pw.debug.table_from_markdown('''
  | cost
2 | 100
3 | 200
4 | 300
''')
t3 = t1.difference(t2)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
age | owner | pet
10  | Alice | 1
```

### [**empty**()](https://pathway.com/developers/api-docs/pathway/#pathway.Table.empty)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L352-L376)Creates an empty table with a schema specified by kwargs.

*   **Parameters**  
    **kwargs** (`DType`) – Dict whose keys are column names and values are column types.
*   **Returns**  
    _Table_ – Created empty table.

Example:

```
import pathway as pw
t1 = pw.Table.empty(age=float, pet=float)
pw.debug.compute_and_print(t1, include_id=False)
```

Show Code Results

```
age | pet
```

### [**filter**(filter\_expression)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.filter)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L487-L526)Filter a table according to filter\_expression condition.

*   **Parameters**  
    **filter\_expression** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – ColumnExpression that specifies the filtering condition.
*   **Returns**  
    _Table_ – Result has the same schema as self and its ids are subset of self.id.

Example:

```
import pathway as pw
vertices = pw.debug.table_from_markdown('''
label outdegree
    1         3
    7         0
''')
filtered = vertices.filter(vertices.outdegree == 0)
pw.debug.compute_and_print(filtered, include_id=False)
```

Show Code Results

```
label | outdegree
7     | 0
```

### [**flatten**(to\_flatten, \*, origin\_id=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.flatten)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L2086-L2125)Performs a flatmap operation on a column or expression given as a first argument. Datatype of this column or expression has to be iterable or Json array. Other columns of the table are duplicated as many times as the length of the iterable.

It is possible to get ids of source rows by passing origin\_id argument, which is a new name of the column with the source ids.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
  | pet  |  age
1 | Dog  |   2
7 | Cat  |   5
''')
t2 = t1.flatten(t1.pet)
pw.debug.compute_and_print(t2, include_id=False)
```

Show Code Results

```
pet | age
C   | 5
D   | 2
a   | 5
g   | 2
o   | 2
t   | 5
```

### [**from\_columns**(\*\*kwargs)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.from_columns)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L262-L304)Build a table from columns.

All columns must have the same ids. Columns’ names must be pairwise distinct.

*   **Parameters**
    *   **args** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference)) – List of columns.
    *   **kwargs** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference)) – Columns with their new names.
*   **Returns**  
    _Table_ – Created table.

Example:

```
import pathway as pw
t1 = pw.Table.empty(age=float, pet=float)
t2 = pw.Table.empty(foo=float, bar=float).with_universe_of(t1)
t3 = pw.Table.from_columns(t1.pet, qux=t2.foo)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
pet | qux
```

### [**groupby**(\*args, id=None, sort\_by=None, instance=None, )](https://pathway.com/developers/api-docs/pathway/#pathway.Table.groupby)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L938-L1020)Groups table by columns from args.

**NOTE**: Usually followed by .reduce() that aggregates the result and returns a table.

*   **Parameters**
    *   **args** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference)) – columns to group by.
    *   **id** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference) | `None`) – if provided, is the column used to set id’s of the rows of the result
    *   **sort\_by** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference) | `None`) – if provided, column values are used as sorting keys for particular reducers
    *   **instance** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference) | `None`) – optional argument describing partitioning of the data into separate instances
*   **Returns**  
    _GroupedTable_ – Groupby object.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
age | owner | pet
10  | Alice | dog
9   | Bob   | dog
8   | Alice | cat
7   | Bob   | dog
''')
t2 = t1.groupby(t1.pet, t1.owner).reduce(t1.owner, t1.pet, ageagg=pw.reducers.sum(t1.age))
pw.debug.compute_and_print(t2, include_id=False)
```

Show Code Results

```
owner | pet | ageagg
Alice | cat | 8
Alice | dog | 10
Bob   | dog | 16
```

### [**interpolate**(timestamp, \*values, mode=InterpolateMode.LINEAR)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.interpolate)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/statistical/_interpolate.py#L32-L146)Interpolates missing values in a column using the previous and next values based on a timestamps column.

*   **Parameters**
    *   **timestamp** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference)) – Reference to the column containing timestamps.
    *   **\*values** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference)) – References to the columns containing values to be interpolated.
    *   **mode** (`InterpolateMode, optional`) – The interpolation mode. Currently, only InterpolateMode.LINEAR is supported. Default is InterpolateMode.LINEAR.
*   **Returns**  
    _Table_ – A new table with the interpolated values.
*   **Raises**  
    **ValueError** – If the columns are not ColumnReference or if the interpolation mode is not supported.

**NOTE**: \* The interpolation is performed based on linear interpolation between the previous and next values.

*   If a value is missing at the beginning or end of the column, no interpolation is performed.

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown('''
timestamp | values_a | values_b
1         | 1        | 10
2         |          |
3         | 3        |
4         |          |
5         |          |
6         | 6        | 60
''')
table = table.interpolate(pw.this.timestamp, pw.this.values_a, pw.this.values_b)
pw.debug.compute_and_print(table, include_id=False)
```

Show Code Results

```
timestamp | values_a | values_b
1         | 1.0      | 10.0
2         | 2.0      | 20.0
3         | 3.0      | 30.0
4         | 4.0      | 40.0
5         | 5.0      | 50.0
6         | 6.0      | 60.0
```

### [**intersect**(\*tables)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.intersect)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L775-L822)Restrict self universe to keys appearing in all of the tables.

*   **Parameters**  
    **tables** ([`Table`](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)) – tables keys of which are used to restrict universe.
*   **Returns**  
    _Table_ – table with restricted universe, with the same set of columns

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
  | age  | owner  | pet
1 | 10   | Alice  | 1
2 | 9    | Bob    | 1
3 | 8    | Alice  | 2
''')
t2 = pw.debug.table_from_markdown('''
  | cost
2 | 100
3 | 200
4 | 300
''')
t3 = t1.intersect(t2)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
age | owner | pet
8   | Alice | 2
9   | Bob   | 1
```

### [**interval\_join**(other, self\_time, other\_time, interval, \*on, behavior=None, how=JoinMode.INNER, left\_instance=None, right\_instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.interval_join)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/temporal/_interval_join.py#L573-L775)Performs an interval join of self with other using a time difference and join expressions. If self\_time + lower\_bound <= other\_time <= self\_time + upper\_bound and conditions in on are satisfied, the rows are joined.

*   **Parameters**
    *   **other** ([`Table`](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)) – the right side of a join.
    *   **self\_time** (`pw.ColumnExpression[int | float | datetime]`) – time expression in self.
    *   **other\_time** (`pw.ColumnExpression[int | float | datetime]`) – time expression in other.
    *   **lower\_bound** – a lower bound on time difference between other\_time and self\_time.
    *   **upper\_bound** – an upper bound on time difference between other\_time and self\_time.
    *   **on** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – a list of column expressions. Each must have == as the top level operation and be of the form LHS: ColumnReference == RHS: ColumnReference.
    *   **behavior** ([`CommonBehavior`](https://pathway.com/developers/api-docs/pathway-stdlib-temporal#pathway.stdlib.temporal.temporal_behavior.CommonBehavior) | `None`) – defines a temporal behavior of a join - features like delaying entries or ignoring late entries. You can see examples below or read more in the [temporal behavior of interval join tutorial](https://pathway.com/developers/user-guide/temporal-data/temporal_behavior) .
    *   **how** ([`JoinMode`](https://pathway.com/developers/api-docs/pathway#pathway.JoinMode)) – decides whether to run interval\_join\_inner, interval\_join\_left, interval\_join\_right or interval\_join\_outer. Default is INNER.
    *   **left\_instance/right\_instance** – optional arguments describing partitioning of the data into separate instances
*   **Returns**  
    _IntervalJoinResult_ – a result of the interval join. A method .select() can be called on it to extract relevant columns from the result of a join.

Examples:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
    | t
  1 | 3
  2 | 4
  3 | 5
  4 | 11
'''
)
t2 = pw.debug.table_from_markdown(
    '''
    | t
  1 | 0
  2 | 1
  3 | 4
  4 | 7
'''
)
t3 = t1.interval_join(t2, t1.t, t2.t, pw.temporal.interval(-2, 1)).select(
    left_t=t1.t, right_t=t2.t
)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
left_t | right_t
3      | 1
3      | 4
4      | 4
5      | 4
```

```
t1 = pw.debug.table_from_markdown(
    '''
    | a | t
  1 | 1 | 3
  2 | 1 | 4
  3 | 1 | 5
  4 | 1 | 11
  5 | 2 | 2
  6 | 2 | 3
  7 | 3 | 4
'''
)
t2 = pw.debug.table_from_markdown(
    '''
    | b | t
  1 | 1 | 0
  2 | 1 | 1
  3 | 1 | 4
  4 | 1 | 7
  5 | 2 | 0
  6 | 2 | 2
  7 | 4 | 2
'''
)
t3 = t1.interval_join(
    t2, t1.t, t2.t, pw.temporal.interval(-2, 1), t1.a == t2.b, how=pw.JoinMode.INNER
).select(t1.a, left_t=t1.t, right_t=t2.t)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
a | left_t | right_t
1 | 3      | 1
1 | 3      | 4
1 | 4      | 4
1 | 5      | 4
2 | 2      | 0
2 | 2      | 2
2 | 3      | 2
```

Setting behavior allows to control temporal behavior of an interval join. Then, each side of the interval join keeps track of the maximal already seen time (self\_time and other\_time). The arguments of behavior mean in the context of an interval join what follows:

*   **delay** - buffers results until the maximal already seen time is greater than or equal to their time plus delay.
*   **cutoff** - ignores records with times less or equal to the maximal already seen time minus cutoff; it is also used to garbage collect records that have times lower or equal to the above threshold. When cutoff is not set, interval join will remember all records from both sides.
*   **keep\_results** - if set to True, keeps all results of the operator. If set to False, keeps only results that are newer than the maximal seen time minus cutoff.

Example without and with forgetting:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
    value | instance | event_time | __time__
      1   |     1    |      0     |     2
      2   |     2    |      2     |     4
      3   |     1    |      4     |     4
      4   |     2    |      8     |     8
      5   |     1    |      0     |    10
      6   |     1    |      4     |    10
'''
)
t2 = pw.debug.table_from_markdown(
    '''
    value | instance | event_time | __time__
      42  |     1    |      2     |     2
       8  |     2    |     10     |    14
      10  |     2    |      4     |    30
'''
)
result_without_cutoff = t1.interval_join(
    t2,
    t1.event_time,
    t2.event_time,
    pw.temporal.interval(-2, 2),
    t1.instance == t2.instance,
).select(
    left_value=t1.value,
    right_value=t2.value,
    instance=t1.instance,
    left_time=t1.event_time,
    right_time=t2.event_time,
)
pw.debug.compute_and_print_update_stream(result_without_cutoff, include_id=False)
```

Show Code Results

```
left_value | right_value | instance | left_time | right_time | __time__ | __diff__
1          | 42          | 1        | 0         | 2          | 2        | 1
3          | 42          | 1        | 4         | 2          | 4        | 1
5          | 42          | 1        | 0         | 2          | 10       | 1
6          | 42          | 1        | 4         | 2          | 10       | 1
4          | 8           | 2        | 8         | 10         | 14       | 1
2          | 10          | 2        | 2         | 4          | 30       | 1
```

```
result_with_cutoff = t1.interval_join(
    t2,
    t1.event_time,
    t2.event_time,
    pw.temporal.interval(-2, 2),
    t1.instance == t2.instance,
    behavior=pw.temporal.common_behavior(cutoff=6),
).select(
    left_value=t1.value,
    right_value=t2.value,
    instance=t1.instance,
    left_time=t1.event_time,
    right_time=t2.event_time,
)
pw.debug.compute_and_print_update_stream(result_with_cutoff, include_id=False)
```

Show Code Results

```
left_value | right_value | instance | left_time | right_time | __time__ | __diff__
1          | 42          | 1        | 0         | 2          | 2        | 1
3          | 42          | 1        | 4         | 2          | 4        | 1
6          | 42          | 1        | 4         | 2          | 10       | 1
4          | 8           | 2        | 8         | 10         | 14       | 1
```

The record with `value=5` from table `t1` was not joined because its `event_time` was less than the maximal already seen time minus `cutoff` (`0 <= 8-6`). The record with `value=10` from table `t2` was not joined because its `event_time` was equal to the maximal already seen time minus `cutoff` (`4 <= 10-6`).

### [**interval\_join\_inner**(other, self\_time, other\_time, interval, \*on, behavior=None, left\_instance=None, right\_instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.interval_join_inner)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/temporal/_interval_join.py#L778-L974)Performs an interval join of self with other using a time difference and join expressions. If self\_time + lower\_bound <= other\_time <= self\_time + upper\_bound and conditions in on are satisfied, the rows are joined.

*   **Parameters**
    *   **other** ([`Table`](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)) – the right side of a join.
    *   **self\_time** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – time expression in self.
    *   **other\_time** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – time expression in other.
    *   **lower\_bound** – a lower bound on time difference between other\_time and self\_time.
    *   **upper\_bound** – an upper bound on time difference between other\_time and self\_time.
    *   **on** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – a list of column expressions. Each must have == as the top level operation and be of the form LHS: ColumnReference == RHS: ColumnReference.
    *   **behavior** ([`CommonBehavior`](https://pathway.com/developers/api-docs/pathway-stdlib-temporal#pathway.stdlib.temporal.temporal_behavior.CommonBehavior) | `None`) – defines temporal behavior of a join - features like delaying entries or ignoring late entries.
    *   **left\_instance/right\_instance** – optional arguments describing partitioning of the data into separate instances
*   **Returns**  
    _IntervalJoinResult_ – a result of the interval join. A method .select() can be called on it to extract relevant columns from the result of a join.

Examples:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
    | t
  1 | 3
  2 | 4
  3 | 5
  4 | 11
'''
)
t2 = pw.debug.table_from_markdown(
    '''
    | t
  1 | 0
  2 | 1
  3 | 4
  4 | 7
'''
)
t3 = t1.interval_join_inner(t2, t1.t, t2.t, pw.temporal.interval(-2, 1)).select(
    left_t=t1.t, right_t=t2.t
)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
left_t | right_t
3      | 1
3      | 4
4      | 4
5      | 4
```

```
t1 = pw.debug.table_from_markdown(
    '''
    | a | t
  1 | 1 | 3
  2 | 1 | 4
  3 | 1 | 5
  4 | 1 | 11
  5 | 2 | 2
  6 | 2 | 3
  7 | 3 | 4
'''
)
t2 = pw.debug.table_from_markdown(
    '''
    | b | t
  1 | 1 | 0
  2 | 1 | 1
  3 | 1 | 4
  4 | 1 | 7
  5 | 2 | 0
  6 | 2 | 2
  7 | 4 | 2
'''
)
t3 = t1.interval_join_inner(
    t2, t1.t, t2.t, pw.temporal.interval(-2, 1), t1.a == t2.b
).select(t1.a, left_t=t1.t, right_t=t2.t)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
a | left_t | right_t
1 | 3      | 1
1 | 3      | 4
1 | 4      | 4
1 | 5      | 4
2 | 2      | 0
2 | 2      | 2
2 | 3      | 2
```

Setting behavior allows to control temporal behavior of an interval join. Then, each side of the interval join keeps track of the maximal already seen time (self\_time and other\_time). The arguments of behavior mean in the context of an interval join what follows:

*   **delay** - buffers results until the maximal already seen time is greater than or equal to their time plus delay.
*   **cutoff** - ignores records with times less or equal to the maximal already seen time minus cutoff; it is also used to garbage collect records that have times lower or equal to the above threshold. When cutoff is not set, interval join will remember all records from both sides.
*   **keep\_results** - if set to True, keeps all results of the operator. If set to False, keeps only results that are newer than the maximal seen time minus cutoff.

Example without and with forgetting:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
    value | instance | event_time | __time__
      1   |     1    |      0     |     2
      2   |     2    |      2     |     4
      3   |     1    |      4     |     4
      4   |     2    |      8     |     8
      5   |     1    |      0     |    10
      6   |     1    |      4     |    10
'''
)
t2 = pw.debug.table_from_markdown(
    '''
    value | instance | event_time | __time__
      42  |     1    |      2     |     2
```