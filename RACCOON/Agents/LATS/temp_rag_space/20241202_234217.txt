Pathway API
===============

[for developers](https://pathway.com/developers/user-guide/introduction/welcome)

*   [Homepage](https://pathway.com/)

Search⌘K

[9k](https://github.com/pathwaycom/)

[Live Data Framework](https://pathway.com/developers/user-guide/introduction/welcome)[AI Pipelines](https://pathway.com/developers/ai-pipelines/welcome)[Connectors](https://pathway.com/developers/user-guide/connect/pathway-connectors)[API Docs](https://pathway.com/developers/api-docs/pathway)[App Templates](https://pathway.com/developers/templates)[Get help](https://pathway.com/developers/user-guide/development/get-help)

API Docs

*   [Pathway API](https://pathway.com/developers/api-docs/pathway)
*   [pw.Table](https://pathway.com/developers/api-docs/pathway-table)
*   [pw.asynchronous](https://pathway.com/developers/api-docs/asynchronous)
*   [pw.debug](https://pathway.com/developers/api-docs/debug)
*   [pw.demo](https://pathway.com/developers/api-docs/pathway-demo)
*   [pw.indexing](https://pathway.com/developers/api-docs/indexing)
*   [pw.io](https://pathway.com/developers/api-docs/pathway-io)
    *   [pw.io.airbyte](https://pathway.com/developers/api-docs/pathway-io/airbyte)
    *   [pw.io.bigquery](https://pathway.com/developers/api-docs/pathway-io/bigquery)
    *   [pw.io.csv](https://pathway.com/developers/api-docs/pathway-io/csv)
    *   [pw.io.debezium](https://pathway.com/developers/api-docs/pathway-io/debezium)
    *   [pw.io.deltalake](https://pathway.com/developers/api-docs/pathway-io/deltalake)
    *   [pw.io.elasticsearch](https://pathway.com/developers/api-docs/pathway-io/elasticsearch)
    *   [pw.io.fs](https://pathway.com/developers/api-docs/pathway-io/fs)
    *   [pw.io.gdrive](https://pathway.com/developers/api-docs/pathway-io/gdrive)
    *   [pw.io.http](https://pathway.com/developers/api-docs/pathway-io/http)
    *   [pw.io.jsonlines](https://pathway.com/developers/api-docs/pathway-io/jsonlines)
    *   [pw.io.kafka](https://pathway.com/developers/api-docs/pathway-io/kafka)
    *   [pw.io.logstash](https://pathway.com/developers/api-docs/pathway-io/logstash)
    *   [pw.io.minio](https://pathway.com/developers/api-docs/pathway-io/minio)
    *   [pw.io.mongodb](https://pathway.com/developers/api-docs/pathway-io/mongodb)
    *   [pw.io.nats](https://pathway.com/developers/api-docs/pathway-io/nats)
    *   [pw.io.null](https://pathway.com/developers/api-docs/pathway-io/null)
    *   [pw.io.plaintext](https://pathway.com/developers/api-docs/pathway-io/plaintext)
    *   [pw.io.postgres](https://pathway.com/developers/api-docs/pathway-io/postgres)
    *   [pw.io.pubsub](https://pathway.com/developers/api-docs/pathway-io/pubsub)
    *   [pw.io.pyfilesystem](https://pathway.com/developers/api-docs/pathway-io/pyfilesystem)
    *   [pw.io.python](https://pathway.com/developers/api-docs/pathway-io/python)
    *   [pw.io.redpanda](https://pathway.com/developers/api-docs/pathway-io/redpanda)
    *   [pw.io.s3](https://pathway.com/developers/api-docs/pathway-io/s3)
    *   [pw.io.slack](https://pathway.com/developers/api-docs/pathway-io/slack)
    *   [pw.io.sqlite](https://pathway.com/developers/api-docs/pathway-io/sqlite)
    
*   [pw.ml](https://pathway.com/developers/api-docs/ml)
*   [pw.persistence](https://pathway.com/developers/api-docs/persistence-api)
*   [pw.reducers](https://pathway.com/developers/api-docs/reducers)
*   [pw.sql](https://pathway.com/developers/api-docs/sql-api)
*   [pw.temporal](https://pathway.com/developers/api-docs/temporal)
*   [pw.udfs](https://pathway.com/developers/api-docs/udfs)
*   [pw.xpacks.connectors](https://pathway.com/developers/api-docs/pathway-xpacks-sharepoint)
*   [pw.xpacks.llm](https://pathway.com/developers/api-docs/pathway-xpacks-llm)
    *   [pw.xpacks.llm.llms](https://pathway.com/developers/api-docs/pathway-xpacks-llm/llms)
    *   [pw.xpacks.llm.embedders](https://pathway.com/developers/api-docs/pathway-xpacks-llm/embedders)
    *   [pw.xpacks.llm.parsers](https://pathway.com/developers/api-docs/pathway-xpacks-llm/parsers)
    *   [pw.xpacks.llm.splitters](https://pathway.com/developers/api-docs/pathway-xpacks-llm/splitters)
    *   [pw.xpacks.llm.vector\_store](https://pathway.com/developers/api-docs/pathway-xpacks-llm/vectorstore)
    *   [pw.xpacks.llm.document\_store](https://pathway.com/developers/api-docs/pathway-xpacks-llm/document_store)
    *   [pw.xpacks.llm.question\_answering](https://pathway.com/developers/api-docs/pathway-xpacks-llm/question_answering)
    *   [pw.xpacks.llm.prompts](https://pathway.com/developers/api-docs/pathway-xpacks-llm/prompts)
    *   [pw.xpacks.llm.rerankers](https://pathway.com/developers/api-docs/pathway-xpacks-llm/rerankers)
    *   [pw.xpacks.llm.servers](https://pathway.com/developers/api-docs/pathway-xpacks-llm/servers)
    

Table of Contents

Table of Contents

*   [pw.AsyncTransformer](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer "class  pw.AsyncTransformer(input_table, *, instance=pw.this.id, autocommit_duration_ms=1500)")
    *   [close](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.close "close()")
    *   [abstract async invoke](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.invoke "abstract async  invoke(*args, **kwargs)")
    *   [open](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.open "open()")
    *   [with\_options](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.with_options "with_options(capacity=None, timeout=None, retry_strategy=None, cache_strategy=None)")
    *   [failed: Table](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.failed "property  failed: Table ")
    *   [finished: Table](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.finished "property  finished: Table ")
    *   [output\_table: Table](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.output_table "property  output_table: Table ")
    *   [result: Table](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.result "property  result: Table ")
    *   [successful: Table](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.successful "property  successful: Table ")
*   [pw.BaseCustomAccumulator](https://pathway.com/developers/api-docs/pathway/#pathway.BaseCustomAccumulator "class  pw.BaseCustomAccumulator")
    *   [abstract compute\_result](https://pathway.com/developers/api-docs/pathway/#pathway.BaseCustomAccumulator.compute_result "abstract  compute_result()")
    *   [classmethod deserialize](https://pathway.com/developers/api-docs/pathway/#pathway.BaseCustomAccumulator.deserialize "classmethod  deserialize(val)")
    *   [abstract classmethod from\_row](https://pathway.com/developers/api-docs/pathway/#pathway.BaseCustomAccumulator.from_row "abstract classmethod  from_row(row)")
    *   [classmethod neutral](https://pathway.com/developers/api-docs/pathway/#pathway.BaseCustomAccumulator.neutral "classmethod  neutral()")
    *   [retract](https://pathway.com/developers/api-docs/pathway/#pathway.BaseCustomAccumulator.retract "retract(other)")
    *   [serialize](https://pathway.com/developers/api-docs/pathway/#pathway.BaseCustomAccumulator.serialize "serialize()")
    *   [abstract update](https://pathway.com/developers/api-docs/pathway/#pathway.BaseCustomAccumulator.update "abstract  update(other)")
*   [pw.ColumnExpression](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression "class  pw.ColumnExpression")
    *   [as\_bool](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression.as_bool "as_bool()")
    *   [as\_float](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression.as_float "as_float()")
    *   [as\_int](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression.as_int "as_int()")
    *   [as\_str](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression.as_str "as_str()")
    *   [get](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression.get "get(index, default=None)")
    *   [is\_none](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression.is_none "is_none()")
    *   [is\_not\_none](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression.is_not_none "is_not_none()")
    *   [to\_string](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression.to_string "to_string()")
*   [pw.ColumnReference](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnReference "class  pw.ColumnReference()")
    *   [name](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnReference.name "property  name")
    *   [table](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnReference.table "property  table")
*   [pw.DateTimeNaive](https://pathway.com/developers/api-docs/pathway/#pathway.DateTimeNaive "class  pw.DateTimeNaive(ts_input=<object object>, year=None, month=None, day=None, hour=None, minute=None, second=None, microsecond=None, tzinfo=None, *, nanosecond=None, tz=None, unit=None, fold=None)")
*   [pw.DateTimeUtc](https://pathway.com/developers/api-docs/pathway/#pathway.DateTimeUtc "class  pw.DateTimeUtc(ts_input=<object object>, year=None, month=None, day=None, hour=None, minute=None, second=None, microsecond=None, tzinfo=None, *, nanosecond=None, tz=None, unit=None, fold=None)")
*   [pw.Duration](https://pathway.com/developers/api-docs/pathway/#pathway.Duration "class  pw.Duration(value=<object object>, unit=None, **kwargs)")
*   [pw.GroupedJoinResult](https://pathway.com/developers/api-docs/pathway/#pathway.GroupedJoinResult "class  pw.GroupedJoinResult()")
    *   [reduce](https://pathway.com/developers/api-docs/pathway/#pathway.GroupedJoinResult.reduce "reduce(*args, **kwargs)")
*   [pw.GroupedTable](https://pathway.com/developers/api-docs/pathway/#pathway.GroupedTable "class  pw.GroupedTable()")
    *   [reduce](https://pathway.com/developers/api-docs/pathway/#pathway.GroupedTable.reduce "reduce(*args, **kwargs)")
*   [pw.JoinMode](https://pathway.com/developers/api-docs/pathway/#pathway.JoinMode "class  pw.JoinMode(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None)")
    *   [INNER = 0](https://pathway.com/developers/api-docs/pathway/#pathway.JoinMode.INNER "INNER = 0 ")
    *   [LEFT = 1](https://pathway.com/developers/api-docs/pathway/#pathway.JoinMode.LEFT "LEFT = 1 ")
    *   [OUTER = 3](https://pathway.com/developers/api-docs/pathway/#pathway.JoinMode.OUTER "OUTER = 3 ")
    *   [RIGHT = 2](https://pathway.com/developers/api-docs/pathway/#pathway.JoinMode.RIGHT "RIGHT = 2 ")
*   [pw.JoinResult](https://pathway.com/developers/api-docs/pathway/#pathway.JoinResult "class  pw.JoinResult()")
    *   [filter](https://pathway.com/developers/api-docs/pathway/#pathway.JoinResult.filter "filter(filter_expression)")
    *   [groupby](https://pathway.com/developers/api-docs/pathway/#pathway.JoinResult.groupby "groupby(*args, id=None)")
    *   [reduce](https://pathway.com/developers/api-docs/pathway/#pathway.JoinResult.reduce "reduce(*args, **kwargs)")
    *   [select](https://pathway.com/developers/api-docs/pathway/#pathway.JoinResult.select "select(*args, **kwargs)")
*   [pw.Joinable](https://pathway.com/developers/api-docs/pathway/#pathway.Joinable "class  pw.Joinable(context)")
    *   [join](https://pathway.com/developers/api-docs/pathway/#pathway.Joinable.join "join(other, *on, id=None, how=JoinMode.INNER, left_instance=None, right_instance=None)")
    *   [join\_inner](https://pathway.com/developers/api-docs/pathway/#pathway.Joinable.join_inner "join_inner(other, *on, id=None, left_instance=None, right_instance=None)")
    *   [join\_left](https://pathway.com/developers/api-docs/pathway/#pathway.Joinable.join_left "join_left(other, *on, id=None, left_instance=None, right_instance=None)")
    *   [join\_outer](https://pathway.com/developers/api-docs/pathway/#pathway.Joinable.join_outer "join_outer(other, *on, id=None, left_instance=None, right_instance=None)")
    *   [join\_right](https://pathway.com/developers/api-docs/pathway/#pathway.Joinable.join_right "join_right(other, *on, id=None, left_instance=None, right_instance=None)")
    *   [C: ColumnNamespace](https://pathway.com/developers/api-docs/pathway/#pathway.Joinable.C "property  C: ColumnNamespace ")
*   [pw.Json](https://pathway.com/developers/api-docs/pathway/#pathway.Json "class  pw.Json()")
    *   [as\_bool](https://pathway.com/developers/api-docs/pathway/#pathway.Json.as_bool "as_bool()")
    *   [as\_dict](https://pathway.com/developers/api-docs/pathway/#pathway.Json.as_dict "as_dict()")
    *   [as\_float](https://pathway.com/developers/api-docs/pathway/#pathway.Json.as_float "as_float()")
    *   [as\_int](https://pathway.com/developers/api-docs/pathway/#pathway.Json.as_int "as_int()")
    *   [as\_list](https://pathway.com/developers/api-docs/pathway/#pathway.Json.as_list "as_list()")
    *   [as\_str](https://pathway.com/developers/api-docs/pathway/#pathway.Json.as_str "as_str()")
*   [pw.LiveTable](https://pathway.com/developers/api-docs/pathway/#pathway.LiveTable "class  pw.LiveTable()")
*   [pw.Schema](https://pathway.com/developers/api-docs/pathway/#pathway.Schema "class  pw.Schema")
*   [pw.SchemaProperties](https://pathway.com/developers/api-docs/pathway/#pathway.SchemaProperties "class  pw.SchemaProperties(append_only=None)")
*   [pw.Table](https://pathway.com/developers/api-docs/pathway/#pathway.Table "class  pw.Table()")
    *   [asof\_join](https://pathway.com/developers/api-docs/pathway/#pathway.Table.asof_join "asof_join(other, self_time, other_time, *on, how, behavior=None, defaults={}, direction=Direction.BACKWARD, left_instance=None, right_instance=None)")
    *   [asof\_join\_left](https://pathway.com/developers/api-docs/pathway/#pathway.Table.asof_join_left "asof_join_left(other, self_time, other_time, *on, behavior=None, defaults={}, direction=Direction.BACKWARD, left_instance=None, right_instance=None)")
    *   [asof\_join\_outer](https://pathway.com/developers/api-docs/pathway/#pathway.Table.asof_join_outer "asof_join_outer(other, self_time, other_time, *on, behavior=None, defaults={}, direction=Direction.BACKWARD, left_instance=None, right_instance=None)")
    *   [asof\_join\_right](https://pathway.com/developers/api-docs/pathway/#pathway.Table.asof_join_right "asof_join_right(other, self_time, other_time, *on, behavior=None, defaults={}, direction=Direction.BACKWARD, left_instance=None, right_instance=None)")
    *   [asof\_now\_join](https://pathway.com/developers/api-docs/pathway/#pathway.Table.asof_now_join "asof_now_join(other, *on, how=JoinMode.INNER, id=None, left_instance=None, right_instance=None)")
    *   [asof\_now\_join\_inner](https://pathway.com/developers/api-docs/pathway/#pathway.Table.asof_now_join_inner "asof_now_join_inner(other, *on, id=None, left_instance=None, right_instance=None)")
    *   [asof\_now\_join\_left](https://pathway.com/developers/api-docs/pathway/#pathway.Table.asof_now_join_left "asof_now_join_left(other, *on, id=None, left_instance=None, right_instance=None)")
    *   [cast\_to\_types](https://pathway.com/developers/api-docs/pathway/#pathway.Table.cast_to_types "cast_to_types(**kwargs)")
    *   [concat](https://pathway.com/developers/api-docs/pathway/#pathway.Table.concat "concat(*others)")
    *   [concat\_reindex](https://pathway.com/developers/api-docs/pathway/#pathway.Table.concat_reindex "concat_reindex(*tables)")
    *   [copy](https://pathway.com/developers/api-docs/pathway/#pathway.Table.copy "copy()")
    *   [deduplicate](https://pathway.com/developers/api-docs/pathway/#pathway.Table.deduplicate "deduplicate(*, value, instance=None, acceptor, persistent_id=None)")
    *   [diff](https://pathway.com/developers/api-docs/pathway/#pathway.Table.diff "diff(timestamp, *values, instance=None)")
    *   [difference](https://pathway.com/developers/api-docs/pathway/#pathway.Table.difference "difference(other)")
    *   [empty](https://pathway.com/developers/api-docs/pathway/#pathway.Table.empty "empty()")
    *   [filter](https://pathway.com/developers/api-docs/pathway/#pathway.Table.filter "filter(filter_expression)")
    *   [flatten](https://pathway.com/developers/api-docs/pathway/#pathway.Table.flatten "flatten(to_flatten, *, origin_id=None)")
    *   [from\_columns](https://pathway.com/developers/api-docs/pathway/#pathway.Table.from_columns "from_columns(**kwargs)")
    *   [groupby](https://pathway.com/developers/api-docs/pathway/#pathway.Table.groupby "groupby(*args, id=None, sort_by=None, instance=None, )")
    *   [interpolate](https://pathway.com/developers/api-docs/pathway/#pathway.Table.interpolate "interpolate(timestamp, *values, mode=InterpolateMode.LINEAR)")
    *   [intersect](https://pathway.com/developers/api-docs/pathway/#pathway.Table.intersect "intersect(*tables)")
    *   [interval\_join](https://pathway.com/developers/api-docs/pathway/#pathway.Table.interval_join "interval_join(other, self_time, other_time, interval, *on, behavior=None, how=JoinMode.INNER, left_instance=None, right_instance=None)")
    *   [interval\_join\_inner](https://pathway.com/developers/api-docs/pathway/#pathway.Table.interval_join_inner "interval_join_inner(other, self_time, other_time, interval, *on, behavior=None, left_instance=None, right_instance=None)")
    *   [interval\_join\_left](https://pathway.com/developers/api-docs/pathway/#pathway.Table.interval_join_left "interval_join_left(other, self_time, other_time, interval, *on, behavior=None, left_instance=None, right_instance=None)")
    *   [interval\_join\_outer](https://pathway.com/developers/api-docs/pathway/#pathway.Table.interval_join_outer "interval_join_outer(other, self_time, other_time, interval, *on, behavior=None, left_instance=None, right_instance=None)")
    *   [interval\_join\_right](https://pathway.com/developers/api-docs/pathway/#pathway.Table.interval_join_right "interval_join_right(other, self_time, other_time, interval, *on, behavior=None, left_instance=None, right_instance=None)")
    *   [ix](https://pathway.com/developers/api-docs/pathway/#pathway.Table.ix "ix(expression, *, optional=False, context=None, allow_misses=False)")
    *   [ix\_ref](https://pathway.com/developers/api-docs/pathway/#pathway.Table.ix_ref "ix_ref(*args, optional=False, context=None, instance=None, allow_misses=False)")
    *   [plot](https://pathway.com/developers/api-docs/pathway/#pathway.Table.plot "plot(plotting_function, sorting_col=None)")
    *   [pointer\_from](https://pathway.com/developers/api-docs/pathway/#pathway.Table.pointer_from "pointer_from(*args, optional=False, instance=None)")
    *   [reduce](https://pathway.com/developers/api-docs/pathway/#pathway.Table.reduce "reduce(*args, **kwargs)")
    *   [remove\_errors](https://pathway.com/developers/api-docs/pathway/#pathway.Table.remove_errors "remove_errors()")
    *   [rename](https://pathway.com/developers/api-docs/pathway/#pathway.Table.rename "rename(names_mapping=None, **kwargs)")
    *   [rename\_by\_dict](https://pathway.com/developers/api-docs/pathway/#pathway.Table.rename_by_dict "rename_by_dict(names_mapping)")
    *   [rename\_columns](https://pathway.com/developers/api-docs/pathway/#pathway.Table.rename_columns "rename_columns(**kwargs)")
    *   [restrict](https://pathway.com/developers/api-docs/pathway/#pathway.Table.restrict "restrict(other)")
    *   [select](https://pathway.com/developers/api-docs/pathway/#pathway.Table.select "select(*args, **kwargs)")
    *   [show](https://pathway.com/developers/api-docs/pathway/#pathway.Table.show "show(*, snapshot=True, include_id=True, short_pointers=True, sorters=None)")
    *   [sort](https://pathway.com/developers/api-docs/pathway/#pathway.Table.sort "sort(key, instance=None)")
    *   [split](https://pathway.com/developers/api-docs/pathway/#pathway.Table.split "split(split_expression)")
    *   [typehints](https://pathway.com/developers/api-docs/pathway/#pathway.Table.typehints "typehints()")
    *   [update\_cells](https://pathway.com/developers/api-docs/pathway/#pathway.Table.update_cells "update_cells(other, )")
    *   [update\_rows](https://pathway.com/developers/api-docs/pathway/#pathway.Table.update_rows "update_rows(other)")
    *   [update\_types](https://pathway.com/developers/api-docs/pathway/#pathway.Table.update_types "update_types(**kwargs)")
    *   [window\_join](https://pathway.com/developers/api-docs/pathway/#pathway.Table.window_join "window_join(other, self_time, other_time, window, *on, how=JoinMode.INNER, left_instance=None, right_instance=None)")
    *   [window\_join\_inner](https://pathway.com/developers/api-docs/pathway/#pathway.Table.window_join_inner "window_join_inner(other, self_time, other_time, window, *on, left_instance=None, right_instance=None)")
    *   [window\_join\_left](https://pathway.com/developers/api-docs/pathway/#pathway.Table.window_join_left "window_join_left(other, self_time, other_time, window, *on, left_instance=None, right_instance=None)")
    *   [window\_join\_outer](https://pathway.com/developers/api-docs/pathway/#pathway.Table.window_join_outer "window_join_outer(other, self_time, other_time, window, *on, left_instance=None, right_instance=None)")
    *   [window\_join\_right](https://pathway.com/developers/api-docs/pathway/#pathway.Table.window_join_right "window_join_right(other, self_time, other_time, window, *on, left_instance=None, right_instance=None)")
    *   [windowby](https://pathway.com/developers/api-docs/pathway/#pathway.Table.windowby "windowby(time_expr, *, window, behavior=None, instance=None)")
    *   [with\_columns](https://pathway.com/developers/api-docs/pathway/#pathway.Table.with_columns "with_columns(*args, **kwargs)")
    *   [with\_id](https://pathway.com/developers/api-docs/pathway/#pathway.Table.with_id "with_id(new_index)")
    *   [with\_id\_from](https://pathway.com/developers/api-docs/pathway/#pathway.Table.with_id_from "with_id_from(*args, instance=None)")
    *   [with\_prefix](https://pathway.com/developers/api-docs/pathway/#pathway.Table.with_prefix "with_prefix(prefix)")
    *   [with\_suffix](https://pathway.com/developers/api-docs/pathway/#pathway.Table.with_suffix "with_suffix(suffix)")
    *   [with\_universe\_of](https://pathway.com/developers/api-docs/pathway/#pathway.Table.with_universe_of "with_universe_of(other)")
    *   [without](https://pathway.com/developers/api-docs/pathway/#pathway.Table.without "without(*columns)")
    *   [id: ColumnReference](https://pathway.com/developers/api-docs/pathway/#pathway.Table.id "property  id: ColumnReference ")
    *   [schema: type\[pathway.internals.schema.Schema\]](https://pathway.com/developers/api-docs/pathway/#pathway.Table.schema "property  schema: type[pathway.internals.schema.Schema] ")
    *   [slice: TableSlice](https://pathway.com/developers/api-docs/pathway/#pathway.Table.slice "property  slice: TableSlice ")
*   [pw.TableLike](https://pathway.com/developers/api-docs/pathway/#pathway.TableLike "class  pw.TableLike(context)")
    *   [promise\_universe\_is\_equal\_to](https://pathway.com/developers/api-docs/pathway/#pathway.TableLike.promise_universe_is_equal_to "promise_universe_is_equal_to(other)")
    *   [promise\_universe\_is\_subset\_of](https://pathway.com/developers/api-docs/pathway/#pathway.TableLike.promise_universe_is_subset_of "promise_universe_is_subset_of(other)")
    *   [promise\_universes\_are\_disjoint](https://pathway.com/developers/api-docs/pathway/#pathway.TableLike.promise_universes_are_disjoint "promise_universes_are_disjoint(other)")
*   [pw.TableSlice](https://pathway.com/developers/api-docs/pathway/#pathway.TableSlice "class  pw.TableSlice(mapping, table)")
*   [pw.UDF](https://pathway.com/developers/api-docs/pathway/#pathway.UDF "class  pw.UDF(*, return_type=..., deterministic=False, propagate_none=False, executor=AutoExecutor(), cache_strategy=None)")
*   [pw.UDFAsync](https://pathway.com/developers/api-docs/pathway/#pathway.UDFAsync "class  pw.UDFAsync(*, capacity=None, retry_strategy=None, cache_strategy=None)")
*   [pw.UDFSync](https://pathway.com/developers/api-docs/pathway/#pathway.UDFSync "class  pw.UDFSync(*, return_type=..., deterministic=False, propagate_none=False, executor=AutoExecutor(), cache_strategy=None)")
*   [pw.iterate\_universe](https://pathway.com/developers/api-docs/pathway/#pathway.iterate_universe "class  pw.iterate_universe(table)")
*   [pw.left](https://pathway.com/developers/api-docs/pathway/#pathway.left "class  pw.left")
*   [pw.right](https://pathway.com/developers/api-docs/pathway/#pathway.right "class  pw.right")
*   [pw.this](https://pathway.com/developers/api-docs/pathway/#pathway.this "class  pw.this")
*   [pw.apply](https://pathway.com/developers/api-docs/pathway/#pathway.apply "
    pw.apply(fun, *args, **kwargs)")
*   [pw.apply\_async](https://pathway.com/developers/api-docs/pathway/#pathway.apply_async "
    pw.apply_async(fun, *args, **kwargs)")
*   [pw.apply\_with\_type](https://pathway.com/developers/api-docs/pathway/#pathway.apply_with_type "
    pw.apply_with_type(fun, ret_type, *args, **kwargs)")
*   [pw.assert\_table\_has\_schema](https://pathway.com/developers/api-docs/pathway/#pathway.assert_table_has_schema "
    pw.assert_table_has_schema(table, schema, *, allow_superset=True, ignore_primary_keys=True, allow_subtype=True)")
*   [pw.cast](https://pathway.com/developers/api-docs/pathway/#pathway.cast "
    pw.cast(target_type, col)")
*   [pw.coalesce](https://pathway.com/developers/api-docs/pathway/#pathway.coalesce "
    pw.coalesce(*args)")
*   [pw.column\_definition](https://pathway.com/developers/api-docs/pathway/#pathway.column_definition "
    pw.column_definition(*, primary_key=False, default_value=_no_default_value_marker, dtype=None, name=None, append_only=None, description=None, example=None)")
*   [pw.declare\_type](https://pathway.com/developers/api-docs/pathway/#pathway.declare_type "
    pw.declare_type(target_type, col)")
*   [pw.fill\_error](https://pathway.com/developers/api-docs/pathway/#pathway.fill_error "
    pw.fill_error(col, replacement)")
*   [pw.groupby](https://pathway.com/developers/api-docs/pathway/#pathway.groupby "
    pw.groupby(grouped, *args, id=None, **kwargs)")
*   [pw.if\_else](https://pathway.com/developers/api-docs/pathway/#pathway.if_else "
    pw.if_else(if_clause, then_clause, else_clause)")
*   [pw.iterate](https://pathway.com/developers/api-docs/pathway/#pathway.iterate "
    pw.iterate(func, iteration_limit=None, **kwargs)")
*   [pw.join](https://pathway.com/developers/api-docs/pathway/#pathway.join "
    pw.join(left, right, *on, id=None, how=JoinMode.INNER, left_instance=None, right_instance=None)")
*   [pw.join\_inner](https://pathway.com/developers/api-docs/pathway/#pathway.join_inner "
    pw.join_inner(left, right, *on, id=None, left_instance=None, right_instance=None)")
*   [pw.join\_left](https://pathway.com/developers/api-docs/pathway/#pathway.join_left "
    pw.join_left(left, right, *on, id=None, left_instance=None, right_instance=None)")
*   [pw.join\_outer](https://pathway.com/developers/api-docs/pathway/#pathway.join_outer "
    pw.join_outer(left, right, *on, id=None, left_instance=None, right_instance=None)")
*   [pw.join\_right](https://pathway.com/developers/api-docs/pathway/#pathway.join_right "
    pw.join_right(left, right, *on, id=None, left_instance=None, right_instance=None)")
*   [pw.make\_tuple](https://pathway.com/developers/api-docs/pathway/#pathway.make_tuple "
    pw.make_tuple(*args)")
*   [pw.pandas\_transformer](https://pathway.com/developers/api-docs/pathway/#pathway.pandas_transformer "
    pw.pandas_transformer(output_schema, output_universe=None)")
*   [pw.require](https://pathway.com/developers/api-docs/pathway/#pathway.require "
    pw.require(val, *deps)")
*   [pw.run](https://pathway.com/developers/api-docs/pathway/#pathway.run "
    pw.run(*, debug=False, monitoring_level=MonitoringLevel.AUTO, with_http_server=False, default_logging=True, persistence_config=None, runtime_typechecking=None, license_key=None, terminate_on_error=None)")
*   [pw.run\_all](https://pathway.com/developers/api-docs/pathway/#pathway.run_all "
    pw.run_all(*, debug=False, monitoring_level=MonitoringLevel.AUTO, with_http_server=False, default_logging=True, persistence_config=None, runtime_typechecking=None, license_key=None, terminate_on_error=None)")
*   [pw.schema\_builder](https://pathway.com/developers/api-docs/pathway/#pathway.schema_builder "
    pw.schema_builder(columns, *, name=None, properties=SchemaProperties(), id_type=Pointer)")
*   [pw.schema\_from\_csv](https://pathway.com/developers/api-docs/pathway/#pathway.schema_from_csv "
    pw.schema_from_csv(path, *, name=None, properties=SchemaProperties(), delimiter=',', quote='\"', comment_character=None, escape=None, double_quote_escapes=True, num_parsed_rows=None)")
*   [pw.schema\_from\_dict](https://pathway.com/developers/api-docs/pathway/#pathway.schema_from_dict "
    pw.schema_from_dict(columns, *, name=None, properties=SchemaProperties())")
*   [pw.schema\_from\_types](https://pathway.com/developers/api-docs/pathway/#pathway.schema_from_types "
    pw.schema_from_types(**kwargs)")
*   [pw.set\_license\_key](https://pathway.com/developers/api-docs/pathway/#pathway.set_license_key "
    pw.set_license_key(key)")
*   [pw.set\_monitoring\_config](https://pathway.com/developers/api-docs/pathway/#pathway.set_monitoring_config "
    pw.set_monitoring_config(*, server_endpoint)")
*   [pw.sql](https://pathway.com/developers/api-docs/pathway/#pathway.sql "
    pw.sql(query, **kwargs)")
*   [pw.table\_transformer](https://pathway.com/developers/api-docs/pathway/#pathway.table_transformer "
    pw.table_transformer(func=None, *, allow_superset=True, ignore_primary_keys=True, allow_subtype=True, locals=None)")
*   [pw.udf](https://pathway.com/developers/api-docs/pathway/#pathway.udf "
    pw.udf(fun, /, *, return_type=Ellipsis, deterministic=False, propagate_none=False, executor=AutoExecutor(), cache_strategy=None)")
*   [pw.udf\_async](https://pathway.com/developers/api-docs/pathway/#pathway.udf_async "
    pw.udf_async(fun=None, *, capacity=None, retry_strategy=None, cache_strategy=None)")
*   [pw.unwrap](https://pathway.com/developers/api-docs/pathway/#pathway.unwrap "
    pw.unwrap(col)")
*   [pw.wrap\_py\_object](https://pathway.com/developers/api-docs/pathway/#pathway.wrap_py_object "
    pw.wrap_py_object(object, *, serializer=None)")
*   [pw.MonitoringLevel](https://pathway.com/developers/api-docs/pathway/#pathway.MonitoringLevel "class  pw.MonitoringLevel")
    *   [AUTO = 0](https://pathway.com/developers/api-docs/pathway/#pathway.MonitoringLevel.AUTO "AUTO = 0 ")
    *   [AUTO\_ALL = 1](https://pathway.com/developers/api-docs/pathway/#pathway.MonitoringLevel.AUTO_ALL "AUTO_ALL = 1 ")
    *   [NONE = 2](https://pathway.com/developers/api-docs/pathway/#pathway.MonitoringLevel.NONE "NONE = 2 ")
    *   [IN\_OUT = 3](https://pathway.com/developers/api-docs/pathway/#pathway.MonitoringLevel.IN_OUT "IN_OUT = 3 ")
    *   [ALL = 4](https://pathway.com/developers/api-docs/pathway/#pathway.MonitoringLevel.ALL "ALL = 4 ")
*   [pw.DateTimeNamespace](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace "class  pw.DateTimeNamespace(expression)")
    *   [add\_duration\_in\_timezone](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.add_duration_in_timezone "add_duration_in_timezone(duration, timezone)")
    *   [day](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.day "day()")
    *   [days](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.days "days()")
    *   [floor](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.floor "floor(duration)")
    *   [from\_timestamp](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.from_timestamp "from_timestamp(unit)")
    *   [hour](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.hour "hour()")
    *   [hours](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.hours "hours()")
    *   [microsecond](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.microsecond "microsecond()")
    *   [microseconds](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.microseconds "microseconds()")
    *   [millisecond](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.millisecond "millisecond()")
    *   [milliseconds](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.milliseconds "milliseconds()")
    *   [minute](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.minute "minute()")
    *   [minutes](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.minutes "minutes()")
    *   [month](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.month "month()")
    *   [nanosecond](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.nanosecond "nanosecond()")
    *   [nanoseconds](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.nanoseconds "nanoseconds()")
    *   [round](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.round "round(duration)")
    *   [second](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.second "second()")
    *   [seconds](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.seconds "seconds()")
    *   [strftime](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.strftime "strftime(fmt)")
    *   [strptime](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.strptime "strptime(fmt, contains_timezone=None)")
    *   [subtract\_date\_time\_in\_timezone](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.subtract_date_time_in_timezone "subtract_date_time_in_timezone(date_time, timezone)")
    *   [subtract\_duration\_in\_timezone](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.subtract_duration_in_timezone "subtract_duration_in_timezone(duration, timezone)")
    *   [timestamp](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.timestamp "timestamp(unit=None)")
    *   [to\_naive\_in\_timezone](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.to_naive_in_timezone "to_naive_in_timezone(timezone)")
    *   [to\_utc](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.to_utc "to_utc(from_timezone)")
    *   [utc\_from\_timestamp](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.utc_from_timestamp "utc_from_timestamp(unit)")
    *   [weekday](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.weekday "weekday()")
    *   [weeks](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.weeks "weeks()")
    *   [year](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.year "year()")
*   [pw.NumericalNamespace](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.NumericalNamespace "class  pw.NumericalNamespace(expression)")
    *   [abs](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.NumericalNamespace.abs "abs()")
    *   [fill\_na](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.NumericalNamespace.fill_na "fill_na(default_value)")
    *   [round](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.NumericalNamespace.round "round(decimals=0)")
*   [pw.StringNamespace](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace "class  pw.StringNamespace(expression)")
    *   [count](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.count "count(sub, start=None, end=None)")
    *   [endswith](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.endswith "endswith(suffix)")
    *   [find](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.find "find(sub, start=None, end=None)")
    *   [len](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.len "len()")
    *   [lower](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.lower "lower()")
    *   [parse\_bool](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.parse_bool "parse_bool(true_values=default_true_values, false_values=default_false_values, optional=False)")
    *   [parse\_float](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.parse_float "parse_float(optional=False)")
    *   [parse\_int](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.parse_int "parse_int(optional=False)")
    *   [removeprefix](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.removeprefix "removeprefix(prefix, /)")
    *   [removesuffix](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.removesuffix "removesuffix(suffix, /)")
    *   [replace](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.replace "replace(old_value, new_value, count=-1, /)")
    *   [reversed](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.reversed "reversed()")
    *   [rfind](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.rfind "rfind(sub, start=None, end=None)")
    *   [slice](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.slice "slice(start, end, /)")
    *   [startswith](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.startswith "startswith(prefix)")
    *   [strip](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.strip "strip(chars=None)")
    *   [swapcase](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.swapcase "swapcase()")
    *   [title](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.title "title()")
    *   [upper](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.upper "upper()")

[Pathway API](https://pathway.com/developers/api-docs/pathway/#pathway-api)
===========================================================================

Reference for all the Pathway classes and functions.

See [Table API](https://pathway.com/developers/api-docs/pathway-table) for the main **Table** class.

[class pw.**AsyncTransformer**(input\_table, \*, instance=pw.this.id, autocommit\_duration\_ms=1500)](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/utils/async_transformer.py#L282-L527)

Allows to perform async transformations on a table.

[`invoke()`](https://pathway.com/developers/api-docs/pathway#pathway.AsyncTransformer.invoke) will be called asynchronously for each row of an input\_table.

Output table can be acccesed via [`result`](https://pathway.com/developers/api-docs/pathway#pathway.AsyncTransformer.result).

Example:

```
import pathway as pw
import asyncio
class OutputSchema(pw.Schema):
   ret: int
class AsyncIncrementTransformer(pw.AsyncTransformer, output_schema=OutputSchema):
    async def invoke(self, value) -> Dict[str, Any]:
        await asyncio.sleep(0.1)
        return {"ret": value + 1 }
input = pw.debug.table_from_markdown('''
  | value
1 | 42
2 | 44
''')
result = AsyncIncrementTransformer(input_table=input).result
pw.debug.compute_and_print(result, include_id=False)
```

Show Code Results

```
ret
43
45
```

### [**close**()](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.close)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/utils/async_transformer.py#L379-L383)Called once at the end. Proper place for cleanup.

### [abstract async **invoke**(\*args, \*\*kwargs)](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.invoke)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/utils/async_transformer.py#L385-L393)Called for every row of input\_table. The arguments will correspond to the columns in the input table.

Should return dict of values matching `output_schema`.

### [**open**()](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.open)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/utils/async_transformer.py#L373-L377)Called before actual work. Suitable for one time setup.

### [**with\_options**(capacity=None, timeout=None, retry\_strategy=None, cache\_strategy=None)](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.with_options)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/utils/async_transformer.py#L395-L419)Sets async options.

*   **Parameters**
    *   **capacity** (`int` | `None`) – Maximum number of concurrent operations. Defaults to None, indicating no specific limit.
    *   **timeout** (`float` | `None`) – Maximum time (in seconds) to wait for the function result. Defaults to None, indicating no time limit.
    *   **retry\_strategy** ([`AsyncRetryStrategy`](https://pathway.com/developers/api-docs/udfs#pathway.udfs.AsyncRetryStrategy) | `None`) – Strategy for handling retries in case of failures. Defaults to None, meaning no retries.
    *   **cache\_strategy** ([`CacheStrategy`](https://pathway.com/developers/api-docs/udfs#pathway.udfs.CacheStrategy) | `None`) – Defines the caching mechanism. If set to None and a persistency is enabled, operations will be cached using the persistence layer. Defaults to None.
*   **Returns**  
    self

### [property **failed**:](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.failed) [Table](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)

The resulting table containing only rows that failed during execution. If the `instance` argument is specified, it also contains rows that were executed successfully but at least one element from their instance with less or equal time failed.

### [property **finished**:](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.finished) [Table](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)

The resulting table containing all rows that finished their execution. The column `_async_status` contains the state of the row. The rows that finished successfully, have their status set to “-SUCCESS-”. The rows that failed, have their status set to “-FAILURE-“. If the `instance` argument is specified, rows that were executed successfully but at least one element from their instance with less or equal time failed, have their status set as “-FAILURE-“.

If you want to get only rows that executed successfully, use `successful` property instead.

### [property **output\_table**:](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.output_table) [Table](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)

The resulting table containing all rows that started their execution. The column `_async_status` contains the state of the row. The rows that finished successfully, have their status set to “-SUCCESS-”. The rows that failed, have their status set to “-FAILURE-”. The rows that are still being executed, have their state set to “-PENDING-“.

It is recommended to use this property for debugging/presentational purposes only. For other purposes, `successful` property should be preferred. It returns a Table containing only rows that were executed successfully.

### [property **result**:](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.result) [Table](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)

The resulting table containing only rows that were executed successfully.

Deprecated. Use `successful` instead.

### [property **successful**:](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.successful) [Table](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)

The resulting table containing only rows that were executed successfully.

[class pw.**BaseCustomAccumulator**](https://pathway.com/developers/api-docs/pathway/#pathway.BaseCustomAccumulator)
--------------------------------------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/custom_reducers.py#L174-L268)

Utility class for defining custom accumulators, used for stateful reducers. Custom accumulators should inherit from this class, and should implement `from_row`, `update` and `compute_result`. Optionally `neutral` and `retract` can be provided for more efficient processing on streams with changing data. Additionally, `serialize` and `deserialize` can be customized. By default they use `pickle` module, but if the accumulator state is serializable to pathway value type in an easier way, this can be overwritten.

```
import pathway as pw
class CustomAvgAccumulator(pw.BaseCustomAccumulator):
  def __init__(self, sum, cnt):
    self.sum = sum
    self.cnt = cnt
  @classmethod
  def from_row(self, row):
    [val] = row
    return CustomAvgAccumulator(val, 1)
  def update(self, other):
    self.sum += other.sum
    self.cnt += other.cnt
  def compute_result(self) -> float:
    return self.sum / self.cnt
custom_avg = pw.reducers.udf_reducer(CustomAvgAccumulator)
t1 = pw.debug.table_from_markdown('''
age | owner | pet | price
10  | Alice | dog | 100
9   | Bob   | cat | 80
8   | Alice | cat | 90
7   | Bob   | dog | 70
''')
t2 = t1.groupby(t1.owner).reduce(t1.owner, avg_price=custom_avg(t1.price))
pw.debug.compute_and_print(t2, include_id=False)
```

Show Code Results

```
owner | avg_price
Alice | 95.0
Bob   | 75.0
```

### [abstract **compute\_result**()](https://pathway.com/developers/api-docs/pathway/#pathway.BaseCustomAccumulator.compute_result)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/custom_reducers.py#L251-L258)Mandatory function to finalize computation. Used to extract answer from final state of accumulator.

Narrowing the type of this function helps better type the output of the reducer.

### [classmethod **deserialize**(val)](https://pathway.com/developers/api-docs/pathway/#pathway.BaseCustomAccumulator.deserialize)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/custom_reducers.py#L264-L268)Deserialize state from pathway value type.

### [abstract classmethod **from\_row**(row)](https://pathway.com/developers/api-docs/pathway/#pathway.BaseCustomAccumulator.from_row)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/custom_reducers.py#L225-L232)Construct the accumulator from a row of data. Row will be passed as a list of values.

This is a mandatory function.

### [classmethod **neutral**()](https://pathway.com/developers/api-docs/pathway/#pathway.BaseCustomAccumulator.neutral)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/custom_reducers.py#L216-L223)Neutral element of the accumulator (aggregation of an empty list).

This function is optional, and allows for more efficient processing on streams with changing data.

### [**retract**(other)](https://pathway.com/developers/api-docs/pathway/#pathway.BaseCustomAccumulator.retract)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/custom_reducers.py#L242-L249)Update the accumulator by removing the value of another one.

This function is optional, and allows more efficient reductions on streams with changing data.

### [**serialize**()](https://pathway.com/developers/api-docs/pathway/#pathway.BaseCustomAccumulator.serialize)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/custom_reducers.py#L260-L262)Serialize state to pathway value type.

### [abstract **update**(other)](https://pathway.com/developers/api-docs/pathway/#pathway.BaseCustomAccumulator.update)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/custom_reducers.py#L234-L240)Update the accumulator with another one. Method does not need to return anything, the change should be in-place.

This is a mandatory function.

[class pw.**ColumnExpression**](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression)
----------------------------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expression.py#L88-L529)

### [**as\_bool**()](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression.as_bool)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expression.py#L511-L529)Converts value to a bool or None if not possible. Currently works for Json columns only.

Example:

```
import pathway as pw
import pandas as pd
class InputSchema(pw.Schema):
    data: dict
dt = pd.DataFrame(data={"data": [{"value": True}, {"value": False}]})
table = pw.debug.table_from_pandas(dt, schema=InputSchema)
result = table.select(result=pw.this.data.get("value").as_bool())
pw.debug.compute_and_print(result, include_id=False)
```

Show Code Results

```
result
False
True
```

### [**as\_float**()](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression.as_float)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expression.py#L471-L489)Converts value to a float or None if not possible. Currently works for Json columns only.

Example:

```
import pathway as pw
import pandas as pd
class InputSchema(pw.Schema):
    data: dict
dt = pd.DataFrame(data={"data": [{"value": 1.5}, {"value": 3.14}]})
table = pw.debug.table_from_pandas(dt, schema=InputSchema)
result = table.select(result=pw.this.data.get("value").as_float())
pw.debug.compute_and_print(result, include_id=False)
```

Show Code Results

```
result
1.5
3.14
```

### [**as\_int**()](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression.as_int)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expression.py#L451-L469)Converts value to an int or None if not possible. Currently works for Json columns only.

Example:

```
import pathway as pw
import pandas as pd
class InputSchema(pw.Schema):
    data: dict
dt = pd.DataFrame(data={"data": [{"value": 1}, {"value": 2}]})
table = pw.debug.table_from_pandas(dt, schema=InputSchema)
result = table.select(result=pw.this.data.get("value").as_int())
pw.debug.compute_and_print(result, include_id=False)
```

Show Code Results

```
result
1
2
```

### [**as\_str**()](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression.as_str)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expression.py#L491-L509)Converts value to a string or None if not possible. Currently works for Json columns only.

Example:

```
import pathway as pw
import pandas as pd
class InputSchema(pw.Schema):
    data: dict
dt = pd.DataFrame(data={"data": [{"value": "dog"}, {"value": "cat"}]})
table = pw.debug.table_from_pandas(dt, schema=InputSchema)
result = table.select(result=pw.this.data.get("value").as_str())
pw.debug.compute_and_print(result, include_id=False)
```

Show Code Results

```
result
cat
dog
```

### [**get**(index, default=None)](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression.get)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expression.py#L350-L389)Extracts element at index from an object. The object has to be a Tuple or Json. If no element is present at index, it returns value specified by a default parameter.

Index can be effectively int for Tuple and int or str for Json. For Tuples, using negative index can be used to access elements at the end, moving backwards.

*   **Parameters**
    *   **index** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression) | `int` | `str`) – Position to extract element at.
    *   **default** (`Union`\[[`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression), `None`, `int`, `float`, `str`, `bytes`, `bool`, `Pointer`, `datetime`, `timedelta`, `ndarray`, [`Json`](https://pathway.com/developers/api-docs/pathway#pathway.Json), `dict`\[`str`, `Any`\], `tuple`\[`Any`, `...`\], `Error`\]) – Value returned when no element is at position index. Defaults to None.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
  | a | b | c
1 | 3 | 2 | 2
2 | 4 | 1 | 0
3 | 7 | 3 | 1
'''
)
t2 = t1.with_columns(tup=pw.make_tuple(pw.this.a, pw.this.b))
t3 = t2.select(
    x=pw.this.tup.get(1),
    y=pw.this.tup.get(3),
    z=pw.this.tup.get(pw.this.c),
    t=pw.this.tup.get(pw.this.c, default=100),
)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
x | y | z | t
1 |   | 4 | 4
2 |   |   | 100
3 |   | 3 | 3
```

### [**is\_none**()](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression.is_none)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expression.py#L270-L289)Returns true if the value is None.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
  | owner | pet
1 | Alice | dog
2 | Bob   |
3 | Carol | cat
''')
t2 = t1.with_columns(has_no_pet=pw.this.pet.is_none())
pw.debug.compute_and_print(t2, include_id=False)
```

Show Code Results

```
owner | pet | has_no_pet
Alice | dog | False
Bob   |     | True
Carol | cat | False
```

### [**is\_not\_none**()](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression.is_not_none)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expression.py#L291-L310)Returns true if the value is not None.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
  | owner | pet
1 | Alice | dog
2 | Bob   |
3 | Carol | cat
''')
t2 = t1.with_columns(has_pet=pw.this.pet.is_not_none())
pw.debug.compute_and_print(t2, include_id=False)
```

Show Code Results

```
owner | pet | has_pet
Alice | dog | True
Bob   |     | False
Carol | cat | True
```

### [**to\_string**()](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression.to_string)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expression.py#L409-L449)Changes the values to strings.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
val
1
2
3
4''')
t1.schema
```

Show Code Results

```
<pathway.Schema types={'val': <class 'int'>}, id_type=<class 'pathway.engine.Pointer'>>
```

```
pw.debug.compute_and_print(t1, include_id=False)
```

Show Code Results

```
val
1
2
3
4
```

```
t2 = t1.select(val = pw.this.val.to_string())
t2.schema
```

Show Code Results

```
<pathway.Schema types={'val': <class 'str'>}, id_type=<class 'pathway.engine.Pointer'>>
```

```
pw.debug.compute_and_print(t2.select(val=pw.this.val + "a"), include_id=False)
```

Show Code Results

```
val
1a
2a
3a
4a
```

[class pw.**ColumnReference**()](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnReference)
----------------------------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expression.py#L566-L661)

Reference to the column.

Inherits from ColumnExpression.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
   age  owner  pet
1   10  Alice  dog
2    9    Bob  dog
3    8  Alice  cat
4    7    Bob  dog''')
isinstance(t1.age, pw.ColumnReference)
```

Show Code Results

```
True
```

```
isinstance(t1["owner"], pw.ColumnReference)
```

Show Code Results

```
True
```

### [property **name**](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnReference.name)

Name of the referred column.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
   age  owner  pet
1   10  Alice  dog
2    9    Bob  dog
3    8  Alice  cat
4    7    Bob  dog''')
t1.age.name
```

Show Code Results

```
'age'
```

### [property **table**](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnReference.table)

Table where the referred column belongs to.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
   age  owner  pet
1   10  Alice  dog
2    9    Bob  dog
3    8  Alice  cat
4    7    Bob  dog''')
t1.age.table is t1
```

Show Code Results

```
True
```

[class pw.**DateTimeNaive**(ts\_input=<object object>, year=None, month=None, day=None, hour=None, minute=None, second=None, microsecond=None, tzinfo=None, \*, nanosecond=None, tz=None, unit=None, fold=None)](https://pathway.com/developers/api-docs/pathway/#pathway.DateTimeNaive)
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/datetime_types.py#L6-L9)

Type for storing datetime without timezone information. Extends pandas.Timestamp type.

[class pw.**DateTimeUtc**(ts\_input=<object object>, year=None, month=None, day=None, hour=None, minute=None, second=None, microsecond=None, tzinfo=None, \*, nanosecond=None, tz=None, unit=None, fold=None)](https://pathway.com/developers/api-docs/pathway/#pathway.DateTimeUtc)
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/datetime_types.py#L12-L15)

Type for storing datetime with default timezone. Extends pandas.Timestamp type.

[class pw.**Duration**(value=<object object>, unit=None, \*\*kwargs)](https://pathway.com/developers/api-docs/pathway/#pathway.Duration)
----------------------------------------------------------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/datetime_types.py#L18-L21)

Type for storing duration of time. Extends pandas.Timedelta type.

[class pw.**GroupedJoinResult**()](https://pathway.com/developers/api-docs/pathway/#pathway.GroupedJoinResult)
--------------------------------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/groupbys.py#L272-L345)

### [**reduce**(\*args, \*\*kwargs)](https://pathway.com/developers/api-docs/pathway/#pathway.GroupedJoinResult.reduce)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/groupbys.py#L298-L336)Reduces grouped join result to table.

*   **Returns**  
    _Table_ – Created table.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
   cost  owner  pet
1   100  Alice    1
2    90    Bob    1
3    80  Alice    2
''')
t2 = pw.debug.table_from_markdown('''
    cost  owner  pet size
11   100  Alice    3    M
12    90    Bob    1    L
13    80    Tom    1   XL
''')
result = (t1.join(t2, t1.owner==t2.owner).groupby(pw.this.owner)
    .reduce(pw.this.owner, pairs = pw.reducers.count()))
pw.debug.compute_and_print(result, include_id=False)
```

Show Code Results

```
owner | pairs
Alice | 2
Bob   | 1
```

[class pw.**GroupedTable**()](https://pathway.com/developers/api-docs/pathway/#pathway.GroupedTable)
----------------------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/groupbys.py#L71-L269)

Result of a groupby operation on a Table.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
age | owner | pet
10  | Alice | dog
9   | Bob   | dog
8   | Alice | cat
7   | Bob   | dog
''')
t2 = t1.groupby(t1.pet, t1.owner)
isinstance(t2, pw.GroupedTable)
```

Show Code Results

```
True
```

### [**reduce**(\*args, \*\*kwargs)](https://pathway.com/developers/api-docs/pathway/#pathway.GroupedTable.reduce)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/groupbys.py#L155-L208)Reduces grouped table to a table.

*   **Parameters**
    *   **args** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference)) – Column references.
    *   **kwargs** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – Column expressions with their new assigned names.
*   **Returns**  
    _Table_ – Created table.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
age | owner | pet
10  | Alice | dog
9   | Bob   | dog
8   | Alice | cat
7   | Bob   | dog
''')
t2 = t1.groupby(t1.pet, t1.owner).reduce(t1.owner, t1.pet, ageagg=pw.reducers.sum(t1.age))
pw.debug.compute_and_print(t2, include_id=False)
```

Show Code Results

```
owner | pet | ageagg
Alice | cat | 8
Alice | dog | 10
Bob   | dog | 16
```

[class pw.**JoinMode**(value, names=None, \*, module=None, qualname=None, type=None, start=1, boundary=None)](https://pathway.com/developers/api-docs/pathway/#pathway.JoinMode)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/join_mode.py#L9-L51)

Enum used for controlling type of a join when passed to a generic join function. Consists of values: JoinMode.INNER, JoinMode.LEFT, JoinMode.RIGHT, JoinMode.OUTER

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
age  | owner  | pet
 10  | Alice  | 1
  9  | Bob    | 1
  8  | Alice  | 2
''')
t2 = pw.debug.table_from_markdown('''
age  | owner  | pet | size
 10  | Alice  | 3   | M
 9   | Bob    | 1   | L
 8   | Tom    | 1   | XL
''')
inner_join = t1.join(
    t2, t1.pet == t2.pet, t1.owner == t2.owner, how=pw.JoinMode.INNER
).select(age=t1.age, owner_name=t2.owner, size=t2.size)
pw.debug.compute_and_print(inner_join, include_id = False)
```

Show Code Results

```
age | owner_name | size
9   | Bob        | L
```

```
outer_join = t1.join(
    t2, t1.pet == t2.pet, t1.owner == t2.owner, how=pw.JoinMode.OUTER
).select(age=t1.age, owner_name=t2.owner, size=t2.size)
pw.debug.compute_and_print(outer_join, include_id = False)
```

Show Code Results

```
age | owner_name | size
    | Alice      | M
    | Tom        | XL
8   |            |
9   | Bob        | L
10  |            |
```

### [**INNER** = 0](https://pathway.com/developers/api-docs/pathway/#pathway.JoinMode.INNER)

Use inner join.

### [**LEFT** = 1](https://pathway.com/developers/api-docs/pathway/#pathway.JoinMode.LEFT)

Use left join.

### [**OUTER** = 3](https://pathway.com/developers/api-docs/pathway/#pathway.JoinMode.OUTER)

Use outer join.

### [**RIGHT** = 2](https://pathway.com/developers/api-docs/pathway/#pathway.JoinMode.RIGHT)

Use right join.

[class pw.**JoinResult**()](https://pathway.com/developers/api-docs/pathway/#pathway.JoinResult)
------------------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/joins.py#L493-L1055)

Result of a join between tables.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
   age  owner  pet
1   10  Alice    1
2    9    Bob    1
3    8  Alice    2
''')
t2 = pw.debug.table_from_markdown('''
    age  owner  pet size
11   10  Alice    3    M
12    9    Bob    1    L
13    8    Tom    1   XL
''')
joinresult= t1.join(t2, t1.pet == t2.pet, t1.owner == t2.owner)   # noqa: E501
isinstance(joinresult, pw.JoinResult)
```

Show Code Results

```
True
```

```
pw.debug.compute_and_print(joinresult.select(t1.age, t2.size), include_id=False)
```

Show Code Results

```
age | size
9   | L
```

### [**filter**(filter\_expression)](https://pathway.com/developers/api-docs/pathway/#pathway.JoinResult.filter)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/joins.py#L691-L744)Filters rows, keeping the ones satisfying the predicate.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
   age  owner  pet
1   10  Alice    1
2    9    Bob    1
3    8  Alice    2
''')
t2 = pw.debug.table_from_markdown('''
    age  owner  pet size
11   10  Alice    3    M
12    9    Bob    1    L
13    8    Tom    1   XL
''')
result = t1.join(t2).filter(t1.owner == t2.owner).select(t1.age, t2.size)   # noqa: E501
pw.debug.compute_and_print(result, include_id=False)
```

Show Code Results

```
age | size
8   | M
9   | L
10  | M
```

### [**groupby**(\*args, id=None)](https://pathway.com/developers/api-docs/pathway/#pathway.JoinResult.groupby)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/joins.py#L746-L803)Groups join result by columns from args.

**NOTE**: Usually followed by .reduce() that aggregates the result and returns a table.

*   **Parameters**
    *   **args** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference)) – columns to group by.
    *   **id** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference) | `None`) – if provided, is the column used to set id’s of the rows of the result
*   **Returns**  
    _GroupedJoinResult_ – Groupby object.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
   cost  owner  pet
1   100  Alice    1
2    90    Bob    1
3    80  Alice    2
''')
t2 = pw.debug.table_from_markdown('''
    cost  owner  pet size
11   100  Alice    3    M
12    90    Bob    1    L
13    80    Tom    1   XL
''')
result = (t1.join(t2, t1.owner==t2.owner).groupby(pw.this.owner)
    .reduce(pw.this.owner, pairs = pw.reducers.count()))
pw.debug.compute_and_print(result, include_id=False)
```

Show Code Results

```
owner | pairs
Alice | 2
Bob   | 1
```

### [**reduce**(\*args, \*\*kwargs)](https://pathway.com/developers/api-docs/pathway/#pathway.JoinResult.reduce)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/joins.py#L805-L852)Reduce a join result to a single row.

Equivalent to self.groupby().reduce(\*args, \*\*kwargs).

*   **Parameters**
    *   **args** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference)) – reducer to reduce the table with
    *   **kwargs** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – reducer to reduce the table with. Its key is the new name of a column.
*   **Returns**  
    _Table_ – Reduced table.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
   cost  owner  pet
1   100  Alice    1
2    90    Bob    1
3    80  Alice    2
''')
t2 = pw.debug.table_from_markdown('''
    cost  owner  pet size
11   100  Alice    3    M
12    90    Bob    1    L
13    80    Tom    1   XL
''')
result = t1.join(t2, t1.owner==t2.owner).reduce(total_pairs = pw.reducers.count())
pw.debug.compute_and_print(result, include_id=False)
```

Show Code Results

```
total_pairs
3
```

### [**select**(\*args, \*\*kwargs)](https://pathway.com/developers/api-docs/pathway/#pathway.JoinResult.select)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/joins.py#L640-L682)Computes result of a join.

*   **Parameters**
    *   **args** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference)) – Column references.
    *   **kwargs** (`Any`) – Column expressions with their new assigned names.
*   **Returns**  
    _Table_ – Created table.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
age  | owner  | pet
 10  | Alice  | 1
  9  | Bob    | 1
  8  | Alice  | 2
''')
t2 = pw.debug.table_from_markdown('''
age  | owner  | pet | size
 10  | Alice  | 3   | M
 9   | Bob    | 1   | L
 8   | Tom    | 1   | XL
''')
t3 = t1.join(t2, t1.pet == t2.pet, t1.owner == t2.owner).select(age=t1.age, owner_name=t2.owner, size=t2.size)   # noqa: E501
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
age | owner_name | size
9   | Bob        | L
```

[class pw.**Joinable**(context)](https://pathway.com/developers/api-docs/pathway/#pathway.Joinable)
---------------------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/joins.py#L46-L490)

### [**join**(other, \*on, id=None, how=JoinMode.INNER, left\_instance=None, right\_instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Joinable.join)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/joins.py#L132-L190)Join self with other using the given join expression.

*   **Parameters**
    *   **other** ([`Joinable`](https://pathway.com/developers/api-docs/pathway#pathway.Joinable)) – the right side of the join, `Table` or `JoinResult`.
    *   **on** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – a list of column expressions. Each must have == as the top level operation and be of the form LHS: ColumnReference == RHS: ColumnReference.
    *   **id** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference) | `None`) – optional argument for id of result, can be only self.id or other.id
    *   **how** ([`JoinMode`](https://pathway.com/developers/api-docs/pathway#pathway.JoinMode)) – by default, inner join is performed. Possible values are JoinMode.{INNER,LEFT,RIGHT,OUTER} correspond to inner, left, right and outer join respectively.
    *   **left\_instance/right\_instance** – optional arguments describing partitioning of the data into separate instances
*   **Returns**  
    _JoinResult_ – an object on which .select() may be called to extract relevant columns from the result of the join.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
age  | owner  | pet
 10  | Alice  | 1
  9  | Bob    | 1
  8  | Alice  | 2
''')
t2 = pw.debug.table_from_markdown('''
age  | owner  | pet | size
 10  | Alice  | 3   | M
 9   | Bob    | 1   | L
 8   | Tom    | 1   | XL
''')
t3 = t1.join(
    t2, t1.pet == t2.pet, t1.owner == t2.owner, how=pw.JoinMode.INNER
).select(age=t1.age, owner_name=t2.owner, size=t2.size)
pw.debug.compute_and_print(t3, include_id = False)
```

Show Code Results

```
age | owner_name | size
9   | Bob        | L
```

### [**join\_inner**(other, \*on, id=None, left\_instance=None, right\_instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Joinable.join_inner)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/joins.py#L192-L247)Inner-joins two tables or join results.

*   **Parameters**
    *   **other** ([`Joinable`](https://pathway.com/developers/api-docs/pathway#pathway.Joinable)) – the right side of the join, `Table` or `JoinResult`.
    *   **on** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – a list of column expressions. Each must have == as the top level operation and be of the form LHS: ColumnReference == RHS: ColumnReference.
    *   **id** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference) | `None`) – optional argument for id of result, can be only self.id or other.id
    *   **left\_instance/right\_instance** – optional arguments describing partitioning of the data into separate instances
*   **Returns**  
    _JoinResult_ – an object on which .select() may be called to extract relevant columns from the result of the join.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
age  | owner  | pet
 10  | Alice  | 1
  9  | Bob    | 1
  8  | Alice  | 2
''')
t2 = pw.debug.table_from_markdown('''
age  | owner  | pet | size
 10  | Alice  | 3   | M
 9   | Bob    | 1   | L
 8   | Tom    | 1   | XL
''')
t3 = t1.join_inner(t2, t1.pet == t2.pet, t1.owner == t2.owner).select(
    age=t1.age, owner_name=t2.owner, size=t2.size
)
pw.debug.compute_and_print(t3, include_id = False)
```

Show Code Results

```
age | owner_name | size
9   | Bob        | L
```

### [**join\_left**(other, \*on, id=None, left\_instance=None, right\_instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Joinable.join_left)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/joins.py#L249-L324)Left-joins two tables or join results.

*   **Parameters**
    *   **other** ([`Joinable`](https://pathway.com/developers/api-docs/pathway#pathway.Joinable)) – the right side of the join, `Table` or `JoinResult`.
    *   **\*on** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – Columns to join, syntax self.col1 == other.col2
    *   **id** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference) | `None`) – optional id column of the result
    *   **left\_instance/right\_instance** – optional arguments describing partitioning of the data into separate instances

Remarks: args cannot contain id column from either of tables, as the result table has id column with auto-generated ids; it can be selected by assigning it to a column with defined name (passed in kwargs)

Behavior:

*   for rows from the left side that were not matched with the right side, missing values on the right are replaced with None
*   rows from the right side that were not matched with the left side are skipped
*   for rows that were matched the behavior is the same as that of an inner join.

*   **Returns**  
    _JoinResult_ – an object on which .select() may be called to extract relevant columns from the result of the join.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
        | a  | b
      1 | 11 | 111
      2 | 12 | 112
      3 | 13 | 113
      4 | 13 | 114
    '''
)
t2 = pw.debug.table_from_markdown(
    '''
        | c  | d
      1 | 11 | 211
      2 | 12 | 212
      3 | 14 | 213
      4 | 14 | 214
    '''
)
pw.debug.compute_and_print(t1.join_left(t2, t1.a == t2.c
).select(t1.a, t2_c=t2.c, s=pw.require(t1.b + t2.d, t2.id)),
include_id=False)
```

Show Code Results

```
a  | t2_c | s
11 | 11   | 322
12 | 12   | 324
13 |      |
13 |      |
```

### [**join\_outer**(other, \*on, id=None, left\_instance=None, right\_instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Joinable.join_outer)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/joins.py#L406-L481)Outer-joins two tables or join results.

*   **Parameters**
    *   **other** ([`Joinable`](https://pathway.com/developers/api-docs/pathway#pathway.Joinable)) – the right side of the join, `Table` or `JoinResult`.
    *   **\*on** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – Columns to join, syntax self.col1 == other.col2
    *   **id** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference) | `None`) – optional id column of the result
    *   **instance** – optional argument describing partitioning of the data into separate instances

Remarks: args cannot contain id column from either of tables, as the result table has id column with auto-generated ids; it can be selected by assigning it to a column with defined name (passed in kwargs)

Behavior:

*   for rows from the left side that were not matched with the right side, missing values on the right are replaced with None
*   for rows from the right side that were not matched with the left side, missing values on the left are replaced with None
*   for rows that were matched the behavior is the same as that of an inner join.

*   **Returns**  
    _JoinResult_ – an object on which .select() may be called to extract relevant columns from the result of the join.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
        | a  | b
      1 | 11 | 111
      2 | 12 | 112
      3 | 13 | 113
      4 | 13 | 114
    '''
)
t2 = pw.debug.table_from_markdown(
    '''
        | c  | d
      1 | 11 | 211
      2 | 12 | 212
      3 | 14 | 213
      4 | 14 | 214
    '''
)
pw.debug.compute_and_print(t1.join_outer(t2, t1.a == t2.c
).select(t1.a, t2_c=t2.c, s=pw.require(t1.b + t2.d, t1.id, t2.id)),
include_id=False)
```

Show Code Results

```
a  | t2_c | s
   | 14   |
   | 14   |
11 | 11   | 322
12 | 12   | 324
13 |      |
13 |      |
```

### [**join\_right**(other, \*on, id=None, left\_instance=None, right\_instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Joinable.join_right)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/joins.py#L326-L404)Outer-joins two tables or join results.

*   **Parameters**
    *   **other** ([`Joinable`](https://pathway.com/developers/api-docs/pathway#pathway.Joinable)) – the right side of the join, `Table` or `JoinResult`.
    *   **\*on** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – Columns to join, syntax self.col1 == other.col2
    *   **id** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference) | `None`) – optional id column of the result
    *   **left\_instance/right\_instance** – optional arguments describing partitioning of the data into separate instances

Remarks: args cannot contain id column from either of tables, as the result table has id column with auto-generated ids; it can be selected by assigning it to a column with defined name (passed in kwargs)

Behavior:

*   rows from the left side that were not matched with the right side are skipped
*   for rows from the right side that were not matched with the left side, missing values on the left are replaced with None
*   for rows that were matched the behavior is the same as that of an inner join.

*   **Returns**  
    _JoinResult_ – an object on which .select() may be called to extract relevant columns from the result of the join.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
        | a  | b
      1 | 11 | 111
      2 | 12 | 112
      3 | 13 | 113
      4 | 13 | 114
    '''
)
t2 = pw.debug.table_from_markdown(
    '''
        | c  | d
      1 | 11 | 211
      2 | 12 | 212
      3 | 14 | 213
      4 | 14 | 214
    '''
)
pw.debug.compute_and_print(t1.join_right(t2, t1.a == t2.c
).select(t1.a, t2_c=t2.c, s=pw.require(pw.coalesce(t1.b,0) + t2.d,t1.id)),
include_id=False)
```

Show Code Results

```
a  | t2_c | s
   | 14   |
   | 14   |
11 | 11   | 322
12 | 12   | 324
```

*   **Returns**  
    OuterJoinResult object

### [property **C**: ColumnNamespace](https://pathway.com/developers/api-docs/pathway/#pathway.Joinable.C)

Returns the namespace of all the columns of a joinable. Allows accessing column names that might otherwise be a reserved methods.

```
import pathway as pw
tab = pw.debug.table_from_markdown('''
age | owner | pet | filter
10  | Alice | dog | True
9   | Bob   | dog | True
8   | Alice | cat | False
7   | Bob   | dog | True
''')
isinstance(tab.C.age, pw.ColumnReference)
```

Show Code Results

```
True
```

```
pw.debug.compute_and_print(tab.filter(tab.C.filter), include_id=False)
```

Show Code Results

```
age | owner | pet | filter
7   | Bob   | dog | True
9   | Bob   | dog | True
10  | Alice | dog | True
```

[class pw.**Json**()](https://pathway.com/developers/api-docs/pathway/#pathway.Json)
------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/json.py#L19-L234)

Represents JSON values.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
a    | b | c
True | 2 | manul
''')
@pw.udf
def to_json(val) -> pw.Json:
    return pw.Json(val)
result = t1.select(**{c: to_json(pw.this[c]) for c in t1.column_names()})
pw.debug.compute_and_print(result, include_id=False)
```

Show Code Results

```
a    | b | c
true | 2 | "manul"
```

### [**as\_bool**()](https://pathway.com/developers/api-docs/pathway/#pathway.Json.as_bool)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/json.py#L162-L183)Returns Json value as a float if possible.

Example:

```
import pathway as pw
class InputSchema(pw.Schema):
    data: pw.Json
@pw.udf
def extract(data: pw.Json) -> bool:
    return data["value"].as_bool()
table = pw.debug.table_from_rows(schema=InputSchema, rows=[({"value": True},)])
result = table.select(result=extract(pw.this.data))
pw.debug.compute_and_print(result, include_id=False)
```

Show Code Results

```
result
True
```

### [**as\_dict**()](https://pathway.com/developers/api-docs/pathway/#pathway.Json.as_dict)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/json.py#L208-L228)Returns Json value as a dict if possible.

Example:

```
import pathway as pw
class InputSchema(pw.Schema):
    data: pw.Json
@pw.udf
def extract(data: pw.Json) -> tuple:
    return tuple(data["value"].as_dict().values())
table = pw.debug.table_from_rows(schema=InputSchema, rows=[({"value": {"inner": 42}},)])
result = table.select(result=extract(pw.this.data))
pw.debug.compute_and_print(result, include_id=False)
```

Show Code Results

```
result
(42,)
```

### [**as\_float**()](https://pathway.com/developers/api-docs/pathway/#pathway.Json.as_float)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/json.py#L136-L160)Returns Json value as a float if possible.

Example:

```
import pathway as pw
class InputSchema(pw.Schema):
    data: pw.Json
@pw.udf
def extract(data: pw.Json) -> float:
    return data["value"].as_float()
table = pw.debug.table_from_rows(schema=InputSchema, rows=[({"value": 3.14},)])
result = table.select(result=extract(pw.this.data))
pw.debug.compute_and_print(result, include_id=False)
```

Show Code Results

```
result
3.14
```

### [**as\_int**()](https://pathway.com/developers/api-docs/pathway/#pathway.Json.as_int)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/json.py#L90-L111)Returns Json value as an int if possible.

Example:

```
import pathway as pw
class InputSchema(pw.Schema):
    data: pw.Json
@pw.udf
def extract(data: pw.Json) -> int:
    return data["value"].as_int()
table = pw.debug.table_from_rows(schema=InputSchema, rows=[({"value": 42},)])
result = table.select(result=extract(pw.this.data))
pw.debug.compute_and_print(result, include_id=False)
```

Show Code Results

```
result
42
```

### [**as\_list**()](https://pathway.com/developers/api-docs/pathway/#pathway.Json.as_list)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/json.py#L185-L206)Returns Json value as a list if possible.

Example:

```
import pathway as pw
class InputSchema(pw.Schema):
    data: pw.Json
@pw.udf
def extract(data: pw.Json) -> int:
    return data["value"].as_list()[-1]
table = pw.debug.table_from_rows(schema=InputSchema, rows=[({"value": [1,2,3]},)])
result = table.select(result=extract(pw.this.data))
pw.debug.compute_and_print(result, include_id=False)
```

Show Code Results

```
result
3
```

### [**as\_str**()](https://pathway.com/developers/api-docs/pathway/#pathway.Json.as_str)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/json.py#L113-L134)Returns Json value as a string if possible.

Example:

```
import pathway as pw
class InputSchema(pw.Schema):
    data: pw.Json
@pw.udf
def extract(data: pw.Json) -> str:
    return data["value"].as_str()
table = pw.debug.table_from_rows(schema=InputSchema, rows=[({"value": "foo"},)])
result = table.select(result=extract(pw.this.data))
pw.debug.compute_and_print(result, include_id=False)
```

Show Code Results

```
result
foo
```

[class pw.**LiveTable**()](https://pathway.com/developers/api-docs/pathway/#pathway.LiveTable)
----------------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/interactive.py#L130-L178)

[class pw.**Schema**](https://pathway.com/developers/api-docs/pathway/#pathway.Schema)
--------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/schema.py#L913-L947)

Base class to inherit from when creating schemas. All schemas should be subclasses of this one.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
   age  owner  pet
1   10  Alice  dog
2    9    Bob  dog
3    8  Alice  cat
4    7    Bob  dog''')
t1.schema
```

Show Code Results

```
<pathway.Schema types={'age': <class 'int'>, 'owner': <class 'str'>, 'pet': <class 'str'>}, id_type=<class 'pathway.engine.Pointer'>>
```

```
issubclass(t1.schema, pw.Schema)
```

Show Code Results

```
True
```

```
class NewSchema(pw.Schema):
  foo: int
SchemaSum = NewSchema | t1.schema
SchemaSum
```

Show Code Results

```
<pathway.Schema types={'age': <class 'int'>, 'owner': <class 'str'>, 'pet': <class 'str'>, 'foo': <class 'int'>}, id_type=<class 'pathway.engine.Pointer'>>
```

[class pw.**SchemaProperties**(append\_only=None)](https://pathway.com/developers/api-docs/pathway/#pathway.SchemaProperties)
-----------------------------------------------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/schema.py#L262-L264)

[class pw.**Table**()](https://pathway.com/developers/api-docs/pathway/#pathway.Table)
--------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L52-L2570)

Collection of named columns over identical universes.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
age | owner | pet
10  | Alice | dog
9   | Bob   | dog
8   | Alice | cat
7   | Bob   | dog
''')
isinstance(t1, pw.Table)
```

Show Code Results

```
True
```

### [**asof\_join**(other, self\_time, other\_time, \*on, how, behavior=None, defaults={}, direction=Direction.BACKWARD, left\_instance=None, right\_instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.asof_join)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/temporal/_asof_join.py#L475-L650)Perform an ASOF join of two tables.

*   **Parameters**
    *   **other** ([`Table`](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)) – Table to join with self, both must contain a column val
    *   **self\_time** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – time-like column expression to do the join against
    *   **other\_time** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – time-like column expression to do the join against
    *   **on** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – a list of column expressions. Each must have == as the top level operation and be of the form LHS: ColumnReference == RHS: ColumnReference.
    *   **behavior** ([`CommonBehavior`](https://pathway.com/developers/api-docs/pathway-stdlib-temporal#pathway.stdlib.temporal.temporal_behavior.CommonBehavior) | `None`) – defines the temporal behavior of a join - features like delaying entries or ignoring late entries.
    *   **how** ([`JoinMode`](https://pathway.com/developers/api-docs/pathway#pathway.JoinMode)) – mode of the join (LEFT, RIGHT, FULL)
    *   **defaults** (`dict`\[[`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference), `Any`\]) – dictionary column-> default value. Entries in the resulting table that not have a predecessor in the join will be set to this default value. If no default is provided, None will be used.
    *   **direction** ([`Direction`](https://pathway.com/developers/api-docs/pathway-stdlib-temporal#pathway.stdlib.temporal.Direction)) – direction of the join, accepted values: Direction.BACKWARD, Direction.FORWARD, Direction.NEAREST
    *   **left\_instance/right\_instance** – optional arguments describing partitioning of the data into separate instances

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
        | K | val |  t
    1   | 0 | 1   |  1
    2   | 0 | 2   |  4
    3   | 0 | 3   |  5
    4   | 0 | 4   |  6
    5   | 0 | 5   |  7
    6   | 0 | 6   |  11
    7   | 0 | 7   |  12
    8   | 1 | 8   |  5
    9   | 1 | 9   |  7
'''
)
t2 = pw.debug.table_from_markdown(
    '''
         | K | val | t
    21   | 1 | 7  | 2
    22   | 1 | 3  | 8
    23   | 0 | 0  | 2
    24   | 0 | 6  | 3
    25   | 0 | 2  | 7
    26   | 0 | 3  | 8
    27   | 0 | 9  | 9
    28   | 0 | 7  | 13
    29   | 0 | 4  | 14
    '''
)
res = t1.asof_join(
    t2,
    t1.t,
    t2.t,
    t1.K == t2.K,
    how=pw.JoinMode.LEFT,
    defaults={t2.val: -1},
).select(
    pw.this.instance,
    pw.this.t,
    val_left=t1.val,
    val_right=t2.val,
    sum=t1.val + t2.val,
)
pw.debug.compute_and_print(res, include_id=False)
```

Show Code Results

```
instance | t  | val_left | val_right | sum
0        | 1  | 1        | -1        | 0
0        | 4  | 2        | 6         | 8
0        | 5  | 3        | 6         | 9
0        | 6  | 4        | 6         | 10
0        | 7  | 5        | 2         | 7
0        | 11 | 6        | 9         | 15
0        | 12 | 7        | 9         | 16
1        | 5  | 8        | 7         | 15
1        | 7  | 9        | 7         | 16
```

Setting behavior allows to control temporal behavior of an asof join. Then, each side of the asof join keeps track of the maximal already seen time (self\_time and other\_time). In the context of asof\_join the arguments of behavior are defined as follows:

*   **delay** - buffers results until the maximal already seen time is greater than or equal to their time plus delay.
*   **cutoff** - ignores records with times less or equal to the maximal already seen time minus cutoff; it is also used to garbage collect records that have times lower or equal to the above threshold. When cutoff is not set, the asof join will remember all records from both sides.
*   **keep\_results** - if set to True, keeps all results of the operator. If set to False, keeps only results that are newer than the maximal seen time minus cutoff.

Examples without and with forgetting:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
    value | event_time | __time__
      2   |      2     |     4
      3   |      5     |     6
      4   |      1     |     8
      5   |      7     |    14
'''
)
t2 = pw.debug.table_from_markdown(
    '''
    value | event_time | __time__
      42  |      1     |     2
       8  |      4     |    10
'''
)
result_without_cutoff = t1.asof_join(
    t2, t1.event_time, t2.event_time, how=pw.JoinMode.LEFT
).select(
    left_value=t1.value,
    right_value=t2.value,
    left_time=t1.event_time,
    right_time=t2.event_time,
)
pw.debug.compute_and_print_update_stream(result_without_cutoff, include_id=False)
```

Show Code Results

```
left_value | right_value | left_time | right_time | __time__ | __diff__
2          | 42          | 2         | 1          | 4        | 1
3          | 42          | 5         | 1          | 6        | 1
4          | 42          | 1         | 1          | 8        | 1
3          | 42          | 5         | 1          | 10       | -1
3          | 8           | 5         | 4          | 10       | 1
5          | 8           | 7         | 4          | 14       | 1
```

```
result_without_cutoff = t1.asof_join(
    t2,
    t1.event_time,
    t2.event_time,
    how=pw.JoinMode.LEFT,
    behavior=pw.temporal.common_behavior(cutoff=2),
).select(
    left_value=t1.value,
    right_value=t2.value,
    left_time=t1.event_time,
    right_time=t2.event_time,
)
pw.debug.compute_and_print_update_stream(result_without_cutoff, include_id=False)
```

Show Code Results

```
left_value | right_value | left_time | right_time | __time__ | __diff__
2          | 42          | 2         | 1          | 4        | 1
3          | 42          | 5         | 1          | 6        | 1
3          | 42          | 5         | 1          | 10       | -1
3          | 8           | 5         | 4          | 10       | 1
5          | 8           | 7         | 4          | 14       | 1
```

The record with `value=4` from table `t1` was not joined because its `event_time` was less than the maximal already seen time minus `cutoff` (`1 <= 5-2`).

### [**asof\_join\_left**(other, self\_time, other\_time, \*on, behavior=None, defaults={}, direction=Direction.BACKWARD, left\_instance=None, right\_instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.asof_join_left)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/temporal/_asof_join.py#L653-L822)Perform a left ASOF join of two tables.

*   **Parameters**
    *   **other** ([`Table`](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)) – Table to join with self, both must contain a column val
    *   **self\_time** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – time-like column expression to do the join against
    *   **other\_time** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – time-like column expression to do the join against
    *   **on** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – a list of column expressions. Each must have == as the top level operation and be of the form LHS: ColumnReference == RHS: ColumnReference.
    *   **behavior** ([`CommonBehavior`](https://pathway.com/developers/api-docs/pathway-stdlib-temporal#pathway.stdlib.temporal.temporal_behavior.CommonBehavior) | `None`) – defines the temporal behavior of a join - features like delaying entries or ignoring late entries.
    *   **defaults** (`dict`\[[`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference), `Any`\]) – dictionary column-> default value. Entries in the resulting table that not have a predecessor in the join will be set to this default value. If no default is provided, None will be used.
    *   **direction** ([`Direction`](https://pathway.com/developers/api-docs/pathway-stdlib-temporal#pathway.stdlib.temporal.Direction)) – direction of the join, accepted values: Direction.BACKWARD, Direction.FORWARD, Direction.NEAREST
    *   **left\_instance/right\_instance** – optional arguments describing partitioning of the data into separate instances

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
        | K | val |  t
    1   | 0 | 1   |  1
    2   | 0 | 2   |  4
    3   | 0 | 3   |  5
    4   | 0 | 4   |  6
    5   | 0 | 5   |  7
    6   | 0 | 6   |  11
    7   | 0 | 7   |  12
    8   | 1 | 8   |  5
    9   | 1 | 9   |  7
'''
)
t2 = pw.debug.table_from_markdown(
    '''
         | K | val | t
    21   | 1 | 7  | 2
    22   | 1 | 3  | 8
    23   | 0 | 0  | 2
    24   | 0 | 6  | 3
    25   | 0 | 2  | 7
    26   | 0 | 3  | 8
    27   | 0 | 9  | 9
    28   | 0 | 7  | 13
    29   | 0 | 4  | 14
    '''
)
res = t1.asof_join_left(
    t2,
    t1.t,
    t2.t,
    t1.K == t2.K,
    defaults={t2.val: -1},
).select(
    pw.this.instance,
    pw.this.t,
    val_left=t1.val,
    val_right=t2.val,
    sum=t1.val + t2.val,
)
pw.debug.compute_and_print(res, include_id=False)
```

Show Code Results

```
instance | t  | val_left | val_right | sum
0        | 1  | 1        | -1        | 0
0        | 4  | 2        | 6         | 8
0        | 5  | 3        | 6         | 9
0        | 6  | 4        | 6         | 10
0        | 7  | 5        | 2         | 7
0        | 11 | 6        | 9         | 15
0        | 12 | 7        | 9         | 16
1        | 5  | 8        | 7         | 15
1        | 7  | 9        | 7         | 16
```

Setting behavior allows to control temporal behavior of an asof join. Then, each side of the asof join keeps track of the maximal already seen time (self\_time and other\_time). In the context of asof\_join the arguments of behavior are defined as follows:

*   **delay** - buffers results until the maximal already seen time is greater than or equal to their time plus delay.
*   **cutoff** - ignores records with times less or equal to the maximal already seen time minus cutoff; it is also used to garbage collect records that have times lower or equal to the above threshold. When cutoff is not set, the asof join will remember all records from both sides.
*   **keep\_results** - if set to True, keeps all results of the operator. If set to False, keeps only results that are newer than the maximal seen time minus cutoff.

Examples without and with forgetting:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
    value | event_time | __time__
      2   |      2     |     4
      3   |      5     |     6
      4   |      1     |     8
      5   |      7     |    14
'''
)
t2 = pw.debug.table_from_markdown(
    '''
    value | event_time | __time__
      42  |      1     |     2
       8  |      4     |    10
'''
)
result_without_cutoff = t1.asof_join_left(t2, t1.event_time, t2.event_time).select(
    left_value=t1.value,
    right_value=t2.value,
    left_time=t1.event_time,
    right_time=t2.event_time,
)
pw.debug.compute_and_print_update_stream(result_without_cutoff, include_id=False)
```

Show Code Results

```
left_value | right_value | left_time | right_time | __time__ | __diff__
2          | 42          | 2         | 1          | 4        | 1
3          | 42          | 5         | 1          | 6        | 1
4          | 42          | 1         | 1          | 8        | 1
3          | 42          | 5         | 1          | 10       | -1
3          | 8           | 5         | 4          | 10       | 1
5          | 8           | 7         | 4          | 14       | 1
```

```
result_without_cutoff = t1.asof_join_left(
    t2,
    t1.event_time,
    t2.event_time,
    behavior=pw.temporal.common_behavior(cutoff=2),
).select(
    left_value=t1.value,
    right_value=t2.value,
    left_time=t1.event_time,
    right_time=t2.event_time,
)
pw.debug.compute_and_print_update_stream(result_without_cutoff, include_id=False)
```

Show Code Results

```
left_value | right_value | left_time | right_time | __time__ | __diff__
2          | 42          | 2         | 1          | 4        | 1
3          | 42          | 5         | 1          | 6        | 1
3          | 42          | 5         | 1          | 10       | -1
3          | 8           | 5         | 4          | 10       | 1
5          | 8           | 7         | 4          | 14       | 1
```

The record with `value=4` from table `t1` was not joined because its `event_time` was less than the maximal already seen time minus `cutoff` (`1 <= 5-2`).

### [**asof\_join\_outer**(other, self\_time, other\_time, \*on, behavior=None, defaults={}, direction=Direction.BACKWARD, left\_instance=None, right\_instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.asof_join_outer)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/temporal/_asof_join.py#L996-L1107)Perform an outer ASOF join of two tables.

*   **Parameters**
    *   **other** ([`Table`](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)) – Table to join with self, both must contain a column val
    *   **self\_time** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – time-like column expression to do the join against
    *   **other\_time** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – time-like column expression to do the join against
    *   **on** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – a list of column expressions. Each must have == as the top level operation and be of the form LHS: ColumnReference == RHS: ColumnReference.
    *   **behavior** ([`CommonBehavior`](https://pathway.com/developers/api-docs/pathway-stdlib-temporal#pathway.stdlib.temporal.temporal_behavior.CommonBehavior) | `None`) – defines the temporal behavior of a join - features like delaying entries or ignoring late entries.
    *   **defaults** (`dict`\[[`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference), `Any`\]) – dictionary column-> default value. Entries in the resulting table that not have a predecessor in the join will be set to this default value. If no default is provided, None will be used.
    *   **direction** ([`Direction`](https://pathway.com/developers/api-docs/pathway-stdlib-temporal#pathway.stdlib.temporal.Direction)) – direction of the join, accepted values: Direction.BACKWARD, Direction.FORWARD, Direction.NEAREST
    *   **left\_instance/right\_instance** – optional arguments describing partitioning of the data into separate instances

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
        | K | val |  t
    1   | 0 | 1   |  1
    2   | 0 | 2   |  4
    3   | 0 | 3   |  5
    4   | 0 | 4   |  6
    5   | 0 | 5   |  7
    6   | 0 | 6   |  11
    7   | 0 | 7   |  12
    8   | 1 | 8   |  5
    9   | 1 | 9   |  7
'''
)
t2 = pw.debug.table_from_markdown(
    '''
         | K | val | t
    21   | 1 | 7  | 2
    22   | 1 | 3  | 8
    23   | 0 | 0  | 2
    24   | 0 | 6  | 3
    25   | 0 | 2  | 7
    26   | 0 | 3  | 8
    27   | 0 | 9  | 9
    28   | 0 | 7  | 13
    29   | 0 | 4  | 14
    '''
)
res = t1.asof_join_outer(
    t2,
    t1.t,
    t2.t,
    t1.K == t2.K,
    defaults={t1.val: -1, t2.val: -1},
).select(
    pw.this.instance,
    pw.this.t,
    val_left=t1.val,
    val_right=t2.val,
    sum=t1.val + t2.val,
)
pw.debug.compute_and_print(res, include_id=False)
```

Show Code Results

```
instance | t  | val_left | val_right | sum
0        | 1  | 1        | -1        | 0
0        | 2  | 1        | 0         | 1
0        | 3  | 1        | 6         | 7
0        | 4  | 2        | 6         | 8
0        | 5  | 3        | 6         | 9
0        | 6  | 4        | 6         | 10
0        | 7  | 5        | 2         | 7
0        | 7  | 5        | 6         | 11
0        | 8  | 5        | 3         | 8
0        | 9  | 5        | 9         | 14
0        | 11 | 6        | 9         | 15
0        | 12 | 7        | 9         | 16
0        | 13 | 7        | 7         | 14
0        | 14 | 7        | 4         | 11
1        | 2  | -1       | 7         | 6
1        | 5  | 8        | 7         | 15
1        | 7  | 9        | 7         | 16
1        | 8  | 9        | 3         | 12
```

### [**asof\_join\_right**(other, self\_time, other\_time, \*on, behavior=None, defaults={}, direction=Direction.BACKWARD, left\_instance=None, right\_instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.asof_join_right)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/temporal/_asof_join.py#L825-L993)Perform a right ASOF join of two tables.

*   **Parameters**
    *   **other** ([`Table`](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)) – Table to join with self, both must contain a column val
    *   **self\_time** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – time-like column expression to do the join against
    *   **other\_time** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – time-like column expression to do the join against
    *   **on** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – a list of column expressions. Each must have == as the top level operation and be of the form LHS: ColumnReference == RHS: ColumnReference.
    *   **behavior** ([`CommonBehavior`](https://pathway.com/developers/api-docs/pathway-stdlib-temporal#pathway.stdlib.temporal.temporal_behavior.CommonBehavior) | `None`) – defines the temporal behavior of a join - features like delaying entries or ignoring late entries.
    *   **defaults** (`dict`\[[`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference), `Any`\]) – dictionary column-> default value. Entries in the resulting table that not have a predecessor in the join will be set to this default value. If no default is provided, None will be used.
    *   **direction** ([`Direction`](https://pathway.com/developers/api-docs/pathway-stdlib-temporal#pathway.stdlib.temporal.Direction)) – direction of the join, accepted values: Direction.BACKWARD, Direction.FORWARD, Direction.NEAREST
    *   **left\_instance/right\_instance** – optional arguments describing partitioning of the data into separate instances

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
        | K | val |  t
    1   | 0 | 1   |  1
    2   | 0 | 2   |  4
    3   | 0 | 3   |  5
    4   | 0 | 4   |  6
    5   | 0 | 5   |  7
    6   | 0 | 6   |  11
    7   | 0 | 7   |  12
    8   | 1 | 8   |  5
    9   | 1 | 9   |  7
'''
)
t2 = pw.debug.table_from_markdown(
    '''
         | K | val | t
    21   | 1 | 7  | 2
    22   | 1 | 3  | 8
    23   | 0 | 0  | 2
    24   | 0 | 6  | 3
    25   | 0 | 2  | 7
    26   | 0 | 3  | 8
    27   | 0 | 9  | 9
    28   | 0 | 7  | 13
    29   | 0 | 4  | 14
    '''
)
res = t1.asof_join_right(
    t2,
    t1.t,
    t2.t,
    t1.K == t2.K,
    defaults={t1.val: -1},
).select(
    pw.this.instance,
    pw.this.t,
    val_left=t1.val,
    val_right=t2.val,
    sum=t1.val + t2.val,
)
pw.debug.compute_and_print(res, include_id=False)
```

Show Code Results

```
instance | t  | val_left | val_right | sum
0        | 2  | 1        | 0         | 1
0        | 3  | 1        | 6         | 7
0        | 7  | 5        | 2         | 7
0        | 8  | 5        | 3         | 8
0        | 9  | 5        | 9         | 14
0        | 13 | 7        | 7         | 14
0        | 14 | 7        | 4         | 11
1        | 2  | -1       | 7         | 6
1        | 8  | 9        | 3         | 12
```

Setting behavior allows to control temporal behavior of an asof join. Then, each side of the asof join keeps track of the maximal already seen time (self\_time and other\_time). In the context of asof\_join the arguments of behavior are defined as follows:

*   **delay** - buffers results until the maximal already seen time is greater than or equal to their time plus delay.
*   **cutoff** - ignores records with times less or equal to the maximal already seen time minus cutoff; it is also used to garbage collect records that have times lower or equal to the above threshold. When cutoff is not set, the asof join will remember all records from both sides.
*   **keep\_results** - if set to True, keeps all results of the operator. If set to False, keeps only results that are newer than the maximal seen time minus cutoff.

Examples without and with forgetting:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
    value | event_time | __time__
      42  |      1     |     2
       8  |      4     |    10
'''
)
t2 = pw.debug.table_from_markdown(
    '''
    value | event_time | __time__
      2   |      2     |     4
      3   |      5     |     6
      4   |      1     |     8
      5   |      7     |    14
'''
)
result_without_cutoff = t1.asof_join_right(t2, t1.event_time, t2.event_time).select(
    left_value=t1.value,
    right_value=t2.value,
    left_time=t1.event_time,
    right_time=t2.event_time,
)
pw.debug.compute_and_print_update_stream(result_without_cutoff, include_id=False)
```

Show Code Results

```
left_value | right_value | left_time | right_time | __time__ | __diff__
42         | 2           | 1         | 2          | 4        | 1
42         | 3           | 1         | 5          | 6        | 1
42         | 4           | 1         | 1          | 8        | 1
42         | 3           | 1         | 5          | 10       | -1
8          | 3           | 4         | 5          | 10       | 1
8          | 5           | 4         | 7          | 14       | 1
```

```
result_without_cutoff = t1.asof_join_right(
    t2,
    t1.event_time,
    t2.event_time,
    behavior=pw.temporal.common_behavior(cutoff=2),
).select(
    left_value=t1.value,
    right_value=t2.value,
    left_time=t1.event_time,
    right_time=t2.event_time,
)
pw.debug.compute_and_print_update_stream(result_without_cutoff, include_id=False)
```

Show Code Results

```
left_value | right_value | left_time | right_time | __time__ | __diff__
42         | 2           | 1         | 2          | 4        | 1
42         | 3           | 1         | 5          | 6        | 1
42         | 3           | 1         | 5          | 10       | -1
8          | 3           | 4         | 5          | 10       | 1
8          | 5           | 4         | 7          | 14       | 1
```

The record with `value=4` from table `t2` was not joined because its `event_time` was less than the maximal already seen time minus `cutoff` (`1 <= 5-2`).

### [**asof\_now\_join**(other, \*on, how=JoinMode.INNER, id=None, left\_instance=None, right\_instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.asof_now_join)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/temporal/_asof_now_join.py#L172-L249)Performs asof now join of self with other using join expressions. Each row of self is joined with rows from other at a given processing time. Rows from self are not stored. They are joined with rows of other at their processing time. If other is updated in the future, rows from self from the past won’t be updated. Rows from other are stored. They can be joined with future rows of self.

*   **Parameters**
    *   **other** ([`Table`](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)) – the right side of a join.
    *   **on** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – a list of column expressions. Each must have == as the top level operation and be of the form LHS: ColumnReference == RHS: ColumnReference.
    *   **id** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference) | `None`) – optional argument for id of result, can be only self.id or other.id
    *   **how** ([`JoinMode`](https://pathway.com/developers/api-docs/pathway#pathway.JoinMode)) – by default, inner join is performed. Possible values are JoinMode.{INNER,LEFT} which correspond to inner and left join respectively.
*   **Returns**  
    _AsofNowJoinResult_ – an object on which .select() may be called to extract relevant columns from the result of the join.

Example:

```
import pathway as pw
data = pw.debug.table_from_markdown(
    '''
    id | value | instance | __time__ | __diff__
     2 |   4   |    1     |     4    |     1
     2 |   4   |    1     |    10    |    -1
     5 |   5   |    1     |    10    |     1
     7 |   2   |    2     |    14    |     1
     7 |   2   |    2     |    22    |    -1
    11 |   3   |    2     |    26    |     1
     5 |   5   |    1     |    30    |    -1
    14 |   9   |    1     |    32    |     1
    '''
)
queries = pw.debug.table_from_markdown(
    '''
    value | instance | __time__
      1   |    1     |     2
      2   |    1     |     6
      4   |    1     |    12
      5   |    2     |    16
     10   |    1     |    26
    '''
)
result = queries.asof_now_join(
    data, pw.left.instance == pw.right.instance, how=pw.JoinMode.LEFT
).select(query=pw.left.value, ans=pw.right.value)
pw.debug.compute_and_print_update_stream(result, include_id=False)
```

Show Code Results

```
query | ans | __time__ | __diff__
1     |     | 2        | 1
2     | 4   | 6        | 1
4     | 5   | 12       | 1
5     | 2   | 16       | 1
10    | 5   | 26       | 1
```

### [**asof\_now\_join\_inner**(other, \*on, id=None, left\_instance=None, right\_instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.asof_now_join_inner)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/temporal/_asof_now_join.py#L252-L325)Performs asof now join of self with other using join expressions. Each row of self is joined with rows from other at a given processing time. Rows from self are not stored. They are joined with rows of other at their processing time. If other is updated in the future, rows from self from the past won’t be updated. Rows from other are stored. They can be joined with future rows of self.

*   **Parameters**
    *   **other** ([`Table`](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)) – the right side of a join.
    *   **on** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – a list of column expressions. Each must have == as the top level operation and be of the form LHS: ColumnReference == RHS: ColumnReference.
    *   **id** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference) | `None`) – optional argument for id of result, can be only self.id or other.id
*   **Returns**  
    _AsofNowJoinResult_ – an object on which .select() may be called to extract relevant columns from the result of the join.

Example:

```
import pathway as pw
data = pw.debug.table_from_markdown(
    '''
    id | value | instance | __time__ | __diff__
     2 |   4   |    1     |     4    |     1
     2 |   4   |    1     |    10    |    -1
     5 |   5   |    1     |    10    |     1
     7 |   2   |    2     |    14    |     1
     7 |   2   |    2     |    22    |    -1
    11 |   3   |    2     |    26    |     1
     5 |   5   |    1     |    30    |    -1
    14 |   9   |    1     |    32    |     1
    '''
)
queries = pw.debug.table_from_markdown(
    '''
    value | instance | __time__
      1   |    1     |     2
      2   |    1     |     6
      4   |    1     |    12
      5   |    2     |    16
     10   |    1     |    26
    '''
)
result = queries.asof_now_join_inner(
    data, pw.left.instance == pw.right.instance
).select(query=pw.left.value, ans=pw.right.value)
pw.debug.compute_and_print_update_stream(result, include_id=False)
```

Show Code Results

```
query | ans | __time__ | __diff__
2     | 4   | 6        | 1
4     | 5   | 12       | 1
5     | 2   | 16       | 1
10    | 5   | 26       | 1
```

### [**asof\_now\_join\_left**(other, \*on, id=None, left\_instance=None, right\_instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.asof_now_join_left)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/temporal/_asof_now_join.py#L328-L403)Performs asof now join of self with other using join expressions. Each row of self is joined with rows from other at a given processing time. If there are no matching rows in other, missing values on the right side are replaced with None. Rows from self are not stored. They are joined with rows of other at their processing time. If other is updated in the future, rows from self from the past won’t be updated. Rows from other are stored. They can be joined with future rows of self.

*   **Parameters**
    *   **other** ([`Table`](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)) – the right side of a join.
    *   **on** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – a list of column expressions. Each must have == as the top level operation and be of the form LHS: ColumnReference == RHS: ColumnReference.
    *   **id** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference) | `None`) – optional argument for id of result, can be only self.id or other.id
*   **Returns**  
    _AsofNowJoinResult_ – an object on which .select() may be called to extract relevant columns from the result of the join.

Example:

```
import pathway as pw
data = pw.debug.table_from_markdown(
    '''
    id | value | instance | __time__ | __diff__
     2 |   4   |    1     |     4    |     1
     2 |   4   |    1     |    10    |    -1
     5 |   5   |    1     |    10    |     1
     7 |   2   |    2     |    14    |     1
     7 |   2   |    2     |    22    |    -1
    11 |   3   |    2     |    26    |     1
     5 |   5   |    1     |    30    |    -1
    14 |   9   |    1     |    32    |     1
    '''
)
queries = pw.debug.table_from_markdown(
    '''
    value | instance | __time__
      1   |    1     |     2
      2   |    1     |     6
      4   |    1     |    12
      5   |    2     |    16
     10   |    1     |    26
    '''
)
result = queries.asof_now_join_left(
    data, pw.left.instance == pw.right.instance
).select(query=pw.left.value, ans=pw.right.value)
pw.debug.compute_and_print_update_stream(result, include_id=False)
```

Show Code Results

```
query | ans | __time__ | __diff__
1     |     | 2        | 1
2     | 4   | 6        | 1
4     | 5   | 12       | 1
5     | 2   | 16       | 1
10    | 5   | 26       | 1
```

### [**cast\_to\_types**(\*\*kwargs)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.cast_to_types)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L2010-L2023)Casts columns to types.

### [**concat**(\*others)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.concat)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L1332-L1414)Concats self with every other ∊ others.

Semantics:

*   result.columns == self.columns == other.columns
*   result.id == self.id ∪ other.id

if self.id and other.id collide, throws an exception.

Requires:

*   other.columns == self.columns
*   self.id disjoint with other.id

*   **Parameters**  
    **other** – the other table.
*   **Returns**  
    _Table_ – The concatenated table. Id’s of rows from original tables are preserved.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
  | age | owner | pet
1 | 10  | Alice | 1
2 | 9   | Bob   | 1
3 | 8   | Alice | 2
''')
t2 = pw.debug.table_from_markdown('''
   | age | owner | pet
11 | 11  | Alice | 30
12 | 12  | Tom   | 40
''')
pw.universes.promise_are_pairwise_disjoint(t1, t2)
t3 = t1.concat(t2)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
age | owner | pet
8   | Alice | 2
9   | Bob   | 1
10  | Alice | 1
11  | Alice | 30
12  | Tom   | 40
```

### [**concat\_reindex**(\*tables)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.concat_reindex)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L306-L350)Concatenate contents of several tables.

This is similar to PySpark union. All tables must have the same schema. Each row is reindexed.

*   **Parameters**  
    **tables** ([`Table`](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)) – List of tables to concatenate. All tables must have the same schema.
*   **Returns**  
    _Table_ – The concatenated table. It will have new, synthetic ids.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
  | pet
1 | Dog
7 | Cat
''')
t2 = pw.debug.table_from_markdown('''
  | pet
1 | Manul
8 | Octopus
''')
t3 = t1.concat_reindex(t2)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
pet
Cat
Dog
Manul
Octopus
```

### [**copy**()](https://pathway.com/developers/api-docs/pathway/#pathway.Table.copy)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L902-L928)Returns a copy of a table.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
age | owner | pet
10  | Alice | dog
9   | Bob   | dog
8   | Alice | cat
7   | Bob   | dog
''')
t2 = t1.copy()
pw.debug.compute_and_print(t2, include_id=False)
```

Show Code Results

```
age | owner | pet
7   | Bob   | dog
8   | Alice | cat
9   | Bob   | dog
10  | Alice | dog
```

```
t1 is t2
```

Show Code Results

```
False
```

### [**deduplicate**(\*, value, instance=None, acceptor, persistent\_id=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.deduplicate)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L1060-L1161)Deduplicates rows in self on value column using acceptor function.

It keeps rows which where accepted by the acceptor function. Acceptor operates on two arguments - _CURRENT_ value and _PREVIOUS_ value.

*   **Parameters**
    *   **value** (`Union`\[[`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression), `None`, `int`, `float`, `str`, `bytes`, `bool`, `Pointer`, `datetime`, `timedelta`, `ndarray`, [`Json`](https://pathway.com/developers/api-docs/pathway#pathway.Json), `dict`\[`str`, `Any`\], `tuple`\[`Any`, `...`\], `Error`\]) – column expression used for deduplication.
    *   **instance** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression) | `None`) – Grouping column. For rows with different values in this column, deduplication will be performed separately. Defaults to None.
    *   **acceptor** (`Callable`\[\[`TypeVar`(`T`, bound= `Union`\[`None`, `int`, `float`, `str`, `bytes`, `bool`, `Pointer`, `datetime`, `timedelta`, `ndarray`, [`Json`](https://pathway.com/developers/api-docs/pathway#pathway.Json), `dict`\[`str`, `Any`\], `tuple`\[`Any`, `...`\], `Error`\]), `TypeVar`(`T`, bound= `Union`\[`None`, `int`, `float`, `str`, `bytes`, `bool`, `Pointer`, `datetime`, `timedelta`, `ndarray`, [`Json`](https://pathway.com/developers/api-docs/pathway#pathway.Json), `dict`\[`str`, `Any`\], `tuple`\[`Any`, `...`\], `Error`\])\], `bool`\]) – callback telling whether two values are different.
    *   **persistent\_id** (`str` | `None`) – (unstable) An identifier, under which the state of the table will be persisted or `None`, if there is no need to persist the state of this table. When a program restarts, it restores the state for all input tables according to what was saved for their `persistent_id`. This way it’s possible to configure the start of computations from the moment they were terminated last time.
*   **Returns**  
    _Table_ – the result of deduplication.

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
    val | __time__
     1  |     2
     2  |     4
     3  |     6
     4  |     8
'''
)
def acceptor(new_value, old_value) -> bool:
    return new_value >= old_value + 2
result = table.deduplicate(value=pw.this.val, acceptor=acceptor)
pw.debug.compute_and_print_update_stream(result, include_id=False)
```

Show Code Results

```
val | __time__ | __diff__
1   | 2        | 1
1   | 6        | -1
3   | 6        | 1
```

```
table = pw.debug.table_from_markdown(
    '''
    val | instance | __time__
     1  |     1    |     2
     2  |     1    |     4
     3  |     2    |     6
     4  |     1    |     8
     4  |     2    |     8
     5  |     1    |    10
'''
)
def acceptor(new_value, old_value) -> bool:
    return new_value >= old_value + 2
result = table.deduplicate(
    value=pw.this.val, instance=pw.this.instance, acceptor=acceptor
)
pw.debug.compute_and_print_update_stream(result, include_id=False)
```

Show Code Results

```
val | instance | __time__ | __diff__
1   | 1        | 2        | 1
3   | 2        | 6        | 1
1   | 1        | 8        | -1
4   | 1        | 8        | 1
```

### [**diff**(timestamp, \*values, instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.diff)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/ordered/diff.py#L8-L123)Compute the difference between the values in the `values` columns and the previous values according to the order defined by the column `timestamp`.

*   **Parameters**
    *   **timestamp** (`-`) – The column reference to the `timestamp` column on which the order is computed.
    *   **\*values** (`-`) – Variable-length argument representing the column references to the `values` columns.
    *   **instance** (`-`) – Can be used to group the values. The difference is only computed between rows with the same `instance` value.
*   **Returns**  
    `Table` – A new table where each column is replaced with a new column containing the difference and whose name is the concatenation of diff\_ and the former name.
*   **Raises**  
    **ValueError** – If the columns are not ColumnReference.

**NOTE**: \* The value of the “first” value (the row with the lowest value in the `timestamp` column) is `None`.

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown('''
timestamp | values
1         | 1
2         | 2
3         | 4
4         | 7
5         | 11
6         | 16
''')
table += table.diff(pw.this.timestamp, pw.this.values)
pw.debug.compute_and_print(table, include_id=False)
```

Show Code Results

```
timestamp | values | diff_values
1         | 1      |
2         | 2      | 1
3         | 4      | 2
4         | 7      | 3
5         | 11     | 4
6         | 16     | 5
```

```
table = pw.debug.table_from_markdown(
    '''
timestamp | instance | values
1         | 0        | 1
2         | 1        | 2
3         | 1        | 4
3         | 0        | 7
6         | 1        | 11
6         | 0        | 16
'''
)
table += table.diff(pw.this.timestamp, pw.this.values, instance=pw.this.instance)
pw.debug.compute_and_print(table, include_id=False)
```

Show Code Results

```
timestamp | instance | values | diff_values
1         | 0        | 1      |
2         | 1        | 2      |
3         | 0        | 7      | 6
3         | 1        | 4      | 2
6         | 0        | 16     | 9
6         | 1        | 11     | 7
```

### [**difference**(other)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.difference)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L737-L773)Restrict self universe to keys not appearing in the other table.

*   **Parameters**  
    **other** ([`Table`](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)) – table with ids to remove from self.
*   **Returns**  
    _Table_ – table with restricted universe, with the same set of columns

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
  | age  | owner  | pet
1 | 10   | Alice  | 1
2 | 9    | Bob    | 1
3 | 8    | Alice  | 2
''')
t2 = pw.debug.table_from_markdown('''
  | cost
2 | 100
3 | 200
4 | 300
''')
t3 = t1.difference(t2)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
age | owner | pet
10  | Alice | 1
```

### [**empty**()](https://pathway.com/developers/api-docs/pathway/#pathway.Table.empty)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L352-L376)Creates an empty table with a schema specified by kwargs.

*   **Parameters**  
    **kwargs** (`DType`) – Dict whose keys are column names and values are column types.
*   **Returns**  
    _Table_ – Created empty table.

Example:

```
import pathway as pw
t1 = pw.Table.empty(age=float, pet=float)
pw.debug.compute_and_print(t1, include_id=False)
```

Show Code Results

```
age | pet
```

### [**filter**(filter\_expression)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.filter)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L487-L526)Filter a table according to filter\_expression condition.

*   **Parameters**  
    **filter\_expression** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – ColumnExpression that specifies the filtering condition.
*   **Returns**  
    _Table_ – Result has the same schema as self and its ids are subset of self.id.

Example:

```
import pathway as pw
vertices = pw.debug.table_from_markdown('''
label outdegree
    1         3
    7         0
''')
filtered = vertices.filter(vertices.outdegree == 0)
pw.debug.compute_and_print(filtered, include_id=False)
```

Show Code Results

```
label | outdegree
7     | 0
```

### [**flatten**(to\_flatten, \*, origin\_id=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.flatten)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L2086-L2125)Performs a flatmap operation on a column or expression given as a first argument. Datatype of this column or expression has to be iterable or Json array. Other columns of the table are duplicated as many times as the length of the iterable.

It is possible to get ids of source rows by passing origin\_id argument, which is a new name of the column with the source ids.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
  | pet  |  age
1 | Dog  |   2
7 | Cat  |   5
''')
t2 = t1.flatten(t1.pet)
pw.debug.compute_and_print(t2, include_id=False)
```

Show Code Results

```
pet | age
C   | 5
D   | 2
a   | 5
g   | 2
o   | 2
t   | 5
```

### [**from\_columns**(\*\*kwargs)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.from_columns)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L262-L304)Build a table from columns.

All columns must have the same ids. Columns’ names must be pairwise distinct.

*   **Parameters**
    *   **args** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference)) – List of columns.
    *   **kwargs** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference)) – Columns with their new names.
*   **Returns**  
    _Table_ – Created table.

Example:

```
import pathway as pw
t1 = pw.Table.empty(age=float, pet=float)
t2 = pw.Table.empty(foo=float, bar=float).with_universe_of(t1)
t3 = pw.Table.from_columns(t1.pet, qux=t2.foo)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
pet | qux
```

### [**groupby**(\*args, id=None, sort\_by=None, instance=None, )](https://pathway.com/developers/api-docs/pathway/#pathway.Table.groupby)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L938-L1020)Groups table by columns from args.

**NOTE**: Usually followed by .reduce() that aggregates the result and returns a table.

*   **Parameters**
    *   **args** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference)) – columns to group by.
    *   **id** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference) | `None`) – if provided, is the column used to set id’s of the rows of the result
    *   **sort\_by** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference) | `None`) – if provided, column values are used as sorting keys for particular reducers
    *   **instance** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference) | `None`) – optional argument describing partitioning of the data into separate instances
*   **Returns**  
    _GroupedTable_ – Groupby object.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
age | owner | pet
10  | Alice | dog
9   | Bob   | dog
8   | Alice | cat
7   | Bob   | dog
''')
t2 = t1.groupby(t1.pet, t1.owner).reduce(t1.owner, t1.pet, ageagg=pw.reducers.sum(t1.age))
pw.debug.compute_and_print(t2, include_id=False)
```

Show Code Results

```
owner | pet | ageagg
Alice | cat | 8
Alice | dog | 10
Bob   | dog | 16
```

### [**interpolate**(timestamp, \*values, mode=InterpolateMode.LINEAR)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.interpolate)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/statistical/_interpolate.py#L32-L146)Interpolates missing values in a column using the previous and next values based on a timestamps column.

*   **Parameters**
    *   **timestamp** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference)) – Reference to the column containing timestamps.
    *   **\*values** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference)) – References to the columns containing values to be interpolated.
    *   **mode** (`InterpolateMode, optional`) – The interpolation mode. Currently, only InterpolateMode.LINEAR is supported. Default is InterpolateMode.LINEAR.
*   **Returns**  
    _Table_ – A new table with the interpolated values.
*   **Raises**  
    **ValueError** – If the columns are not ColumnReference or if the interpolation mode is not supported.

**NOTE**: \* The interpolation is performed based on linear interpolation between the previous and next values.

*   If a value is missing at the beginning or end of the column, no interpolation is performed.

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown('''
timestamp | values_a | values_b
1         | 1        | 10
2         |          |
3         | 3        |
4         |          |
5         |          |
6         | 6        | 60
''')
table = table.interpolate(pw.this.timestamp, pw.this.values_a, pw.this.values_b)
pw.debug.compute_and_print(table, include_id=False)
```

Show Code Results

```
timestamp | values_a | values_b
1         | 1.0      | 10.0
2         | 2.0      | 20.0
3         | 3.0      | 30.0
4         | 4.0      | 40.0
5         | 5.0      | 50.0
6         | 6.0      | 60.0
```

### [**intersect**(\*tables)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.intersect)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L775-L822)Restrict self universe to keys appearing in all of the tables.

*   **Parameters**  
    **tables** ([`Table`](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)) – tables keys of which are used to restrict universe.
*   **Returns**  
    _Table_ – table with restricted universe, with the same set of columns

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
  | age  | owner  | pet
1 | 10   | Alice  | 1
2 | 9    | Bob    | 1
3 | 8    | Alice  | 2
''')
t2 = pw.debug.table_from_markdown('''
  | cost
2 | 100
3 | 200
4 | 300
''')
t3 = t1.intersect(t2)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
age | owner | pet
8   | Alice | 2
9   | Bob   | 1
```

### [**interval\_join**(other, self\_time, other\_time, interval, \*on, behavior=None, how=JoinMode.INNER, left\_instance=None, right\_instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.interval_join)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/temporal/_interval_join.py#L573-L775)Performs an interval join of self with other using a time difference and join expressions. If self\_time + lower\_bound <= other\_time <= self\_time + upper\_bound and conditions in on are satisfied, the rows are joined.

*   **Parameters**
    *   **other** ([`Table`](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)) – the right side of a join.
    *   **self\_time** (`pw.ColumnExpression[int | float | datetime]`) – time expression in self.
    *   **other\_time** (`pw.ColumnExpression[int | float | datetime]`) – time expression in other.
    *   **lower\_bound** – a lower bound on time difference between other\_time and self\_time.
    *   **upper\_bound** – an upper bound on time difference between other\_time and self\_time.
    *   **on** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – a list of column expressions. Each must have == as the top level operation and be of the form LHS: ColumnReference == RHS: ColumnReference.
    *   **behavior** ([`CommonBehavior`](https://pathway.com/developers/api-docs/pathway-stdlib-temporal#pathway.stdlib.temporal.temporal_behavior.CommonBehavior) | `None`) – defines a temporal behavior of a join - features like delaying entries or ignoring late entries. You can see examples below or read more in the [temporal behavior of interval join tutorial](https://pathway.com/developers/user-guide/temporal-data/temporal_behavior) .
    *   **how** ([`JoinMode`](https://pathway.com/developers/api-docs/pathway#pathway.JoinMode)) – decides whether to run interval\_join\_inner, interval\_join\_left, interval\_join\_right or interval\_join\_outer. Default is INNER.
    *   **left\_instance/right\_instance** – optional arguments describing partitioning of the data into separate instances
*   **Returns**  
    _IntervalJoinResult_ – a result of the interval join. A method .select() can be called on it to extract relevant columns from the result of a join.

Examples:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
    | t
  1 | 3
  2 | 4
  3 | 5
  4 | 11
'''
)
t2 = pw.debug.table_from_markdown(
    '''
    | t
  1 | 0
  2 | 1
  3 | 4
  4 | 7
'''
)
t3 = t1.interval_join(t2, t1.t, t2.t, pw.temporal.interval(-2, 1)).select(
    left_t=t1.t, right_t=t2.t
)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
left_t | right_t
3      | 1
3      | 4
4      | 4
5      | 4
```

```
t1 = pw.debug.table_from_markdown(
    '''
    | a | t
  1 | 1 | 3
  2 | 1 | 4
  3 | 1 | 5
  4 | 1 | 11
  5 | 2 | 2
  6 | 2 | 3
  7 | 3 | 4
'''
)
t2 = pw.debug.table_from_markdown(
    '''
    | b | t
  1 | 1 | 0
  2 | 1 | 1
  3 | 1 | 4
  4 | 1 | 7
  5 | 2 | 0
  6 | 2 | 2
  7 | 4 | 2
'''
)
t3 = t1.interval_join(
    t2, t1.t, t2.t, pw.temporal.interval(-2, 1), t1.a == t2.b, how=pw.JoinMode.INNER
).select(t1.a, left_t=t1.t, right_t=t2.t)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
a | left_t | right_t
1 | 3      | 1
1 | 3      | 4
1 | 4      | 4
1 | 5      | 4
2 | 2      | 0
2 | 2      | 2
2 | 3      | 2
```

Setting behavior allows to control temporal behavior of an interval join. Then, each side of the interval join keeps track of the maximal already seen time (self\_time and other\_time). The arguments of behavior mean in the context of an interval join what follows:

*   **delay** - buffers results until the maximal already seen time is greater than or equal to their time plus delay.
*   **cutoff** - ignores records with times less or equal to the maximal already seen time minus cutoff; it is also used to garbage collect records that have times lower or equal to the above threshold. When cutoff is not set, interval join will remember all records from both sides.
*   **keep\_results** - if set to True, keeps all results of the operator. If set to False, keeps only results that are newer than the maximal seen time minus cutoff.

Example without and with forgetting:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
    value | instance | event_time | __time__
      1   |     1    |      0     |     2
      2   |     2    |      2     |     4
      3   |     1    |      4     |     4
      4   |     2    |      8     |     8
      5   |     1    |      0     |    10
      6   |     1    |      4     |    10
'''
)
t2 = pw.debug.table_from_markdown(
    '''
    value | instance | event_time | __time__
      42  |     1    |      2     |     2
       8  |     2    |     10     |    14
      10  |     2    |      4     |    30
'''
)
result_without_cutoff = t1.interval_join(
    t2,
    t1.event_time,
    t2.event_time,
    pw.temporal.interval(-2, 2),
    t1.instance == t2.instance,
).select(
    left_value=t1.value,
    right_value=t2.value,
    instance=t1.instance,
    left_time=t1.event_time,
    right_time=t2.event_time,
)
pw.debug.compute_and_print_update_stream(result_without_cutoff, include_id=False)
```

Show Code Results

```
left_value | right_value | instance | left_time | right_time | __time__ | __diff__
1          | 42          | 1        | 0         | 2          | 2        | 1
3          | 42          | 1        | 4         | 2          | 4        | 1
5          | 42          | 1        | 0         | 2          | 10       | 1
6          | 42          | 1        | 4         | 2          | 10       | 1
4          | 8           | 2        | 8         | 10         | 14       | 1
2          | 10          | 2        | 2         | 4          | 30       | 1
```

```
result_with_cutoff = t1.interval_join(
    t2,
    t1.event_time,
    t2.event_time,
    pw.temporal.interval(-2, 2),
    t1.instance == t2.instance,
    behavior=pw.temporal.common_behavior(cutoff=6),
).select(
    left_value=t1.value,
    right_value=t2.value,
    instance=t1.instance,
    left_time=t1.event_time,
    right_time=t2.event_time,
)
pw.debug.compute_and_print_update_stream(result_with_cutoff, include_id=False)
```

Show Code Results

```
left_value | right_value | instance | left_time | right_time | __time__ | __diff__
1          | 42          | 1        | 0         | 2          | 2        | 1
3          | 42          | 1        | 4         | 2          | 4        | 1
6          | 42          | 1        | 4         | 2          | 10       | 1
4          | 8           | 2        | 8         | 10         | 14       | 1
```

The record with `value=5` from table `t1` was not joined because its `event_time` was less than the maximal already seen time minus `cutoff` (`0 <= 8-6`). The record with `value=10` from table `t2` was not joined because its `event_time` was equal to the maximal already seen time minus `cutoff` (`4 <= 10-6`).

### [**interval\_join\_inner**(other, self\_time, other\_time, interval, \*on, behavior=None, left\_instance=None, right\_instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.interval_join_inner)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/temporal/_interval_join.py#L778-L974)Performs an interval join of self with other using a time difference and join expressions. If self\_time + lower\_bound <= other\_time <= self\_time + upper\_bound and conditions in on are satisfied, the rows are joined.

*   **Parameters**
    *   **other** ([`Table`](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)) – the right side of a join.
    *   **self\_time** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – time expression in self.
    *   **other\_time** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – time expression in other.
    *   **lower\_bound** – a lower bound on time difference between other\_time and self\_time.
    *   **upper\_bound** – an upper bound on time difference between other\_time and self\_time.
    *   **on** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – a list of column expressions. Each must have == as the top level operation and be of the form LHS: ColumnReference == RHS: ColumnReference.
    *   **behavior** ([`CommonBehavior`](https://pathway.com/developers/api-docs/pathway-stdlib-temporal#pathway.stdlib.temporal.temporal_behavior.CommonBehavior) | `None`) – defines temporal behavior of a join - features like delaying entries or ignoring late entries.
    *   **left\_instance/right\_instance** – optional arguments describing partitioning of the data into separate instances
*   **Returns**  
    _IntervalJoinResult_ – a result of the interval join. A method .select() can be called on it to extract relevant columns from the result of a join.

Examples:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
    | t
  1 | 3
  2 | 4
  3 | 5
  4 | 11
'''
)
t2 = pw.debug.table_from_markdown(
    '''
    | t
  1 | 0
  2 | 1
  3 | 4
  4 | 7
'''
)
t3 = t1.interval_join_inner(t2, t1.t, t2.t, pw.temporal.interval(-2, 1)).select(
    left_t=t1.t, right_t=t2.t
)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
left_t | right_t
3      | 1
3      | 4
4      | 4
5      | 4
```

```
t1 = pw.debug.table_from_markdown(
    '''
    | a | t
  1 | 1 | 3
  2 | 1 | 4
  3 | 1 | 5
  4 | 1 | 11
  5 | 2 | 2
  6 | 2 | 3
  7 | 3 | 4
'''
)
t2 = pw.debug.table_from_markdown(
    '''
    | b | t
  1 | 1 | 0
  2 | 1 | 1
  3 | 1 | 4
  4 | 1 | 7
  5 | 2 | 0
  6 | 2 | 2
  7 | 4 | 2
'''
)
t3 = t1.interval_join_inner(
    t2, t1.t, t2.t, pw.temporal.interval(-2, 1), t1.a == t2.b
).select(t1.a, left_t=t1.t, right_t=t2.t)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
a | left_t | right_t
1 | 3      | 1
1 | 3      | 4
1 | 4      | 4
1 | 5      | 4
2 | 2      | 0
2 | 2      | 2
2 | 3      | 2
```

Setting behavior allows to control temporal behavior of an interval join. Then, each side of the interval join keeps track of the maximal already seen time (self\_time and other\_time). The arguments of behavior mean in the context of an interval join what follows:

*   **delay** - buffers results until the maximal already seen time is greater than or equal to their time plus delay.
*   **cutoff** - ignores records with times less or equal to the maximal already seen time minus cutoff; it is also used to garbage collect records that have times lower or equal to the above threshold. When cutoff is not set, interval join will remember all records from both sides.
*   **keep\_results** - if set to True, keeps all results of the operator. If set to False, keeps only results that are newer than the maximal seen time minus cutoff.

Example without and with forgetting:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
    value | instance | event_time | __time__
      1   |     1    |      0     |     2
      2   |     2    |      2     |     4
      3   |     1    |      4     |     4
      4   |     2    |      8     |     8
      5   |     1    |      0     |    10
      6   |     1    |      4     |    10
'''
)
t2 = pw.debug.table_from_markdown(
    '''
    value | instance | event_time | __time__
      42  |     1    |      2     |     2
       8  |     2    |     10     |    14
      10  |     2    |      4     |    30
'''
)
result_without_cutoff = t1.interval_join_inner(
    t2,
    t1.event_time,
    t2.event_time,
    pw.temporal.interval(-2, 2),
    t1.instance == t2.instance,
).select(
    left_value=t1.value,
    right_value=t2.value,
    instance=t1.instance,
    left_time=t1.event_time,
    right_time=t2.event_time,
)
pw.debug.compute_and_print_update_stream(result_without_cutoff, include_id=False)
```

Show Code Results

```
left_value | right_value | instance | left_time | right_time | __time__ | __diff__
1          | 42          | 1        | 0         | 2          | 2        | 1
3          | 42          | 1        | 4         | 2          | 4        | 1
5          | 42          | 1        | 0         | 2          | 10       | 1
6          | 42          | 1        | 4         | 2          | 10       | 1
4          | 8           | 2        | 8         | 10         | 14       | 1
2          | 10          | 2        | 2         | 4          | 30       | 1
```

```
result_with_cutoff = t1.interval_join_inner(
    t2,
    t1.event_time,
    t2.event_time,
    pw.temporal.interval(-2, 2),
    t1.instance == t2.instance,
    behavior=pw.temporal.common_behavior(cutoff=6),
).select(
    left_value=t1.value,
    right_value=t2.value,
    instance=t1.instance,
    left_time=t1.event_time,
    right_time=t2.event_time,
)
pw.debug.compute_and_print_update_stream(result_with_cutoff, include_id=False)
```

Show Code Results

```
left_value | right_value | instance | left_time | right_time | __time__ | __diff__
1          | 42          | 1        | 0         | 2          | 2        | 1
3          | 42          | 1        | 4         | 2          | 4        | 1
6          | 42          | 1        | 4         | 2          | 10       | 1
4          | 8           | 2        | 8         | 10         | 14       | 1
```

The record with `value=5` from table `t1` was not joined because its `event_time` was less than the maximal already seen time minus `cutoff` (`0 <= 8-6`). The record with `value=10` from table `t2` was not joined because its `event_time` was equal to the maximal already seen time minus `cutoff` (`4 <= 10-6`).

### [**interval\_join\_left**(other, self\_time, other\_time, interval, \*on, behavior=None, left\_instance=None, right\_instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.interval_join_left)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/temporal/_interval_join.py#L977-L1191)Performs an interval left join of self with other using a time difference and join expressions. If self\_time + lower\_bound <= other\_time <= self\_time + upper\_bound and conditions in on are satisfied, the rows are joined. Rows from the left side that haven’t been matched with the right side are returned with missing values on the right side replaced with None.

*   **Parameters**
    *   **other** ([`Table`](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)) – the right side of the join.
    *   **self\_time** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – time expression in self.
    *   **other\_time** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – time expression in other.
    *   **lower\_bound** – a lower bound on time difference between other\_time and self\_time.
    *   **upper\_bound** – an upper bound on time difference between other\_time and self\_time.
    *   **on** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – a list of column expressions. Each must have == as the top level operation and be of the form LHS: ColumnReference == RHS: ColumnReference.
    *   **behavior** ([`CommonBehavior`](https://pathway.com/developers/api-docs/pathway-stdlib-temporal#pathway.stdlib.temporal.temporal_behavior.CommonBehavior) | `None`) – defines temporal behavior of a join - features like delaying entries or ignoring late entries.
    *   **left\_instance/right\_instance** – optional arguments describing partitioning of the data into separate instances
*   **Returns**  
    _IntervalJoinResult_ – a result of the interval join. A method .select() can be called on it to extract relevant columns from the result of a join.

Examples:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
    | t
  1 | 3
  2 | 4
  3 | 5
  4 | 11
'''
)
t2 = pw.debug.table_from_markdown(
    '''
    | t
  1 | 0
  2 | 1
  3 | 4
  4 | 7
'''
)
t3 = t1.interval_join_left(t2, t1.t, t2.t, pw.temporal.interval(-2, 1)).select(
    left_t=t1.t, right_t=t2.t
)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
left_t | right_t
3      | 1
3      | 4
4      | 4
5      | 4
11     |
```

```
t1 = pw.debug.table_from_markdown(
    '''
    | a | t
  1 | 1 | 3
  2 | 1 | 4
  3 | 1 | 5
  4 | 1 | 11
  5 | 2 | 2
  6 | 2 | 3
  7 | 3 | 4
'''
)
t2 = pw.debug.table_from_markdown(
    '''
    | b | t
  1 | 1 | 0
  2 | 1 | 1
  3 | 1 | 4
  4 | 1 | 7
  5 | 2 | 0
  6 | 2 | 2
  7 | 4 | 2
'''
)
t3 = t1.interval_join_left(
    t2, t1.t, t2.t, pw.temporal.interval(-2, 1), t1.a == t2.b
).select(t1.a, left_t=t1.t, right_t=t2.t)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
a | left_t | right_t
1 | 3      | 1
1 | 3      | 4
1 | 4      | 4
1 | 5      | 4
1 | 11     |
2 | 2      | 0
2 | 2      | 2
2 | 3      | 2
3 | 4      |
```

Setting behavior allows to control temporal behavior of an interval join. Then, each side of the interval join keeps track of the maximal already seen time (self\_time and other\_time). The arguments of behavior mean in the context of an interval join what follows:

*   **delay** - buffers results until the maximal already seen time is greater than or equal to their time plus delay.
*   **cutoff** - ignores records with times less or equal to the maximal already seen time minus cutoff; it is also used to garbage collect records that have times lower or equal to the above threshold. When cutoff is not set, interval join will remember all records from both sides.
*   **keep\_results** - if set to True, keeps all results of the operator. If set to False, keeps only results that are newer than the maximal seen time minus cutoff.

Example without and with forgetting:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
    value | instance | event_time | __time__
      1   |     1    |      0     |     2
      2   |     2    |      2     |     4
      3   |     1    |      4     |     4
      4   |     2    |      8     |     8
      5   |     1    |      0     |    10
      6   |     1    |      4     |    10
'''
)
t2 = pw.debug.table_from_markdown(
    '''
    value | instance | event_time | __time__
      42  |     1    |      2     |     2
       8  |     2    |     10     |    14
      10  |     2    |      4     |    30
'''
)
result_without_cutoff = t1.interval_join_left(
    t2,
    t1.event_time,
    t2.event_time,
    pw.temporal.interval(-2, 2),
    t1.instance == t2.instance,
).select(
    left_value=t1.value,
    right_value=t2.value,
    instance=t1.instance,
    left_time=t1.event_time,
    right_time=t2.event_time,
)
pw.debug.compute_and_print_update_stream(result_without_cutoff, include_id=False)
```

Show Code Results

```
left_value | right_value | instance | left_time | right_time | __time__ | __diff__
1          | 42          | 1        | 0         | 2          | 2        | 1
2          |             | 2        | 2         |            | 4        | 1
3          | 42          | 1        | 4         | 2          | 4        | 1
4          |             | 2        | 8         |            | 8        | 1
5          | 42          | 1        | 0         | 2          | 10       | 1
6          | 42          | 1        | 4         | 2          | 10       | 1
4          |             | 2        | 8         |            | 14       | -1
4          | 8           | 2        | 8         | 10         | 14       | 1
2          |             | 2        | 2         |            | 30       | -1
2          | 10          | 2        | 2         | 4          | 30       | 1
```

```
result_with_cutoff = t1.interval_join_left(
    t2,
    t1.event_time,
    t2.event_time,
    pw.temporal.interval(-2, 2),
    t1.instance == t2.instance,
    behavior=pw.temporal.common_behavior(cutoff=6),
).select(
    left_value=t1.value,
    right_value=t2.value,
    instance=t1.instance,
    left_time=t1.event_time,
    right_time=t2.event_time,
)
```

```
pw.debug.compute_and_print_update_stream(result_with_cutoff, include_id=False)
```

Show Code Results

```
left_value | right_value | instance | left_time | right_time | __time__ | __diff__
1          | 42          | 1        | 0         | 2          | 2        | 1
2          |             | 2        | 2         |            | 4        | 1
3          | 42          | 1        | 4         | 2          | 4        | 1
4          |             | 2        | 8         |            | 8        | 1
6          | 42          | 1        | 4         | 2          | 10       | 1
4          |             | 2        | 8         |            | 14       | -1
4          | 8           | 2        | 8         | 10         | 14       | 1
```

The record with `value=5` from table `t1` was not joined because its `event_time` was less than the maximal already seen time minus `cutoff` (`0 <= 8-6`). The record with `value=10` from table `t2` was not joined because its `event_time` was equal to the maximal already seen time minus `cutoff` (`4 <= 10-6`).

Notice also the entries with `__diff__=-1`. They’re deletion entries caused by the arrival of matching entries on the right side of the join. The matches caused the removal of entries without values in the fields from the right side and insertion of entries with values in these fields.

### [**interval\_join\_outer**(other, self\_time, other\_time, interval, \*on, behavior=None, left\_instance=None, right\_instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.interval_join_outer)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/temporal/_interval_join.py#L1400-L1619)Performs an interval outer join of self with other using a time difference and join expressions. If self\_time + lower\_bound <= other\_time <= self\_time + upper\_bound and conditions in on are satisfied, the rows are joined. Rows that haven’t been matched with the other side are returned with missing values on the other side replaced with None.

*   **Parameters**
    *   **other** ([`Table`](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)) – the right side of the join.
    *   **self\_time** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – time expression in self.
    *   **other\_time** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – time expression in other.
    *   **lower\_bound** – a lower bound on time difference between other\_time and self\_time.
    *   **upper\_bound** – an upper bound on time difference between other\_time and self\_time.
    *   **on** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – a list of column expressions. Each must have == as the top level operation and be of the form LHS: ColumnReference == RHS: ColumnReference.
    *   **behavior** ([`CommonBehavior`](https://pathway.com/developers/api-docs/pathway-stdlib-temporal#pathway.stdlib.temporal.temporal_behavior.CommonBehavior) | `None`) – defines temporal behavior of a join - features like delaying entries or ignoring late entries.
    *   **left\_instance/right\_instance** – optional arguments describing partitioning of the data into separate instances
*   **Returns**  
    _IntervalJoinResult_ – a result of the interval join. A method .select() can be called on it to extract relevant columns from the result of a join.

Examples:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
    | t
  1 | 3
  2 | 4
  3 | 5
  4 | 11
'''
)
t2 = pw.debug.table_from_markdown(
    '''
    | t
  1 | 0
  2 | 1
  3 | 4
  4 | 7
'''
)
t3 = t1.interval_join_outer(t2, t1.t, t2.t, pw.temporal.interval(-2, 1)).select(
    left_t=t1.t, right_t=t2.t
)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
left_t | right_t
       | 0
       | 7
3      | 1
3      | 4
4      | 4
5      | 4
11     |
```

```
t1 = pw.debug.table_from_markdown(
    '''
    | a | t
  1 | 1 | 3
  2 | 1 | 4
  3 | 1 | 5
  4 | 1 | 11
  5 | 2 | 2
  6 | 2 | 3
  7 | 3 | 4
'''
)
t2 = pw.debug.table_from_markdown(
    '''
    | b | t
  1 | 1 | 0
  2 | 1 | 1
  3 | 1 | 4
  4 | 1 | 7
  5 | 2 | 0
  6 | 2 | 2
  7 | 4 | 2
'''
)
t3 = t1.interval_join_outer(
    t2, t1.t, t2.t, pw.temporal.interval(-2, 1), t1.a == t2.b
).select(t1.a, left_t=t1.t, right_t=t2.t)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
a | left_t | right_t
  |        | 0
  |        | 2
  |        | 7
1 | 3      | 1
1 | 3      | 4
1 | 4      | 4
1 | 5      | 4
1 | 11     |
2 | 2      | 0
2 | 2      | 2
2 | 3      | 2
3 | 4      |
```

Setting behavior allows to control temporal behavior of an interval join. Then, each side of the interval join keeps track of the maximal already seen time (self\_time and other\_time). The arguments of behavior mean in the context of an interval join what follows:

*   **delay** - buffers results until the maximal already seen time is greater than or equal to their time plus delay.
*   **cutoff** - ignores records with times less or equal to the maximal already seen time minus cutoff; it is also used to garbage collect records that have times lower or equal to the above threshold. When cutoff is not set, interval join will remember all records from both sides.
*   **keep\_results** - if set to True, keeps all results of the operator. If set to False, keeps only results that are newer than the maximal seen time minus cutoff.

Example without and with forgetting:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
    value | instance | event_time | __time__
      1   |     1    |      0     |     2
      2   |     2    |      2     |     4
      3   |     1    |      4     |     4
      4   |     2    |      8     |     8
      5   |     1    |      0     |    10
      6   |     1    |      4     |    10
'''
)
t2 = pw.debug.table_from_markdown(
    '''
    value | instance | event_time | __time__
      42  |     1    |      2     |     2
       8  |     2    |     10     |    14
      10  |     2    |      4     |    30
'''
)
result_without_cutoff = t1.interval_join_outer(
    t2,
    t1.event_time,
    t2.event_time,
    pw.temporal.interval(-2, 2),
    t1.instance == t2.instance,
).select(
    left_value=t1.value,
    right_value=t2.value,
    instance=t1.instance,
    left_time=t1.event_time,
    right_time=t2.event_time,
)
pw.debug.compute_and_print_update_stream(result_without_cutoff, include_id=False)
```

Show Code Results

```
left_value | right_value | instance | left_time | right_time | __time__ | __diff__
1          | 42          | 1        | 0         | 2          | 2        | 1
2          |             | 2        | 2         |            | 4        | 1
3          | 42          | 1        | 4         | 2          | 4        | 1
4          |             | 2        | 8         |            | 8        | 1
5          | 42          | 1        | 0         | 2          | 10       | 1
6          | 42          | 1        | 4         | 2          | 10       | 1
4          |             | 2        | 8         |            | 14       | -1
4          | 8           | 2        | 8         | 10         | 14       | 1
2          |             | 2        | 2         |            | 30       | -1
2          | 10          | 2        | 2         | 4          | 30       | 1
```

```
result_with_cutoff = t1.interval_join_outer(
    t2,
    t1.event_time,
    t2.event_time,
    pw.temporal.interval(-2, 2),
    t1.instance == t2.instance,
    behavior=pw.temporal.common_behavior(cutoff=6),
).select(
    left_value=t1.value,
    right_value=t2.value,
    instance=t1.instance,
    left_time=t1.event_time,
    right_time=t2.event_time,
)
```

```
pw.debug.compute_and_print_update_stream(result_with_cutoff, include_id=False)
```

Show Code Results

```
left_value | right_value | instance | left_time | right_time | __time__ | __diff__
1          | 42          | 1        | 0         | 2          | 2        | 1
2          |             | 2        | 2         |            | 4        | 1
3          | 42          | 1        | 4         | 2          | 4        | 1
4          |             | 2        | 8         |            | 8        | 1
6          | 42          | 1        | 4         | 2          | 10       | 1
4          |             | 2        | 8         |            | 14       | -1
4          | 8           | 2        | 8         | 10         | 14       | 1
```

The record with `value=5` from table `t1` was not joined because its `event_time` was less than the maximal already seen time minus `cutoff` (`0 <= 8-6`). The record with `value=10` from table `t2` was not joined because its `event_time` was equal to the maximal already seen time minus `cutoff` (`4 <= 10-6`).

Notice also the entries with `__diff__=-1`. They’re deletion entries caused by the arrival of matching entries on the right side of the join. The matches caused the removal of entries without values in the fields from the right side and insertion of entries with values in these fields.

### [**interval\_join\_right**(other, self\_time, other\_time, interval, \*on, behavior=None, left\_instance=None, right\_instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.interval_join_right)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/temporal/_interval_join.py#L1194-L1397)Performs an interval right join of self with other using a time difference and join expressions. If self\_time + lower\_bound <= other\_time <= self\_time + upper\_bound and conditions in on are satisfied, the rows are joined. Rows from the right side that haven’t been matched with the left side are returned with missing values on the left side replaced with None.

*   **Parameters**
    *   **other** ([`Table`](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)) – the right side of the join.
    *   **self\_time** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – time expression in self.
    *   **other\_time** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – time expression in other.
    *   **lower\_bound** – a lower bound on time difference between other\_time and self\_time.
    *   **upper\_bound** – an upper bound on time difference between other\_time and self\_time.
    *   **on** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – a list of column expressions. Each must have == as the top level operation and be of the form LHS: ColumnReference == RHS: ColumnReference.
    *   **behavior** ([`CommonBehavior`](https://pathway.com/developers/api-docs/pathway-stdlib-temporal#pathway.stdlib.temporal.temporal_behavior.CommonBehavior) | `None`) – defines temporal behavior of a join - features like delaying entries or ignoring late entries.
    *   **left\_instance/right\_instance** – optional arguments describing partitioning of the data into separate instances
*   **Returns**  
    _IntervalJoinResult_ – a result of the interval join. A method .select() can be called on it to extract relevant columns from the result of a join.

Examples:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
    | t
  1 | 3
  2 | 4
  3 | 5
  4 | 11
'''
)
t2 = pw.debug.table_from_markdown(
    '''
    | t
  1 | 0
  2 | 1
  3 | 4
  4 | 7
'''
)
t3 = t1.interval_join_right(t2, t1.t, t2.t, pw.temporal.interval(-2, 1)).select(
    left_t=t1.t, right_t=t2.t
)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
left_t | right_t
       | 0
       | 7
3      | 1
3      | 4
4      | 4
5      | 4
```

```
t1 = pw.debug.table_from_markdown(
    '''
    | a | t
  1 | 1 | 3
  2 | 1 | 4
  3 | 1 | 5
  4 | 1 | 11
  5 | 2 | 2
  6 | 2 | 3
  7 | 3 | 4
'''
)
t2 = pw.debug.table_from_markdown(
    '''
    | b | t
  1 | 1 | 0
  2 | 1 | 1
  3 | 1 | 4
  4 | 1 | 7
  5 | 2 | 0
  6 | 2 | 2
  7 | 4 | 2
'''
)
t3 = t1.interval_join_right(
    t2, t1.t, t2.t, pw.temporal.interval(-2, 1), t1.a == t2.b
).select(t1.a, left_t=t1.t, right_t=t2.t)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
a | left_t | right_t
  |        | 0
  |        | 2
  |        | 7
1 | 3      | 1
1 | 3      | 4
1 | 4      | 4
1 | 5      | 4
2 | 2      | 0
2 | 2      | 2
2 | 3      | 2
```

Setting behavior allows to control temporal behavior of an interval join. Then, each side of the interval join keeps track of the maximal already seen time (self\_time and other\_time). The arguments of behavior mean in the context of an interval join what follows:

*   **delay** - buffers results until the maximal already seen time is greater than or equal to their time plus delay.
*   **cutoff** - ignores records with times less or equal to the maximal already seen time minus cutoff; it is also used to garbage collect records that have times lower or equal to the above threshold. When cutoff is not set, interval join will remember all records from both sides.
*   **keep\_results** - if set to True, keeps all results of the operator. If set to False, keeps only results that are newer than the maximal seen time minus cutoff.

Example without and with forgetting:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
    value | instance | event_time | __time__
      1   |     1    |      0     |     2
      2   |     2    |      2     |     4
      3   |     1    |      4     |     4
      4   |     2    |      8     |     8
      5   |     1    |      0     |    10
      6   |     1    |      4     |    10
'''
)
t2 = pw.debug.table_from_markdown(
    '''
    value | instance | event_time | __time__
      42  |     1    |      2     |     2
       8  |     2    |     10     |    14
      10  |     2    |      4     |    30
'''
)
result_without_cutoff = t1.interval_join_right(
    t2,
    t1.event_time,
    t2.event_time,
    pw.temporal.interval(-2, 2),
    t1.instance == t2.instance,
).select(
    left_value=t1.value,
    right_value=t2.value,
    instance=t1.instance,
    left_time=t1.event_time,
    right_time=t2.event_time,
)
pw.debug.compute_and_print_update_stream(result_without_cutoff, include_id=False)
```

Show Code Results

```
left_value | right_value | instance | left_time | right_time | __time__ | __diff__
1          | 42          | 1        | 0         | 2          | 2        | 1
3          | 42          | 1        | 4         | 2          | 4        | 1
5          | 42          | 1        | 0         | 2          | 10       | 1
6          | 42          | 1        | 4         | 2          | 10       | 1
4          | 8           | 2        | 8         | 10         | 14       | 1
2          | 10          | 2        | 2         | 4          | 30       | 1
```

```
result_with_cutoff = t1.interval_join_right(
    t2,
    t1.event_time,
    t2.event_time,
    pw.temporal.interval(-2, 2),
    t1.instance == t2.instance,
    behavior=pw.temporal.common_behavior(cutoff=6),
).select(
    left_value=t1.value,
    right_value=t2.value,
    instance=t1.instance,
    left_time=t1.event_time,
    right_time=t2.event_time,
)
pw.debug.compute_and_print_update_stream(result_with_cutoff, include_id=False)
```

Show Code Results

```
left_value | right_value | instance | left_time | right_time | __time__ | __diff__
1          | 42          | 1        | 0         | 2          | 2        | 1
3          | 42          | 1        | 4         | 2          | 4        | 1
6          | 42          | 1        | 4         | 2          | 10       | 1
4          | 8           | 2        | 8         | 10         | 14       | 1
```

The record with `value=5` from table `t1` was not joined because its `event_time` was less than the maximal already seen time minus `cutoff` (`0 <= 8-6`). The record with `value=10` from table `t2` was not joined because its `event_time` was equal to the maximal already seen time minus `cutoff` (`4 <= 10-6`).

### [**ix**(expression, \*, optional=False, context=None, allow\_misses=False)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.ix)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L1163-L1273)Reindexes the table using expression values as keys. Uses keys from context, or tries to infer proper context from the expression. If optional is True, then None in expression values result in None values in the result columns. Missing values in table keys result in RuntimeError. If `allow_misses` is set to True, they result in None value on the output.

Context can be anything that allows for select or reduce, or pathway.this construct (latter results in returning a delayed operation, and should be only used when using ix inside join().select() or groupby().reduce() sequence).

*   **Returns**  
    Reindexed table with the same set of columns.

Example:

```
import pathway as pw
t_animals = pw.debug.table_from_markdown('''
  | epithet    | genus
1 | upupa      | epops
2 | acherontia | atropos
3 | bubo       | scandiacus
4 | dynastes   | hercules
''')
t_birds = pw.debug.table_from_markdown('''
  | desc
2 | hoopoe
4 | owl
''')
ret = t_birds.select(t_birds.desc, latin=t_animals.ix(t_birds.id).genus)
pw.debug.compute_and_print(ret, include_id=False)
```

Show Code Results

```
desc   | latin
hoopoe | atropos
owl    | hercules
```

### [**ix\_ref**(\*args, optional=False, context=None, instance=None, allow\_misses=False)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.ix_ref)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L2399-L2487)Reindexes the table using expressions as primary keys. Uses keys from context, or tries to infer proper context from the expression. If `optional` is True, then None in expression values result in None values in the result columns. Missing values in table keys result in RuntimeError. If `allow_misses` is set to True, they result in None value on the output.

Context can be anything that allows for select or reduce, or pathway.this construct (latter results in returning a delayed operation, and should be only used when using ix inside join().select() or groupby().reduce() sequence).

*   **Parameters**  
    **args** (`Union`\[[`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression), `None`, `int`, `float`, `str`, `bytes`, `bool`, `Pointer`, `datetime`, `timedelta`, `ndarray`, [`Json`](https://pathway.com/developers/api-docs/pathway#pathway.Json), `dict`\[`str`, `Any`\], `tuple`\[`Any`, `...`\], `Error`\]) – Column references.
*   **Returns**  
    _Row_ – indexed row.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
name   | pet
Alice  | dog
Bob    | cat
Carole | cat
David  | dog
''')
t2 = t1.with_id_from(pw.this.name)
t2 = t2.select(*pw.this, new_value=pw.this.ix_ref("Alice").pet)
pw.debug.compute_and_print(t2, include_id=False)
```

Show Code Results

```
name   | pet | new_value
Alice  | dog | dog
Bob    | cat | dog
Carole | cat | dog
David  | dog | dog
```

Tables obtained by a groupby/reduce scheme always have primary keys:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
name   | pet
Alice  | dog
Bob    | cat
Carole | cat
David  | cat
''')
t2 = t1.groupby(pw.this.pet).reduce(pw.this.pet, count=pw.reducers.count())
t3 = t1.select(*pw.this, new_value=t2.ix_ref(t1.pet).count)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
name   | pet | new_value
Alice  | dog | 1
Bob    | cat | 3
Carole | cat | 3
David  | cat | 3
```

Single-row tables can be accessed via ix\_ref():

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
name   | pet
Alice  | dog
Bob    | cat
Carole | cat
David  | cat
''')
t2 = t1.reduce(count=pw.reducers.count())
t3 = t1.select(*pw.this, new_value=t2.ix_ref(context=t1).count)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
name   | pet | new_value
Alice  | dog | 4
Bob    | cat | 4
Carole | cat | 4
David  | cat | 4
```

### [**plot**(plotting\_function, sorting\_col=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.plot)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/viz/plotting.py#L33-L138)Allows for plotting contents of the table visually in e.g. jupyter. If the table depends only on the bounded data sources, the plot will be generated right away. Otherwise (in streaming scenario), the plot will be auto-updating after running pw.run()

*   **Parameters**
    *   **self** (`pw.Table`) – a table serving as a source of data
    *   **plotting\_function** (`Callable[[ColumnDataSource], Plot]`) – function for creating plot from ColumnDataSource
*   **Returns**  
    _pn.Column_ – visualization which can be displayed immediately or passed as a dashboard widget

Example:

```
import pathway as pw
from bokeh.plotting import figure
def func(source):
    plot = figure(height=400, width=400, title="CPU usage over time")
    plot.scatter('a', 'b', source=source, line_width=3, line_alpha=0.6)
    return plot
viz = pw.debug.table_from_pandas(pd.DataFrame({"a":[1,2,3],"b":[3,1,2]})).plot(func)
type(viz)
```

Show Code Results

```
<class 'panel.layout.base.Column'>
```

### [**pointer\_from**(\*args, optional=False, instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.pointer_from)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L2370-L2397)Pseudo-random hash of its argument. Produces pointer types. Applied column-wise.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
   age  owner  pet
1   10  Alice  dog
2    9    Bob  dog
3    8  Alice  cat
4    7    Bob  dog''')
g = t1.groupby(t1.owner).reduce(refcol = t1.pointer_from(t1.owner)) # g.id == g.refcol
pw.debug.compute_and_print(g.select(test = (g.id == g.refcol)), include_id=False)
```

Show Code Results

```
test
True
True
```

### [**reduce**(\*args, \*\*kwargs)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.reduce)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L1022-L1058)Reduce a table to a single row.

Equivalent to self.groupby().reduce(\*args, \*\*kwargs).

*   **Parameters**
    *   **args** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference)) – reducer to reduce the table with
    *   **kwargs** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – reducer to reduce the table with. Its key is the new name of a column.
*   **Returns**  
    _Table_ – Reduced table.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
age | owner | pet
10  | Alice | dog
9   | Bob   | dog
8   | Alice | cat
7   | Bob   | dog
''')
t2 = t1.reduce(ageagg=pw.reducers.argmin(t1.age))
pw.debug.compute_and_print(t2, include_id=False)
```

Show Code Results

```
ageagg
^...
```

```
t3 = t2.select(t1.ix(t2.ageagg).age, t1.ix(t2.ageagg).pet)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
age | pet
7   | dog
```

### [**remove\_errors**()](https://pathway.com/developers/api-docs/pathway/#pathway.Table.remove_errors)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L2489-L2515)Filters out rows that contain errors.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
    a | b
    3 | 3
    4 | 0
    5 | 5
    6 | 2
'''
)
t2 = t1.with_columns(x=pw.this.a // pw.this.b)
res = t2.remove_errors()
pw.debug.compute_and_print(res, include_id=False, terminate_on_error=False)
```

Show Code Results

```
a | b | x
3 | 3 | 1
5 | 5 | 1
6 | 2 | 3
```

### [**rename**(names\_mapping=None, \*\*kwargs)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.rename)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L1893-L1915)Rename columns according either a dictionary or kwargs.

If a mapping is provided using a dictionary, `rename_by_dict` will be used. Otherwise, `rename_columns` will be used with kwargs. Columns not in keys(kwargs) are not changed. New name of a column must not be `id`.

*   **Parameters**
    *   **names\_mapping** (`dict`\[`str` | [`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference), `str`\] | `None`) – mapping from old column names to new names.
    *   **kwargs** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – mapping from old column names to new names.
*   **Returns**  
    _Table_ – self with columns renamed.

### [**rename\_by\_dict**(names\_mapping)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.rename_by_dict)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L1815-L1847)Rename columns according to a dictionary.

Columns not in keys(kwargs) are not changed. New name of a column must not be id.

*   **Parameters**  
    **names\_mapping** (`dict`\[`str` | [`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference), `str`\]) – mapping from old column names to new names.
*   **Returns**  
    _Table_ – self with columns renamed.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
age | owner | pet
10  | Alice | 1
9   | Bob   | 1
8   | Alice | 2
''')
t2 = t1.rename_by_dict({"age": "years_old", t1.pet: "animal"})
pw.debug.compute_and_print(t2, include_id=False)
```

Show Code Results

```
owner | years_old | animal
Alice | 8         | 2
Alice | 10        | 1
Bob   | 9         | 1
```

### [**rename\_columns**(\*\*kwargs)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.rename_columns)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L1759-L1813)Rename columns according to kwargs.

Columns not in keys(kwargs) are not changed. New name of a column must not be id.

*   **Parameters**  
    **kwargs** (`str` | [`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference)) – mapping from old column names to new names.
*   **Returns**  
    _Table_ – self with columns renamed.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
age | owner | pet
10  | Alice | 1
9   | Bob   | 1
8   | Alice | 2
''')
t2 = t1.rename_columns(years_old=t1.age, animal=t1.pet)
pw.debug.compute_and_print(t2, include_id=False)
```

Show Code Results

```
owner | years_old | animal
Alice | 8         | 2
Alice | 10        | 1
Bob   | 9         | 1
```

### [**restrict**(other)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.restrict)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L836-L886)Restrict self universe to keys appearing in other.

*   **Parameters**  
    **other** ([`TableLike`](https://pathway.com/developers/api-docs/pathway#pathway.TableLike)) – table which universe is used to restrict universe of self.
*   **Returns**  
    _Table_ – table with restricted universe, with the same set of columns

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
  | age  | owner  | pet
1 | 10   | Alice  | 1
2 | 9    | Bob    | 1
3 | 8    | Alice  | 2
'''
)
t2 = pw.debug.table_from_markdown(
    '''
  | cost
2 | 100
3 | 200
'''
)
t2.promise_universe_is_subset_of(t1)
```

Show Code Results

```
<pathway.Table schema={'cost': <class 'int'>}>
```

```
t3 = t1.restrict(t2)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
age | owner | pet
8   | Alice | 2
9   | Bob   | 1
```

### [**select**(\*args, \*\*kwargs)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.select)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L378-L421)Build a new table with columns specified by kwargs.

Output columns’ names are keys(kwargs). values(kwargs) can be raw values, boxed values, columns. Assigning to id reindexes the table.

*   **Parameters**
    *   **args** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference)) – Column references.
    *   **kwargs** (`Any`) – Column expressions with their new assigned names.
*   **Returns**  
    _Table_ – Created table.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
pet
Dog
Cat
''')
t2 = t1.select(animal=t1.pet, desc="fluffy")
pw.debug.compute_and_print(t2, include_id=False)
```

Show Code Results

```
animal | desc
Cat    | fluffy
Dog    | fluffy
```

### [**show**(\*, snapshot=True, include\_id=True, short\_pointers=True, sorters=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.show)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/viz/table_viz.py#L24-L165)Allows for displaying table visually in e.g. jupyter. If the table depends only on the bounded data sources, the table preview will be generated right away. Otherwise (in streaming scenario), the table will be auto-updating after running pw.run()

*   **Parameters**
    *   **self** (`pw.Table`) – a table to be displayed
    *   **snapshot** (`bool, optional`) – whether only current snapshot or all changes to the table should be displayed. Defaults to True.
    *   **include\_id** (`bool, optional`) – whether to show ids of rows. Defaults to True.
    *   **short\_pointers** (`bool, optional`) – whether to shorten printed ids. Defaults to True.
*   **Returns**  
    _pn.Column_ – visualization which can be displayed immediately or passed as a dashboard widget

Example:

```
import pathway as pw
table_viz = pw.debug.table_from_pandas(pd.DataFrame({"a":[1,2,3],"b":[3,1,2]})).show()
type(table_viz)
```

Show Code Results

```
<class 'panel.layout.base.Column'>
```

### [**sort**(key, instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.sort)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L2153-L2224)Sorts a table by the specified keys.

*   **Parameters**
    *   **table** – pw.Table The table to be sorted.
    *   **key** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)`[int | float | datetime | str | bytes]`) – An expression to sort by.
    *   **instance** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression) | `None`) – ColumnReference or None An expression with instance. Rows are sorted within an instance. `prev` and `next` columns will only point to rows that have the same instance.
*   **Returns**  
    _pw.Table_ – The sorted table. Contains two columns: `prev` and `next`, containing the pointers to the previous and next rows.

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown('''
name     | age | score
Alice    | 25  | 80
Bob      | 20  | 90
Charlie  | 30  | 80
''')
table = table.with_id_from(pw.this.name)
table += table.sort(key=pw.this.age)
pw.debug.compute_and_print(table, include_id=True)
```

Show Code Results

```
            | name    | age | score | prev        | next
^GBSDEEW... | Alice   | 25  | 80    | ^EDPSSB1... | ^DS9AT95...
^EDPSSB1... | Bob     | 20  | 90    |             | ^GBSDEEW...
^DS9AT95... | Charlie | 30  | 80    | ^GBSDEEW... |
```

```
table = pw.debug.table_from_markdown('''
name     | age | score
Alice    | 25  | 80
Bob      | 20  | 90
Charlie  | 30  | 80
David    | 35  | 90
Eve      | 15  | 80
''')
table = table.with_id_from(pw.this.name)
table += table.sort(key=pw.this.age, instance=pw.this.score)
pw.debug.compute_and_print(table, include_id=True)
```

Show Code Results

```
            | name    | age | score | prev        | next
^GBSDEEW... | Alice   | 25  | 80    | ^T0B95XH... | ^DS9AT95...
^EDPSSB1... | Bob     | 20  | 90    |             | ^RT0AZWX...
^DS9AT95... | Charlie | 30  | 80    | ^GBSDEEW... |
^RT0AZWX... | David   | 35  | 90    | ^EDPSSB1... |
^T0B95XH... | Eve     | 15  | 80    |             | ^GBSDEEW...
```

### [**split**(split\_expression)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.split)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L528-L568)Split a table according to split\_expression condition.

*   **Parameters**  
    **split\_expression** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – ColumnExpression that specifies the split condition.
*   **Returns**  
    _positive\_table, negative\_table_ – tuple of tables, with the same schemas as self and with ids that are subsets of self.id, and provably disjoint.

Example:

```
import pathway as pw
vertices = pw.debug.table_from_markdown('''
label outdegree
    1         3
    7         0
''')
positive, negative = vertices.split(vertices.outdegree == 0)
pw.debug.compute_and_print(positive, include_id=False)
```

Show Code Results

```
label | outdegree
7     | 0
```

```
pw.debug.compute_and_print(negative, include_id=False)
```

Show Code Results

```
label | outdegree
1     | 3
```

### [**typehints**()](https://pathway.com/developers/api-docs/pathway/#pathway.Table.typehints)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L2530-L2547)Return the types of the columns as a dictionary.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
age | owner | pet
10  | Alice | dog
9   | Bob   | dog
8   | Alice | cat
7   | Bob   | dog
''')
t1.typehints()
```

Show Code Results

```
mappingproxy({'age': <class 'int'>, 'owner': <class 'str'>, 'pet': <class 'str'>})
```

### [**update\_cells**(other, )](https://pathway.com/developers/api-docs/pathway/#pathway.Table.update_cells)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L1437-L1502)Updates cells of self, breaking ties in favor of the values in other.

Semantics:

```
* result.columns == self.columns

* result.id == self.id

* conflicts are resolved preferring other’s values
```

Requires:

```
* other.columns ⊆ self.columns

* other.id ⊆ self.id
```

*   **Parameters**  
    **other** ([`Table`](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)) – the other table.
*   **Returns**  
    _Table_ – self updated with cells form other.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
  | age | owner | pet
1 | 10  | Alice | 1
2 | 9   | Bob   | 1
3 | 8   | Alice | 2
''')
t2 = pw.debug.table_from_markdown('''
    age | owner | pet
1 | 10  | Alice | 30
''')
pw.universes.promise_is_subset_of(t2, t1)
t3 = t1.update_cells(t2)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
age | owner | pet
8   | Alice | 2
9   | Bob   | 1
10  | Alice | 30
```

### [**update\_rows**(other)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.update_rows)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L1522-L1598)Updates rows of self, breaking ties in favor for the rows in other.

Semantics:

*   result.columns == self.columns == other.columns
*   result.id == self.id ∪ other.id

Requires:

*   other.columns == self.columns

*   **Parameters**  
    **other** ([`Table`](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)\[`TypeVar`(`TSchema`, bound= [`Schema`](https://pathway.com/developers/api-docs/pathway#pathway.Schema))\]) – the other table.
*   **Returns**  
    _Table_ – self updated with rows form other.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
  | age | owner | pet
1 | 10  | Alice | 1
2 | 9   | Bob   | 1
3 | 8   | Alice | 2
''')
t2 = pw.debug.table_from_markdown('''
   | age | owner | pet
1  | 10  | Alice | 30
12 | 12  | Tom   | 40
''')
t3 = t1.update_rows(t2)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
age | owner | pet
8   | Alice | 2
9   | Bob   | 1
10  | Alice | 30
12  | Tom   | 40
```

### [**update\_types**(\*\*kwargs)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.update_types)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L1978-L1999)Updates types in schema. Has no effect on the runtime.

### [**window\_join**(other, self\_time, other\_time, window, \*on, how=JoinMode.INNER, left\_instance=None, right\_instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.window_join)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/temporal/_window_join.py#L152-L353)Performs a window join of self with other using a window and join expressions. If two records belong to the same window and meet the conditions specified in the on clause, they will be joined. Note that if a sliding window is used and there are pairs of matching records that appear in more than one window, they will be included in the result multiple times (equal to the number of windows they appear in).

When using a session window, the function creates sessions by concatenating records from both sides of a join. Only pairs of records that meet the conditions specified in the on clause can be part of the same session. The result of a given session will include all records from the left side of a join that belong to this session, joined with all records from the right side of a join that belong to this session.

*   **Parameters**
    *   **other** ([`Table`](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)) – the right side of a join.
    *   **self\_time** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – time expression in self.
    *   **other\_time** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – time expression in other.
    *   **window** ([`Window`](https://pathway.com/developers/api-docs/pathway-stdlib-temporal#pathway.stdlib.temporal.Window)) – a window to use.
    *   **on** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – a list of column expressions. Each must have == on the top level operation and be of the form LHS: ColumnReference == RHS: ColumnReference.
    *   **how** ([`JoinMode`](https://pathway.com/developers/api-docs/pathway#pathway.JoinMode)) – decides whether to run window\_join\_inner, window\_join\_left, window\_join\_right or window\_join\_outer. Default is INNER.
    *   **left\_instance/right\_instance** – optional arguments describing partitioning of the data into separate instances
*   **Returns**  
    _WindowJoinResult_ – a result of the window join. A method .select() can be called on it to extract relevant columns from the result of a join.

Examples:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
    | t
  1 | 1
  2 | 2
  3 | 3
  4 | 7
  5 | 13
'''
)
t2 = pw.debug.table_from_markdown(
    '''
    | t
  1 | 2
  2 | 5
  3 | 6
  4 | 7
'''
)
t3 = t1.window_join(t2, t1.t, t2.t, pw.temporal.tumbling(2)).select(
    left_t=t1.t, right_t=t2.t
)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
left_t | right_t
2      | 2
3      | 2
7      | 6
7      | 7
```

```
t4 = t1.window_join(t2, t1.t, t2.t, pw.temporal.sliding(1, 2)).select(
    left_t=t1.t, right_t=t2.t
)
pw.debug.compute_and_print(t4, include_id=False)
```

Show Code Results

```
left_t | right_t
1      | 2
2      | 2
2      | 2
3      | 2
7      | 6
7      | 7
7      | 7
```

```
t1 = pw.debug.table_from_markdown(
    '''
    | a | t
  1 | 1 | 1
  2 | 1 | 2
  3 | 1 | 3
  4 | 1 | 7
  5 | 1 | 13
  6 | 2 | 1
  7 | 2 | 2
  8 | 3 | 4
'''
)
t2 = pw.debug.table_from_markdown(
    '''
    | b | t
  1 | 1 | 2
  2 | 1 | 5
  3 | 1 | 6
  4 | 1 | 7
  5 | 2 | 2
  6 | 2 | 3
  7 | 4 | 3
'''
)
t3 = t1.window_join(t2, t1.t, t2.t, pw.temporal.tumbling(2), t1.a == t2.b).select(
    key=t1.a, left_t=t1.t, right_t=t2.t
)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
key | left_t | right_t
1   | 2      | 2
1   | 3      | 2
1   | 7      | 6
1   | 7      | 7
2   | 2      | 2
2   | 2      | 3
```

```
t1 = pw.debug.table_from_markdown(
    '''
      | t
    0 | 0
    1 | 5
    2 | 10
    3 | 15
    4 | 17
'''
)
t2 = pw.debug.table_from_markdown(
    '''
      | t
    0 | -3
    1 | 2
    2 | 3
    3 | 6
    4 | 16
'''
)
t3 = t1.window_join(
    t2, t1.t, t2.t, pw.temporal.session(predicate=lambda a, b: abs(a - b) <= 2)
).select(left_t=t1.t, right_t=t2.t)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
left_t | right_t
0      | 2
0      | 3
0      | 6
5      | 2
5      | 3
5      | 6
15     | 16
17     | 16
```

```
t1 = pw.debug.table_from_markdown(
    '''
    | a | t
  1 | 1 | 1
  2 | 1 | 4
  3 | 1 | 7
  4 | 2 | 0
  5 | 2 | 3
  6 | 2 | 4
  7 | 2 | 7
  8 | 3 | 4
'''
)
t2 = pw.debug.table_from_markdown(
    '''
    | b | t
  1 | 1 | -1
  2 | 1 | 6
  3 | 2 | 2
  4 | 2 | 10
  5 | 4 | 3
'''
)
t3 = t1.window_join(
    t2, t1.t, t2.t, pw.temporal.session(predicate=lambda a, b: abs(a - b) <= 2), t1.a == t2.b
).select(key=t1.a, left_t=t1.t, right_t=t2.t)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
key | left_t | right_t
1   | 1      | -1
1   | 4      | 6
1   | 7      | 6
2   | 0      | 2
2   | 3      | 2
2   | 4      | 2
```

### [**window\_join\_inner**(other, self\_time, other\_time, window, \*on, left\_instance=None, right\_instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.window_join_inner)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/temporal/_window_join.py#L356-L554)Performs a window join of self with other using a window and join expressions. If two records belong to the same window and meet the conditions specified in the on clause, they will be joined. Note that if a sliding window is used and there are pairs of matching records that appear in more than one window, they will be included in the result multiple times (equal to the number of windows they appear in).

When using a session window, the function creates sessions by concatenating records from both sides of a join. Only pairs of records that meet the conditions specified in the on clause can be part of the same session. The result of a given session will include all records from the left side of a join that belong to this session, joined with all records from the right side of a join that belong to this session.

*   **Parameters**
    *   **other** ([`Table`](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)) – the right side of a join.
    *   **self\_time** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – time expression in self.
    *   **other\_time** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – time expression in other.
    *   **window** ([`Window`](https://pathway.com/developers/api-docs/pathway-stdlib-temporal#pathway.stdlib.temporal.Window)) – a window to use.
    *   **on** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – a list of column expressions. Each must have == on the top level operation and be of the form LHS: ColumnReference == RHS: ColumnReference.
    *   **left\_instance/right\_instance** – optional arguments describing partitioning of the data into separate instances
*   **Returns**  
    _WindowJoinResult_ – a result of the window join. A method .select() can be called on it to extract relevant columns from the result of a join.

Examples:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
    | t
  1 | 1
  2 | 2
  3 | 3
  4 | 7
  5 | 13
'''
)
t2 = pw.debug.table_from_markdown(
    '''
    | t
  1 | 2
  2 | 5
  3 | 6
  4 | 7
'''
)
t3 = t1.window_join_inner(t2, t1.t, t2.t, pw.temporal.tumbling(2)).select(
    left_t=t1.t, right_t=t2.t
)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
left_t | right_t
2      | 2
3      | 2
7      | 6
7      | 7
```

```
t4 = t1.window_join_inner(t2, t1.t, t2.t, pw.temporal.sliding(1, 2)).select(
    left_t=t1.t, right_t=t2.t
)
pw.debug.compute_and_print(t4, include_id=False)
```

Show Code Results

```
left_t | right_t
1      | 2
2      | 2
2      | 2
3      | 2
7      | 6
7      | 7
7      | 7
```

```
t1 = pw.debug.table_from_markdown(
    '''
    | a | t
  1 | 1 | 1
  2 | 1 | 2
  3 | 1 | 3
  4 | 1 | 7
  5 | 1 | 13
  6 | 2 | 1
  7 | 2 | 2
  8 | 3 | 4
'''
)
t2 = pw.debug.table_from_markdown(
    '''
    | b | t
  1 | 1 | 2
  2 | 1 | 5
  3 | 1 | 6
  4 | 1 | 7
  5 | 2 | 2
  6 | 2 | 3
  7 | 4 | 3
'''
)
t3 = t1.window_join_inner(t2, t1.t, t2.t, pw.temporal.tumbling(2), t1.a == t2.b).select(
    key=t1.a, left_t=t1.t, right_t=t2.t
)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
key | left_t | right_t
1   | 2      | 2
1   | 3      | 2
1   | 7      | 6
1   | 7      | 7
2   | 2      | 2
2   | 2      | 3
```

```
t1 = pw.debug.table_from_markdown(
    '''
      | t
    0 | 0
    1 | 5
    2 | 10
    3 | 15
    4 | 17
'''
)
t2 = pw.debug.table_from_markdown(
    '''
      | t
    0 | -3
    1 | 2
    2 | 3
    3 | 6
    4 | 16
'''
)
t3 = t1.window_join_inner(
    t2, t1.t, t2.t, pw.temporal.session(predicate=lambda a, b: abs(a - b) <= 2)
).select(left_t=t1.t, right_t=t2.t)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
left_t | right_t
0      | 2
0      | 3
0      | 6
5      | 2
5      | 3
5      | 6
15     | 16
17     | 16
```

```
t1 = pw.debug.table_from_markdown(
    '''
    | a | t
  1 | 1 | 1
  2 | 1 | 4
  3 | 1 | 7
  4 | 2 | 0
  5 | 2 | 3
  6 | 2 | 4
  7 | 2 | 7
  8 | 3 | 4
'''
)
t2 = pw.debug.table_from_markdown(
    '''
    | b | t
  1 | 1 | -1
  2 | 1 | 6
  3 | 2 | 2
  4 | 2 | 10
  5 | 4 | 3
'''
)
t3 = t1.window_join_inner(
    t2, t1.t, t2.t, pw.temporal.session(predicate=lambda a, b: abs(a - b) <= 2), t1.a == t2.b
).select(key=t1.a, left_t=t1.t, right_t=t2.t)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
key | left_t | right_t
1   | 1      | -1
1   | 4      | 6
1   | 7      | 6
2   | 0      | 2
2   | 3      | 2
2   | 4      | 2
```

### [**window\_join\_left**(other, self\_time, other\_time, window, \*on, left\_instance=None, right\_instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.window_join_left)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/temporal/_window_join.py#L557-L774)Performs a window left join of self with other using a window and join expressions. If two records belong to the same window and meet the conditions specified in the on clause, they will be joined. Note that if a sliding window is used and there are pairs of matching records that appear in more than one window, they will be included in the result multiple times (equal to the number of windows they appear in).

When using a session window, the function creates sessions by concatenating records from both sides of a join. Only pairs of records that meet the conditions specified in the on clause can be part of the same session. The result of a given session will include all records from the left side of a join that belong to this session, joined with all records from the right side of a join that belong to this session.

Rows from the left side that didn’t match with any record on the right side in a given window, are returned with missing values on the right side replaced with None. The multiplicity of such rows equals the number of windows they belong to and don’t have a match in them.

*   **Parameters**
    *   **other** ([`Table`](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)) – the right side of a join.
    *   **self\_time** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – time expression in self.
    *   **other\_time** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – time expression in other.
    *   **window** ([`Window`](https://pathway.com/developers/api-docs/pathway-stdlib-temporal#pathway.stdlib.temporal.Window)) – a window to use.
    *   **on** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – a list of column expressions. Each must have == on the top level operation and be of the form LHS: ColumnReference == RHS: ColumnReference.
    *   **left\_instance/right\_instance** – optional arguments describing partitioning of the data into separate instances
*   **Returns**  
    _WindowJoinResult_ – a result of the window join. A method .select() can be called on it to extract relevant columns from the result of a join.

Examples:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
    | t
  1 | 1
  2 | 2
  3 | 3
  4 | 7
  5 | 13
'''
)
t2 = pw.debug.table_from_markdown(
    '''
    | t
  1 | 2
  2 | 5
  3 | 6
  4 | 7
'''
)
t3 = t1.window_join_left(t2, t1.t, t2.t, pw.temporal.tumbling(2)).select(
    left_t=t1.t, right_t=t2.t
)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
left_t | right_t
1      |
2      | 2
3      | 2
7      | 6
7      | 7
13     |
```

```
t4 = t1.window_join_left(t2, t1.t, t2.t, pw.temporal.sliding(1, 2)).select(
    left_t=t1.t, right_t=t2.t
)
pw.debug.compute_and_print(t4, include_id=False)
```

Show Code Results

```
left_t | right_t
1      |
1      | 2
2      | 2
2      | 2
3      |
3      | 2
7      | 6
7      | 7
7      | 7
13     |
13     |
```

```
t1 = pw.debug.table_from_markdown(
    '''
    | a | t
  1 | 1 | 1
  2 | 1 | 2
  3 | 1 | 3
  4 | 1 | 7
  5 | 1 | 13
  6 | 2 | 1
  7 | 2 | 2
  8 | 3 | 4
'''
)
t2 = pw.debug.table_from_markdown(
    '''
    | b | t
  1 | 1 | 2
  2 | 1 | 5
  3 | 1 | 6
  4 | 1 | 7
  5 | 2 | 2
  6 | 2 | 3
  7 | 4 | 3
'''
)
t3 = t1.window_join_left(t2, t1.t, t2.t, pw.temporal.tumbling(2), t1.a == t2.b).select(
    key=t1.a, left_t=t1.t, right_t=t2.t
)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
key | left_t | right_t
1   | 1      |
1   | 2      | 2
1   | 3      | 2
1   | 7      | 6
1   | 7      | 7
1   | 13     |
2   | 1      |
2   | 2      | 2
2   | 2      | 3
3   | 4      |
```

```
t1 = pw.debug.table_from_markdown(
    '''
      | t
    0 | 0
    1 | 5
    2 | 10
    3 | 15
    4 | 17
'''
)
t2 = pw.debug.table_from_markdown(
    '''
      | t
    0 | -3
    1 | 2
    2 | 3
    3 | 6
    4 | 16
'''
)
t3 = t1.window_join_left(
    t2, t1.t, t2.t, pw.temporal.session(predicate=lambda a, b: abs(a - b) <= 2)
).select(left_t=t1.t, right_t=t2.t)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
left_t | right_t
0      | 2
0      | 3
0      | 6
5      | 2
5      | 3
5      | 6
10     |
15     | 16
17     | 16
```

```
t1 = pw.debug.table_from_markdown(
    '''
    | a | t
  1 | 1 | 1
  2 | 1 | 4
  3 | 1 | 7
  4 | 2 | 0
  5 | 2 | 3
  6 | 2 | 4
  7 | 2 | 7
  8 | 3 | 4
'''
)
t2 = pw.debug.table_from_markdown(
    '''
    | b | t
  1 | 1 | -1
  2 | 1 | 6
  3 | 2 | 2
  4 | 2 | 10
  5 | 4 | 3
'''
)
t3 = t1.window_join_left(
    t2, t1.t, t2.t, pw.temporal.session(predicate=lambda a, b: abs(a - b) <= 2), t1.a == t2.b
).select(key=t1.a, left_t=t1.t, right_t=t2.t)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
key | left_t | right_t
1   | 1      | -1
1   | 4      | 6
1   | 7      | 6
2   | 0      | 2
2   | 3      | 2
2   | 4      | 2
2   | 7      |
3   | 4      |
```

### [**window\_join\_outer**(other, self\_time, other\_time, window, \*on, left\_instance=None, right\_instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.window_join_outer)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/temporal/_window_join.py#L992-L1217)Performs a window outer join of self with other using a window and join expressions. If two records belong to the same window and meet the conditions specified in the on clause, they will be joined. Note that if a sliding window is used and there are pairs of matching records that appear in more than one window, they will be included in the result multiple times (equal to the number of windows they appear in).

When using a session window, the function creates sessions by concatenating records from both sides of a join. Only pairs of records that meet the conditions specified in the on clause can be part of the same session. The result of a given session will include all records from the left side of a join that belong to this session, joined with all records from the right side of a join that belong to this session.

Rows from both sides that didn’t match with any record on the other side in a given window, are returned with missing values on the other side replaced with None. The multiplicity of such rows equals the number of windows they belong to and don’t have a match in them.

*   **Parameters**
    *   **other** ([`Table`](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)) – the right side of a join.
    *   **self\_time** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – time expression in self.
    *   **other\_time** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – time expression in other.
    *   **window** ([`Window`](https://pathway.com/developers/api-docs/pathway-stdlib-temporal#pathway.stdlib.temporal.Window)) – a window to use.
    *   **on** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – a list of column expressions. Each must have == on the top level operation and be of the form LHS: ColumnReference == RHS: ColumnReference.
    *   **left\_instance/right\_instance** – optional arguments describing partitioning of the data into separate instances
*   **Returns**  
    _WindowJoinResult_ – a result of the window join. A method .select() can be called on it to extract relevant columns from the result of a join.

Examples:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
    | t
  1 | 1
  2 | 2
  3 | 3
  4 | 7
  5 | 13
'''
)
t2 = pw.debug.table_from_markdown(
    '''
    | t
  1 | 2
  2 | 5
  3 | 6
  4 | 7
'''
)
t3 = t1.window_join_outer(t2, t1.t, t2.t, pw.temporal.tumbling(2)).select(
    left_t=t1.t, right_t=t2.t
)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
left_t | right_t
       | 5
1      |
2      | 2
3      | 2
7      | 6
7      | 7
13     |
```

```
t4 = t1.window_join_outer(t2, t1.t, t2.t, pw.temporal.sliding(1, 2)).select(
    left_t=t1.t, right_t=t2.t
)
pw.debug.compute_and_print(t4, include_id=False)
```

Show Code Results

```
left_t | right_t
       | 5
       | 5
       | 6
1      |
1      | 2
2      | 2
2      | 2
3      |
3      | 2
7      | 6
7      | 7
7      | 7
13     |
13     |
```

```
t1 = pw.debug.table_from_markdown(
    '''
    | a | t
  1 | 1 | 1
  2 | 1 | 2
  3 | 1 | 3
  4 | 1 | 7
  5 | 1 | 13
  6 | 2 | 1
  7 | 2 | 2
  8 | 3 | 4
'''
)
t2 = pw.debug.table_from_markdown(
    '''
    | b | t
  1 | 1 | 2
  2 | 1 | 5
  3 | 1 | 6
  4 | 1 | 7
  5 | 2 | 2
  6 | 2 | 3
  7 | 4 | 3
'''
)
t3 = t1.window_join_outer(t2, t1.t, t2.t, pw.temporal.tumbling(2), t1.a == t2.b).select(
    key=pw.coalesce(t1.a, t2.b), left_t=t1.t, right_t=t2.t
)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
key | left_t | right_t
1   |        | 5
1   | 1      |
1   | 2      | 2
1   | 3      | 2
1   | 7      | 6
1   | 7      | 7
1   | 13     |
2   | 1      |
2   | 2      | 2
2   | 2      | 3
3   | 4      |
4   |        | 3
```

```
t1 = pw.debug.table_from_markdown(
    '''
      | t
    0 | 0
    1 | 5
    2 | 10
    3 | 15
    4 | 17
'''
)
t2 = pw.debug.table_from_markdown(
    '''
      | t
    0 | -3
    1 | 2
    2 | 3
    3 | 6
    4 | 16
'''
)
t3 = t1.window_join_outer(
    t2, t1.t, t2.t, pw.temporal.session(predicate=lambda a, b: abs(a - b) <= 2)
).select(left_t=t1.t, right_t=t2.t)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
left_t | right_t
       | -3
0      | 2
0      | 3
0      | 6
5      | 2
5      | 3
5      | 6
10     |
15     | 16
17     | 16
```

```
t1 = pw.debug.table_from_markdown(
    '''
    | a | t
  1 | 1 | 1
  2 | 1 | 4
  3 | 1 | 7
  4 | 2 | 0
  5 | 2 | 3
  6 | 2 | 4
  7 | 2 | 7
  8 | 3 | 4
'''
)
t2 = pw.debug.table_from_markdown(
    '''
    | b | t
  1 | 1 | -1
  2 | 1 | 6
  3 | 2 | 2
  4 | 2 | 10
  5 | 4 | 3
'''
)
t3 = t1.window_join_outer(
    t2, t1.t, t2.t, pw.temporal.session(predicate=lambda a, b: abs(a - b) <= 2), t1.a == t2.b
).select(key=pw.coalesce(t1.a, t2.b), left_t=t1.t, right_t=t2.t)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
key | left_t | right_t
1   | 1      | -1
1   | 4      | 6
1   | 7      | 6
2   |        | 10
2   | 0      | 2
2   | 3      | 2
2   | 4      | 2
2   | 7      |
3   | 4      |
4   |        | 3
```

### [**window\_join\_right**(other, self\_time, other\_time, window, \*on, left\_instance=None, right\_instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.window_join_right)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/temporal/_window_join.py#L777-L989)Performs a window right join of self with other using a window and join expressions. If two records belong to the same window and meet the conditions specified in the on clause, they will be joined. Note that if a sliding window is used and there are pairs of matching records that appear in more than one window, they will be included in the result multiple times (equal to the number of windows they appear in).

When using a session window, the function creates sessions by concatenating records from both sides of a join. Only pairs of records that meet the conditions specified in the on clause can be part of the same session. The result of a given session will include all records from the left side of a join that belong to this session, joined with all records from the right side of a join that belong to this session.

Rows from the right side that didn’t match with any record on the left side in a given window, are returned with missing values on the left side replaced with None. The multiplicity of such rows equals the number of windows they belong to and don’t have a match in them.

*   **Parameters**
    *   **other** ([`Table`](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)) – the right side of a join.
    *   **self\_time** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – time expression in self.
    *   **other\_time** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – time expression in other.
    *   **window** ([`Window`](https://pathway.com/developers/api-docs/pathway-stdlib-temporal#pathway.stdlib.temporal.Window)) – a window to use.
    *   **on** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – a list of column expressions. Each must have == on the top level operation and be of the form LHS: ColumnReference == RHS: ColumnReference.
    *   **left\_instance/right\_instance** – optional arguments describing partitioning of the data into separate instances
*   **Returns**  
    _WindowJoinResult_ – a result of the window join. A method .select() can be called on it to extract relevant columns from the result of a join.

Examples:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
    | t
  1 | 1
  2 | 2
  3 | 3
  4 | 7
  5 | 13
'''
)
t2 = pw.debug.table_from_markdown(
    '''
    | t
  1 | 2
  2 | 5
  3 | 6
  4 | 7
'''
)
t3 = t1.window_join_right(t2, t1.t, t2.t, pw.temporal.tumbling(2)).select(
    left_t=t1.t, right_t=t2.t
)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
left_t | right_t
       | 5
2      | 2
3      | 2
7      | 6
7      | 7
```

```
t4 = t1.window_join_right(t2, t1.t, t2.t, pw.temporal.sliding(1, 2)).select(
    left_t=t1.t, right_t=t2.t
)
pw.debug.compute_and_print(t4, include_id=False)
```

Show Code Results

```
left_t | right_t
       | 5
       | 5
       | 6
1      | 2
2      | 2
2      | 2
3      | 2
7      | 6
7      | 7
7      | 7
```

```
t1 = pw.debug.table_from_markdown(
    '''
    | a | t
  1 | 1 | 1
  2 | 1 | 2
  3 | 1 | 3
  4 | 1 | 7
  5 | 1 | 13
  6 | 2 | 1
  7 | 2 | 2
  8 | 3 | 4
'''
)
t2 = pw.debug.table_from_markdown(
    '''
    | b | t
  1 | 1 | 2
  2 | 1 | 5
  3 | 1 | 6
  4 | 1 | 7
  5 | 2 | 2
  6 | 2 | 3
  7 | 4 | 3
'''
)
t3 = t1.window_join_right(t2, t1.t, t2.t, pw.temporal.tumbling(2), t1.a == t2.b).select(
    key=t2.b, left_t=t1.t, right_t=t2.t
)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
key | left_t | right_t
1   |        | 5
1   | 2      | 2
1   | 3      | 2
1   | 7      | 6
1   | 7      | 7
2   | 2      | 2
2   | 2      | 3
4   |        | 3
```

```
t1 = pw.debug.table_from_markdown(
    '''
      | t
    0 | 0
    1 | 5
    2 | 10
    3 | 15
    4 | 17
'''
)
t2 = pw.debug.table_from_markdown(
    '''
      | t
    0 | -3
    1 | 2
    2 | 3
    3 | 6
    4 | 16
'''
)
t3 = t1.window_join_right(
    t2, t1.t, t2.t, pw.temporal.session(predicate=lambda a, b: abs(a - b) <= 2)
).select(left_t=t1.t, right_t=t2.t)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
left_t | right_t
       | -3
0      | 2
0      | 3
0      | 6
5      | 2
5      | 3
5      | 6
15     | 16
17     | 16
```

```
t1 = pw.debug.table_from_markdown(
    '''
    | a | t
  1 | 1 | 1
  2 | 1 | 4
  3 | 1 | 7
  4 | 2 | 0
  5 | 2 | 3
  6 | 2 | 4
  7 | 2 | 7
  8 | 3 | 4
'''
)
t2 = pw.debug.table_from_markdown(
    '''
    | b | t
  1 | 1 | -1
  2 | 1 | 6
  3 | 2 | 2
  4 | 2 | 10
  5 | 4 | 3
'''
)
t3 = t1.window_join_right(
    t2, t1.t, t2.t, pw.temporal.session(predicate=lambda a, b: abs(a - b) <= 2), t1.a == t2.b
).select(key=t2.b, left_t=t1.t, right_t=t2.t)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
key | left_t | right_t
1   | 1      | -1
1   | 4      | 6
1   | 7      | 6
2   |        | 10
2   | 0      | 2
2   | 3      | 2
2   | 4      | 2
4   |        | 3
```

### [**windowby**(time\_expr, \*, window, behavior=None, instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.windowby)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/temporal/_window.py#L860-L912)Create a GroupedTable by windowing the table (based on expr and window), optionally with instance argument.

*   **Parameters**
    *   **time\_expr** (`pw.ColumnExpression[int | float | datetime]`) – Column expression used for windowing
    *   **window** ([`Window`](https://pathway.com/developers/api-docs/pathway-stdlib-temporal#pathway.stdlib.temporal.Window)) – type window to use
    *   **instance** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression) | `None`) – optional column expression to act as a shard key

Examples:

```
import pathway as pw
t = pw.debug.table_from_markdown(
'''
    | instance |  t |  v
1   | 0        |  1 |  10
2   | 0        |  2 |  1
3   | 0        |  4 |  3
4   | 0        |  8 |  2
5   | 0        |  9 |  4
6   | 0        |  10|  8
7   | 1        |  1 |  9
8   | 1        |  2 |  16
''')
result = t.windowby(
    t.t, window=pw.temporal.session(predicate=lambda a, b: abs(a-b) <= 1), instance=t.instance
).reduce(
pw.this.instance,
min_t=pw.reducers.min(pw.this.t),
max_v=pw.reducers.max(pw.this.v),
count=pw.reducers.count(),
)
pw.debug.compute_and_print(result, include_id=False)
```

Show Code Results

```
instance | min_t | max_v | count
0        | 1     | 10    | 2
0        | 4     | 3     | 1
0        | 8     | 8     | 3
1        | 1     | 16    | 2
```

### [**with\_columns**(\*args, \*\*kwargs)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.with_columns)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L1611-L1642)Updates columns of self, according to args and kwargs. See table.select specification for evaluation of args and kwargs.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
  | age | owner | pet
1 | 10  | Alice | 1
2 | 9   | Bob   | 1
3 | 8   | Alice | 2
''')
t2 = pw.debug.table_from_markdown('''
  | owner | pet | size
1 | Tom   | 1   | 10
2 | Bob   | 1   | 9
3 | Tom   | 2   | 8
''')
t3 = t1.with_columns(*t2)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
age | owner | pet | size
8   | Tom   | 2   | 8
9   | Bob   | 1   | 9
10  | Tom   | 1   | 10
```

### [**with\_id**(new\_index)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.with_id)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L1644-L1685)Set new ids based on another column containing id-typed values.

To generate ids based on arbitrary valued columns, use with\_id\_from.

Values assigned must be row-wise unique. The uniqueness is not checked by pathway. Failing to provide unique ids can cause unexpected errors downstream.

*   **Parameters**  
    **new\_id** – column to be used as the new index.
*   **Returns**  
    Table with updated ids.

Example:

```
import pytest; pytest.xfail("with_id is hard to test")
import pathway as pw
t1 = pw.debug.table_from_markdown('''
  | age | owner | pet
1 | 10  | Alice | 1
2 | 9   | Bob   | 1
3 | 8   | Alice | 2
''')
t2 = pw.debug.table_from_markdown('''
  | new_id
1 | 2
2 | 3
3 | 4
''')
t3 = t1.promise_universe_is_subset_of(t2).with_id(t2.new_id)
pw.debug.compute_and_print(t3)
```

Show Code Results

```
    age  owner  pet
^2   10  Alice    1
^3    9    Bob    1
^4    8  Alice    2
```

### [**with\_id\_from**(\*args, instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.with_id_from)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L1687-L1737)Compute new ids based on values in columns. Ids computed from columns must be row-wise unique. The uniqueness is not checked by pathway. Failing to provide unique ids can cause unexpected errors downstream.

*   **Parameters**  
    **columns** – columns to be used as primary keys.
*   **Returns**  
    _Table_ – self updated with recomputed ids.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
   | age | owner  | pet
 1 | 10  | Alice  | 1
 2 | 9   | Bob    | 1
 3 | 8   | Alice  | 2
''')
t2 = t1 + t1.select(old_id=t1.id)
t3 = t2.with_id_from(t2.age)
pw.debug.compute_and_print(t3)
```

Show Code Results

```
     | age | owner | pet | old_id
^... | 8   | Alice | 2   | ^...
^... | 9   | Bob   | 1   | ^...
^... | 10  | Alice | 1   | ^...
```

```
t4 = t3.select(t3.age, t3.owner, t3.pet, same_as_old=(t3.id == t3.old_id),
    same_as_new=(t3.id == t3.pointer_from(t3.age)))
pw.debug.compute_and_print(t4)
```

Show Code Results

```
     | age | owner | pet | same_as_old | same_as_new
^... | 8   | Alice | 2   | False       | True
^... | 9   | Bob   | 1   | False       | True
^... | 10  | Alice | 1   | False       | True
```

### [**with\_prefix**(prefix)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.with_prefix)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L1849-L1869)Rename columns by adding prefix to each name of column.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
age | owner | pet
10  | Alice | 1
9   | Bob   | 1
8   | Alice | 2
''')
t2 = t1.with_prefix("u_")
pw.debug.compute_and_print(t2, include_id=False)
```

Show Code Results

```
u_age | u_owner | u_pet
8     | Alice   | 2
9     | Bob     | 1
10    | Alice   | 1
```

### [**with\_suffix**(suffix)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.with_suffix)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L1871-L1891)Rename columns by adding suffix to each name of column.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
age | owner | pet
10  | Alice | 1
9   | Bob   | 1
8   | Alice | 2
''')
t2 = t1.with_suffix("_current")
pw.debug.compute_and_print(t2, include_id=False)
```

Show Code Results

```
age_current | owner_current | pet_current
8           | Alice         | 2
9           | Bob           | 1
10          | Alice         | 1
```

### [**with\_universe\_of**(other)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.with_universe_of)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L2035-L2068)Returns a copy of self with exactly the same universe as others.

Semantics: Required precondition self.universe == other.universe Used in situations where Pathway cannot deduce equality of universes, but those are equal as verified during runtime.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
  | pet
1 | Dog
7 | Cat
''')
t2 = pw.debug.table_from_markdown('''
  | age
1 | 10
7 | 3
8 | 100
''')
t3 = t2.filter(pw.this.age < 30).with_universe_of(t1)
t4 = t1 + t3
pw.debug.compute_and_print(t4, include_id=False)
```

Show Code Results

```
pet | age
Cat | 3
Dog | 10
```

### [**without**(\*columns)](https://pathway.com/developers/api-docs/pathway/#pathway.Table.without)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L1917-L1957)Selects all columns without named column references.

*   **Parameters**  
    **columns** (`str` | [`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference)) – columns to be dropped provided by table.column\_name notation.
*   **Returns**  
    _Table_ – self without specified columns.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
age  | owner  | pet
 10  | Alice  | 1
  9  | Bob    | 1
  8  | Alice  | 2
''')
t2 = t1.without(t1.age, pw.this.pet)
pw.debug.compute_and_print(t2, include_id=False)
```

Show Code Results

```
owner
Alice
Alice
Bob
```

### [property **id**:](https://pathway.com/developers/api-docs/pathway/#pathway.Table.id) [ColumnReference](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference)

Get reference to pseudocolumn containing id’s of a table.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
age | owner | pet
10  | Alice | dog
9   | Bob   | dog
8   | Alice | cat
7   | Bob   | dog
''')
t2 = t1.select(ids = t1.id)
t2.typehints()['ids']
```

Show Code Results

```
<class 'pathway.engine.Pointer'>
```

```
pw.debug.compute_and_print(t2.select(test=t2.id == t2.ids), include_id=False)
```

Show Code Results

```
test
True
True
True
True
```

### [property **schema**: type\[](https://pathway.com/developers/api-docs/pathway/#pathway.Table.schema)[pathway.internals.schema.Schema](https://pathway.com/developers/api-docs/pathway#pathway.Schema)\]

Get schema of the table.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
age | owner | pet
10  | Alice | dog
9   | Bob   | dog
8   | Alice | cat
7   | Bob   | dog
''')
t1.schema
```

Show Code Results

```
<pathway.Schema types={'age': <class 'int'>, 'owner': <class 'str'>, 'pet': <class 'str'>}, id_type=<class 'pathway.engine.Pointer'>>
```

```
t1.typehints()['age']
```

Show Code Results

```
<class 'int'>
```

### [property **slice**:](https://pathway.com/developers/api-docs/pathway/#pathway.Table.slice) [TableSlice](https://pathway.com/developers/api-docs/pathway#pathway.TableSlice)

Creates a collection of references to self columns. Supports basic column manipulation methods.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
age | owner | pet
10  | Alice | dog
9   | Bob   | dog
8   | Alice | cat
7   | Bob   | dog
''')
t1.slice.without("age")
```

Show Code Results

```
TableSlice({'owner': <table1>.owner, 'pet': <table1>.pet})
```

[class pw.**TableLike**(context)](https://pathway.com/developers/api-docs/pathway/#pathway.TableLike)
-----------------------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table_like.py#L15-L172)

Interface class for table-likes: Table, GroupedTable and JoinResult. All of those contain universe info, and thus support universe-related asserts.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
age | owner | pet
10  | Alice | dog
9   | Bob   | dog
8   | Alice | cat
7   | Bob   | dog
''')
g1 = t1.groupby(t1.owner)
t2 = t1.filter(t1.age >= 9)
pw.debug.compute_and_print(t2, include_id=False)
```

Show Code Results

```
age | owner | pet
9   | Bob   | dog
10  | Alice | dog
```

```
g2 = t2.groupby(t2.owner)
pw.universes.promise_is_subset_of(g2, g1) # t2 is a subset of t1, so this is safe
```

### [**promise\_universe\_is\_equal\_to**(other)](https://pathway.com/developers/api-docs/pathway/#pathway.TableLike.promise_universe_is_equal_to)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table_like.py#L125-L172)Asserts to Pathway that an universe of self is a subset of universe of each of the others.

Semantics: Used in situations where Pathway cannot deduce one universe being a subset of another.

*   **Returns**  
    None

**NOTE**: The assertion works in place.

Example:

```
import pathway as pw
import pytest
t1 = pw.debug.table_from_markdown(
    '''
  | age | owner | pet
1 | 8   | Alice | cat
2 | 9   | Bob   | dog
3 | 15  | Alice | tortoise
4 | 99  | Bob   | seahorse
'''
).filter(pw.this.age<30)
t2 = pw.debug.table_from_markdown(
    '''
  | age | owner
1 | 11  | Alice
2 | 12  | Tom
3 | 7   | Eve
'''
)
t3 = t2.filter(pw.this.age > 10)
with pytest.raises(ValueError):
    t1.update_cells(t3)
t1 = t1.promise_universe_is_equal_to(t2)
result = t1.update_cells(t3)
pw.debug.compute_and_print(result, include_id=False)
```

Show Code Results

```
age | owner | pet
11  | Alice | cat
12  | Tom   | dog
15  | Alice | tortoise
```

### [**promise\_universe\_is\_subset\_of**(other)](https://pathway.com/developers/api-docs/pathway/#pathway.TableLike.promise_universe_is_subset_of)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table_like.py#L88-L123)Asserts to Pathway that an universe of self is a subset of universe of each of the other.

Semantics: Used in situations where Pathway cannot deduce one universe being a subset of another.

*   **Returns**  
    self

**NOTE**: The assertion works in place.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
  | age | owner | pet
1 | 10  | Alice | 1
2 | 9   | Bob   | 1
3 | 8   | Alice | 2
''')
t2 = pw.debug.table_from_markdown('''
  | age | owner | pet
1 | 10  | Alice | 30
''').promise_universe_is_subset_of(t1)
t3 = t1 << t2
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
age | owner | pet
8   | Alice | 2
9   | Bob   | 1
10  | Alice | 30
```

### [**promise\_universes\_are\_disjoint**(other)](https://pathway.com/developers/api-docs/pathway/#pathway.TableLike.promise_universes_are_disjoint)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table_like.py#L48-L86)Asserts to Pathway that an universe of self is disjoint from universe of other.

Semantics: Used in situations where Pathway cannot deduce universes are disjoint.

*   **Returns**  
    self

**NOTE**: The assertion works in place.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
  | age | owner | pet
1 | 10  | Alice | 1
2 | 9   | Bob   | 1
3 | 8   | Alice | 2
''')
t2 = pw.debug.table_from_markdown('''
   | age | owner | pet
11 | 11  | Alice | 30
12 | 12  | Tom   | 40
''').promise_universes_are_disjoint(t1)
t3 = t1.concat(t2)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
age | owner | pet
8   | Alice | 2
9   | Bob   | 1
10  | Alice | 1
11  | Alice | 30
12  | Tom   | 40
```

[class pw.**TableSlice**(mapping, table)](https://pathway.com/developers/api-docs/pathway/#pathway.TableSlice)
--------------------------------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table_slice.py#L16-L153)

Collection of references to Table columns. Created by Table.slice method, or automatically by using left/right/this constructs. Supports basic column manipulation methods.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
age | owner | pet
10  | Alice | dog
9   | Bob   | dog
8   | Alice | cat
7   | Bob   | dog
''')
t1.slice.without("age").with_suffix("_col")
```

Show Code Results

```
TableSlice({'owner_col': <table1>.owner, 'pet_col': <table1>.pet})
```

[class pw.**UDF**(\*, return\_type=..., deterministic=False, propagate\_none=False, executor=AutoExecutor(), cache\_strategy=None)](https://pathway.com/developers/api-docs/pathway/#pathway.UDF)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/udfs/__init__.py#L68-L211)

Base class for Pathway UDF (user-defined functions).

Please use the wrapper `udf` to create UDFs out of Python functions. Please subclass this class to define UDFs using Python classes. When subclassing this class, please implement the `__wrapped__` function.

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
a | b
1 | 2
3 | 4
5 | 6
'''
)
class VerySophisticatedUDF(pw.UDF):
    exponent: float
    def __init__(self, exponent: float) -> None:
        super().__init__()
        self.exponent = exponent
    def __wrapped__(self, a: int, b: int) -> float:
        intermediate = (a * b) ** self.exponent
        return round(intermediate, 2)
func = VerySophisticatedUDF(1.5)
res = table.select(result=func(table.a, table.b))
pw.debug.compute_and_print(res, include_id=False)
```

Show Code Results

```
result
2.83
41.57
164.32
```

[class pw.**UDFAsync**(\*, capacity=None, retry\_strategy=None, cache\_strategy=None)](https://pathway.com/developers/api-docs/pathway/#pathway.UDFAsync)
---------------------------------------------------------------------------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/udfs/__init__.py#L405-L445)

Deprecated. Subclass `UDF` instead.

UDFs that are executed as python async functions.

To implement your own UDF as a class please implement the `__wrapped__` async function.

[class pw.**UDFSync**(\*, return\_type=..., deterministic=False, propagate\_none=False, executor=AutoExecutor(), cache\_strategy=None)](https://pathway.com/developers/api-docs/pathway/#pathway.UDFSync)
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/udfs/__init__.py#L214-L228)

Deprecated. Subclass `UDF` instead.

UDFs that are executed as regular python functions.

To implement your own UDF as a class please implement the `__wrapped__` function.

[class pw.**iterate\_universe**(table)](https://pathway.com/developers/api-docs/pathway/#pathway.iterate_universe)
------------------------------------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/operator.py#L308-L313)

[class pw.**left**](https://pathway.com/developers/api-docs/pathway/#pathway.left)
----------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/thisclass.py#L246-L278)

Object for generating column references without holding the actual table in hand. Needs to be evaluated in the proper context. For Table.join() and JoinResult.select(), refers to the left input table. For all other situations, you need pw.this object.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
age  | owner  | pet
 10  | Alice  | 1
  9  | Bob    | 1
  8  | Alice  | 2
''')
t2 = pw.debug.table_from_markdown('''
age  | owner  | pet | size
 10  | Alice  | 3   | M
 9   | Bob    | 1   | L
 8   | Tom    | 1   | XL
''')
t3 = t1.join(t2, pw.left.pet == pw.right.pet, pw.left.owner == pw.right.owner).select(
         age=pw.left.age, owner_name=pw.right.owner, size=pw.this.size
     )
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
age | owner_name | size
9   | Bob        | L
```

[class pw.**right**](https://pathway.com/developers/api-docs/pathway/#pathway.right)
------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/thisclass.py#L281-L313)

Object for generating column references without holding the actual table in hand. Needs to be evaluated in the proper context. For Table.join() and JoinResult.select(), refers to the right input table. For all other situations, you need pw.this object.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
age  | owner  | pet
 10  | Alice  | 1
  9  | Bob    | 1
  8  | Alice  | 2
''')
t2 = pw.debug.table_from_markdown('''
age  | owner  | pet | size
 10  | Alice  | 3   | M
 9   | Bob    | 1   | L
 8   | Tom    | 1   | XL
''')
t3 = t1.join(t2, pw.left.pet == pw.right.pet, pw.left.owner == pw.right.owner).select(
         age=pw.left.age, owner_name=pw.right.owner, size=pw.this.size
     )
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
age | owner_name | size
9   | Bob        | L
```

[class pw.**this**](https://pathway.com/developers/api-docs/pathway/#pathway.this)
----------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/thisclass.py#L216-L243)

Object for generating column references without holding the actual table in hand. Needs to be evaluated in the proper context. For most of the Table methods, it refers to self. For JoinResult, it refers to the left input table.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
age | owner | pet
10  | Alice | 1
9   | Bob   | 1
8   | Alice | 2
''')
t2 = t1.select(pw.this.owner, pw.this.age)
pw.debug.compute_and_print(t2, include_id=False)
```

Show Code Results

```
owner | age
Alice | 8
Alice | 10
Bob   | 9
```

[pw.**apply**(fun, \*args, \*\*kwargs)](https://pathway.com/developers/api-docs/pathway/#pathway.apply)
-------------------------------------------------------------------------------------------------------

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/common.py#L94-L129)Applies function to column expressions, column-wise. Output column type deduced from type-annotations of a function.

Example:

```
import pathway as pw
def concat(left: str, right: str) -> str:
  return left+right
t1 = pw.debug.table_from_markdown('''
age  owner  pet
 10  Alice  dog
  9    Bob  dog
  8  Alice  cat
  7    Bob  dog''')
t2 = t1.select(col = pw.apply(concat, t1.owner, t1.pet))
pw.debug.compute_and_print(t2, include_id=False)
```

Show Code Results

```
col
Alicecat
Alicedog
Bobdog
Bobdog
```

[pw.**apply\_async**(fun, \*args, \*\*kwargs)](https://pathway.com/developers/api-docs/pathway/#pathway.apply_async)
--------------------------------------------------------------------------------------------------------------------

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/common.py#L168-L207)Applies function asynchronously to column expressions, column-wise. Output column type deduced from type-annotations of a function. Either a regular or async function can be passed.

Example:

```
import pathway as pw
import asyncio
async def concat(left: str, right: str) -> str:
  await asyncio.sleep(0.1)
  return left+right
t1 = pw.debug.table_from_markdown('''
age  owner  pet
 10  Alice  dog
  9    Bob  dog
  8  Alice  cat
  7    Bob  dog''')
t2 = t1.select(col = pw.apply_async(concat, t1.owner, t1.pet))
pw.debug.compute_and_print(t2, include_id=False)
```

Show Code Results

```
col
Alicecat
Alicedog
Bobdog
Bobdog
```

[pw.**apply\_with\_type**(fun, ret\_type, \*args, \*\*kwargs)](https://pathway.com/developers/api-docs/pathway/#pathway.apply_with_type)
----------------------------------------------------------------------------------------------------------------------------------------

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/common.py#L132-L165)Applies function to column expressions, column-wise. Output column type is provided explicitly.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
   age  owner  pet
1   10  Alice  dog
2    9    Bob  dog
3    8  Alice  cat
4    7    Bob  dog''')
t2 = t1.select(col = pw.apply_with_type(lambda left, right: left+right, str, t1.owner, t1.pet))
pw.debug.compute_and_print(t2, include_id=False)
```

Show Code Results

```
col
Alicecat
Alicedog
Bobdog
Bobdog
```

[pw.**assert\_table\_has\_schema**(table, schema, \*, allow\_superset=True, ignore\_primary\_keys=True, allow\_subtype=True)](https://pathway.com/developers/api-docs/pathway/#pathway.assert_table_has_schema)
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/common.py#L474-L516)Asserts that the schema of the table is equivalent to the schema given as an argument.

*   **Parameters**
    *   **table** ([`Table`](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)) – Table for which we are asserting schema.
    *   **schema** (`type`\[[`Schema`](https://pathway.com/developers/api-docs/pathway#pathway.Schema)\]) – Schema, which we assert that the Table has.
    *   **allow\_superset** (`bool`) – if True, the columns of the table can be a superset of columns in schema. The default value is True.
    *   **ignore\_primary\_keys** (`bool`) – if True, the assert won’t check whether table and schema have the same primary keys. The default value is True.
    *   **allow\_subtype** (`bool`) – if True, types in the Table can be subtypes of types in the schema. The default value is True.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
age | owner | pet
10  | Alice | dog
9   | Bob   | dog
8   | Alice | cat
7   | Bob   | dog
''')
t2 = t1.select(pw.this.owner, age = pw.cast(float, pw.this.age))
schema = pw.schema_builder(
    {"age": pw.column_definition(dtype=float), "owner": pw.column_definition(dtype=str)}
)
pw.assert_table_has_schema(t2, schema)
```

[pw.**cast**(target\_type, col)](https://pathway.com/developers/api-docs/pathway/#pathway.cast)
-----------------------------------------------------------------------------------------------

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/common.py#L242-L272)Changes the type of the column to target\_type and converts the data of this column

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
  val
1   10
2    9
3    8
4    7''')
t1.schema
```

Show Code Results

```
<pathway.Schema types={'val': <class 'int'>}, id_type=<class 'pathway.engine.Pointer'>>
```

```
pw.debug.compute_and_print(t1, include_id=False)
```

Show Code Results

```
val
7
8
9
10
```

```
t2 = t1.select(val = pw.cast(float, t1.val))
t2.schema
```

Show Code Results

```
<pathway.Schema types={'val': <class 'float'>}, id_type=<class 'pathway.engine.Pointer'>>
```

```
pw.debug.compute_and_print(t2, include_id=False)
```

Show Code Results

```
val
7.0
8.0
9.0
10.0
```

[pw.**coalesce**(\*args)](https://pathway.com/developers/api-docs/pathway/#pathway.coalesce)
--------------------------------------------------------------------------------------------

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/common.py#L275-L297)For arguments list arg\_1, arg\_2, …, arg\_n returns first not-None value.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
colA   colB
     |   10
   2 |
     |
   4 |    7''')
t2 = t1.select(t1.colA, t1.colB, col=pw.coalesce(t1.colA, t1.colB))
pw.debug.compute_and_print(t2, include_id=False)
```

Show Code Results

```
colA | colB | col
     |      |
     | 10   | 10
2    |      | 2
4    | 7    | 4
```

[pw.**column\_definition**(\*, primary\_key=False, default\_value=\_no\_default\_value\_marker, dtype=None, name=None, append\_only=None, description=None, example=None)](https://pathway.com/developers/api-docs/pathway/#pathway.column_definition)
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/schema.py#L687-L734)Creates column definition

*   **Parameters**
    *   **primary\_key** (`bool`) – should column be a part of a primary key.
    *   **default\_value** (`Any` | `None`) – default value replacing blank entries. The default value of the column must be specified explicitly, otherwise there will be no default value.
    *   **dtype** (`Any` | `None`) – data type. When used in schema class, will be deduced from the type annotation.
    *   **name** (`str` | `None`) – name of a column. When used in schema class, will be deduced from the attribute name.
    *   **append\_only** (`bool` | `None`) – whether column is append-only. if unspecified, defaults to False or to value specified at the schema definition level
*   **Returns**  
    Column definition.

Example:

```
import pathway as pw
class NewSchema(pw.Schema):
  key: int = pw.column_definition(primary_key=True)
  timestamp: str = pw.column_definition(name="@timestamp")
  data: str
NewSchema
```

Show Code Results

```
<pathway.Schema types={'key': <class 'int'>, '@timestamp': <class 'str'>, 'data': <class 'str'>}, id_type=pathway.engine.Pointer[int]>
```

[pw.**declare\_type**(target\_type, col)](https://pathway.com/developers/api-docs/pathway/#pathway.declare_type)
----------------------------------------------------------------------------------------------------------------

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/common.py#L215-L239)Used to change the type of a column to a particular type. Disclaimer: it only changes type in a schema, it does not affect values stored.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
   val
1   10
2    9.5
3    8
4    7''')
t1.schema
```

Show Code Results

```
<pathway.Schema types={'val': <class 'float'>}, id_type=<class 'pathway.engine.Pointer'>>
```

```
t2 = t1.filter(t1.val == pw.cast(int, t1.val))
t2.schema
```

Show Code Results

```
<pathway.Schema types={'val': <class 'float'>}, id_type=<class 'pathway.engine.Pointer'>>
```

```
t3 = t2.select(val = pw.declare_type(int, t2.val))
t3.schema
```

Show Code Results

```
<pathway.Schema types={'val': <class 'int'>}, id_type=<class 'pathway.engine.Pointer'>>
```

[pw.**fill\_error**(col, replacement)](https://pathway.com/developers/api-docs/pathway/#pathway.fill_error)
-----------------------------------------------------------------------------------------------------------

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/common.py#L438-L471)Replaces Error values with `replacement`. Only useful if program termination on error is disabled (PATHWAY\_TERMINATE\_ON\_ERROR=0).

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
    a | b
    3 | 3
    4 | 0
    5 | 5
    6 | 2
    '''
)
res_with_errors = t1.with_columns(c=pw.this.a // pw.this.b)
pw.debug.compute_and_print(res_with_errors, include_id=False, terminate_on_error=False)
```

Show Code Results

```
a | b | c
3 | 3 | 1
4 | 0 | Error
5 | 5 | 1
6 | 2 | 3
```

```
res_wo_errors = res_with_errors.with_columns(c=pw.fill_error(pw.this.c, -1))
pw.debug.compute_and_print(res_wo_errors, include_id=False, terminate_on_error=False)
```

Show Code Results

```
a | b | c
3 | 3 | 1
4 | 0 | -1
5 | 5 | 1
6 | 2 | 3
```

[pw.**groupby**(grouped, \*args, id=None, \*\*kwargs)](https://pathway.com/developers/api-docs/pathway/#pathway.groupby)
------------------------------------------------------------------------------------------------------------------------

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/table.py#L2592-L2648)Groups join result by columns from args.

**NOTE**: Usually followed by .reduce() that aggregates the result and returns a table.

*   **Parameters**
    *   **grouped** ([`Table`](https://pathway.com/developers/api-docs/pathway-table#pathway.Table) | [`JoinResult`](https://pathway.com/developers/api-docs/pathway#pathway.JoinResult)) – `JoinResult` to group by.
    *   **args** – columns to group by.
    *   **id** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference) | `None`) – if provided, is the column used to set id’s of the rows of the result
    *   **\*\*kwargs** – extra arguments, see respective documentation for `Table.groupby` and `JoinResult.groupby`
*   **Returns**  
    Groupby object of `GroupedJoinResult` or `GroupedTable` type.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
age | owner | pet
10  | Alice | dog
9   | Bob   | dog
8   | Alice | cat
7   | Bob   | dog
''')
t2 = pw.groupby(t1, t1.pet, t1.owner).reduce(
    t1.owner, t1.pet, ageagg=pw.reducers.sum(t1.age)
)
pw.debug.compute_and_print(t2, include_id=False)
```

Show Code Results

```
owner | pet | ageagg
Alice | cat | 8
Alice | dog | 10
Bob   | dog | 16
```

```
t3 = pw.debug.table_from_markdown('''
   cost  owner  pet
1   100  Alice    1
2    90    Bob    1
3    80  Alice    2
''')
t4 = pw.debug.table_from_markdown('''
    cost  owner  pet size
11   100  Alice    3    M
12    90    Bob    1    L
13    80    Tom    1   XL
''')
join_result = t3.join(t4, t3.owner==t4.owner)
result = pw.groupby(join_result, pw.this.owner).reduce(
    pw.this.owner, pairs=pw.reducers.count()
)
pw.debug.compute_and_print(result, include_id=False)
```

Show Code Results

```
owner | pairs
Alice | 2
Bob   | 1
```

[pw.**if\_else**(if\_clause, then\_clause, else\_clause)](https://pathway.com/developers/api-docs/pathway/#pathway.if_else)
---------------------------------------------------------------------------------------------------------------------------

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/common.py#L326-L356)Equivalent to:

```
if (if_clause):
    return (then_clause)
else:
    return (else_clause)
```

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
colA   colB
   1 |    0
   2 |    2
   6 |    3''')
t2 = t1.select(res = pw.if_else(t1.colB != 0, t1.colA // t1.colB, 0))
pw.debug.compute_and_print(t2, include_id=False)
```

Show Code Results

```
res
0
1
2
```

[pw.**iterate**(func, iteration\_limit=None, \*\*kwargs)](https://pathway.com/developers/api-docs/pathway/#pathway.iterate)
---------------------------------------------------------------------------------------------------------------------------

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/common.py#L38-L91)Iterate function until fixed point. Function has to take only Table arguments. Function has to return a single Table, a tuple of Tables, or a dict of Tables. Iterate returns the same shape of arguments as the `func` function: either a single Table, a tuple of Tables, or a dict of Tables, respectively. Initial arguments to function are passed through kwargs.

Example:

```
import pathway as pw
def collatz_transformer(iterated):
    @pw.udf(deterministic=True)
    def collatz_step(x: int) -> int:
        if x == 1:
            return 1
        elif x % 2 == 0:
            return x // 2
        else:
            return 3 * x + 1
    return iterated.select(val=collatz_step(iterated.val))
tab = pw.debug.table_from_markdown('''
val
  1
  2
  3
  4
  5
  6
  7
  8''')
ret = pw.iterate(collatz_transformer, iterated=tab)
pw.debug.compute_and_print(ret, include_id=False)
```

Show Code Results

```
val
1
1
1
1
1
1
1
1
```

[pw.**join**(left, right, \*on, id=None, how=JoinMode.INNER, left\_instance=None, right\_instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.join)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/joins.py#L1105-L1160)Join self with other using the given join expression.

*   **Parameters**
    *   **left** ([`Joinable`](https://pathway.com/developers/api-docs/pathway#pathway.Joinable)) – the left side of the join, `Table` or `JoinResult`.
    *   **right** ([`Joinable`](https://pathway.com/developers/api-docs/pathway#pathway.Joinable)) – the right side of the join, `Table` or `JoinResult`.
    *   **on** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – a list of column expressions. Each must have == as the top level operation and be of the form LHS: ColumnReference == RHS: ColumnReference.
    *   **id** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference) | `None`) – optional argument for id of result, can be only self.id or other.id
    *   **how** ([`JoinMode`](https://pathway.com/developers/api-docs/pathway#pathway.JoinMode)) – by default, inner join is performed. Possible values are JoinMode.{INNER,LEFT,RIGHT,OUTER} correspond to inner, left, right and outer join respectively.
    *   **left\_instance/right\_instance** – optional arguments describing partitioning of the data into separate instances
*   **Returns**  
    _JoinResult_ – an object on which .select() may be called to extract relevant columns from the result of the join.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
age  | owner  | pet
 10  | Alice  | 1
  9  | Bob    | 1
  8  | Alice  | 2
''')
t2 = pw.debug.table_from_markdown('''
age  | owner  | pet | size
 10  | Alice  | 3   | M
 9   | Bob    | 1   | L
 8   | Tom    | 1   | XL
''')
t3 = pw.join(
    t1, t2, t1.pet == t2.pet, t1.owner == t2.owner, how=pw.JoinMode.INNER
).select(age=t1.age, owner_name=t2.owner, size=t2.size)
pw.debug.compute_and_print(t3, include_id = False)
```

Show Code Results

```
age | owner_name | size
9   | Bob        | L
```

[pw.**join\_inner**(left, right, \*on, id=None, left\_instance=None, right\_instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.join_inner)
----------------------------------------------------------------------------------------------------------------------------------------------------------------

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/joins.py#L1163-L1209)Inner-joins two tables or join results.

*   **Parameters**
    *   **left** ([`Joinable`](https://pathway.com/developers/api-docs/pathway#pathway.Joinable)) – the left side of the join, `Table` or `JoinResult`.
    *   **right** ([`Joinable`](https://pathway.com/developers/api-docs/pathway#pathway.Joinable)) – the right side of the join, `Table` or `JoinResult`.
    *   **on** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – a list of column expressions. Each must have == as the top level operation and be of the form LHS: ColumnReference == RHS: ColumnReference.
    *   **id** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference) | `None`) – optional argument for id of result, can be only self.id or other.id
    *   **left\_instance/right\_instance** – optional arguments describing partitioning of the data into separate instances
*   **Returns**  
    _JoinResult_ – an object on which .select() may be called to extract relevant columns from the result of the join.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
age  | owner  | pet
 10  | Alice  | 1
  9  | Bob    | 1
  8  | Alice  | 2
''')
t2 = pw.debug.table_from_markdown('''
age  | owner  | pet | size
 10  | Alice  | 3   | M
 9   | Bob    | 1   | L
 8   | Tom    | 1   | XL
''')
t3 = pw.join_inner(t1, t2, t1.pet == t2.pet, t1.owner == t2.owner).select(
    age=t1.age, owner_name=t2.owner, size=t2.size
)
pw.debug.compute_and_print(t3, include_id = False)
```

Show Code Results

```
age | owner_name | size
9   | Bob        | L
```

[pw.**join\_left**(left, right, \*on, id=None, left\_instance=None, right\_instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.join_left)
--------------------------------------------------------------------------------------------------------------------------------------------------------------

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/joins.py#L1212-L1279)Left-joins two tables or join results.

*   **Parameters**
    *   **self** – the left side of the join, `Table` or `JoinResult`.
    *   **other** – the right side of the join, `Table` or `JoinResult`.
    *   **\*on** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – Columns to join, syntax self.col1 == other.col2
    *   **id** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference) | `None`) – optional id column of the result
    *   **left\_instance/right\_instance** – optional arguments describing partitioning of the data into separate instances

Remarks: args cannot contain id column from either of tables, as the result table has id column with auto-generated ids; it can be selected by assigning it to a column with defined name (passed in kwargs)

Behavior:

*   for rows from the left side that were not matched with the right side, missing values on the right are replaced with None
*   rows from the right side that were not matched with the left side are skipped
*   for rows that were matched the behavior is the same as that of an inner join.

*   **Returns**  
    _JoinResult_ – an object on which .select() may be called to extract relevant columns from the result of the join.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
        | a  | b
      1 | 11 | 111
      2 | 12 | 112
      3 | 13 | 113
      4 | 13 | 114
    '''
)
t2 = pw.debug.table_from_markdown(
    '''
        | c  | d
      1 | 11 | 211
      2 | 12 | 212
      3 | 14 | 213
      4 | 14 | 214
    '''
)
pw.debug.compute_and_print(pw.join_left(t1, t2, t1.a == t2.c
).select(t1.a, t2_c=t2.c, s=pw.require(t1.b + t2.d, t2.id)),
include_id=False)
```

Show Code Results

```
a  | t2_c | s
11 | 11   | 322
12 | 12   | 324
13 |      |
13 |      |
```

[pw.**join\_outer**(left, right, \*on, id=None, left\_instance=None, right\_instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.join_outer)
----------------------------------------------------------------------------------------------------------------------------------------------------------------

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/joins.py#L1355-L1422)Outer-joins two tables or join results.

*   **Parameters**
    *   **self** – the left side of the join, `Table` or `JoinResult`.
    *   **other** – the right side of the join, `Table` or `JoinResult`.
    *   **\*on** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – Columns to join, syntax self.col1 == other.col2
    *   **id** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference) | `None`) – optional id column of the result
    *   **instance** – optional argument describing partitioning of the data into separate instances

Remarks: args cannot contain id column from either of tables, as the result table has id column with auto-generated ids; it can be selected by assigning it to a column with defined name (passed in kwargs)

Behavior:

*   for rows from the left side that were not matched with the right side, missing values on the right are replaced with None
*   for rows from the right side that were not matched with the left side, missing values on the left are replaced with None
*   for rows that were matched the behavior is the same as that of an inner join.

*   **Returns**  
    _JoinResult_ – an object on which .select() may be called to extract relevant columns from the result of the join.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
        | a  | b
      1 | 11 | 111
      2 | 12 | 112
      3 | 13 | 113
      4 | 13 | 114
    '''
)
t2 = pw.debug.table_from_markdown(
    '''
        | c  | d
      1 | 11 | 211
      2 | 12 | 212
      3 | 14 | 213
      4 | 14 | 214
    '''
)
pw.debug.compute_and_print(pw.join_outer(t1, t2, t1.a == t2.c
).select(t1.a, t2_c=t2.c, s=pw.require(t1.b + t2.d, t1.id, t2.id)),
include_id=False)
```

Show Code Results

```
a  | t2_c | s
   | 14   |
   | 14   |
11 | 11   | 322
12 | 12   | 324
13 |      |
13 |      |
```

[pw.**join\_right**(left, right, \*on, id=None, left\_instance=None, right\_instance=None)](https://pathway.com/developers/api-docs/pathway/#pathway.join_right)
----------------------------------------------------------------------------------------------------------------------------------------------------------------

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/joins.py#L1282-L1352)Outer-joins two tables or join results.

*   **Parameters**
    *   **self** – the left side of the join, `Table` or `JoinResult`.
    *   **other** – the right side of the join, `Table` or `JoinResult`.
    *   **\*on** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression)) – Columns to join, syntax self.col1 == other.col2
    *   **id** ([`ColumnReference`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnReference) | `None`) – optional id column of the result
    *   **left\_instance/right\_instance** – optional arguments describing partitioning of the data into separate instances

Remarks: args cannot contain id column from either of tables, as the result table has id column with auto-generated ids; it can be selected by assigning it to a column with defined name (passed in kwargs)

Behavior:

*   rows from the left side that were not matched with the right side are skipped
*   for rows from the right side that were not matched with the left side, missing values on the left are replaced with None
*   for rows that were matched the behavior is the same as that of an inner join.

*   **Returns**  
    _JoinResult_ – an object on which .select() may be called to extract relevant columns from the result of the join.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
        | a  | b
      1 | 11 | 111
      2 | 12 | 112
      3 | 13 | 113
      4 | 13 | 114
    '''
)
t2 = pw.debug.table_from_markdown(
    '''
        | c  | d
      1 | 11 | 211
      2 | 12 | 212
      3 | 14 | 213
      4 | 14 | 214
    '''
)
pw.debug.compute_and_print(pw.join_right(t1, t2, t1.a == t2.c
).select(t1.a, t2_c=t2.c, s=pw.require(pw.coalesce(t1.b,0) + t2.d,t1.id)),
include_id=False)
```

Show Code Results

```
a  | t2_c | s
   | 14   |
   | 14   |
11 | 11   | 322
12 | 12   | 324
```

*   **Returns**  
    OuterJoinResult object

[pw.**make\_tuple**(\*args)](https://pathway.com/developers/api-docs/pathway/#pathway.make_tuple)
-------------------------------------------------------------------------------------------------

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/common.py#L359-L396)Creates a tuple from the provided expressions.

*   **Parameters**  
    **args** (`Union`\[[`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression), `None`, `int`, `float`, `str`, `bytes`, `bool`, `Pointer`, `datetime`, `timedelta`, `ndarray`, [`Json`](https://pathway.com/developers/api-docs/pathway#pathway.Json), `dict`\[`str`, `Any`\], `tuple`\[`Any`, `...`\], `Error`\]) – a list of expressions to be put in a tuple
*   **Returns**  
    tuple

**NOTE**: \* Each cell in the output column will be a tuple containing the corresponding values from the input columns.

*   The order of values in each tuple will match the order of the input columns.
*   If any of the input columns have missing values, the resulting tuples will contain None for those positions.

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
a | b  | c
1 | 10 | a
2 | 20 |
3 | 30 | c
'''
)
table_with_tuple = table.select(res=pw.make_tuple(pw.this.a, pw.this.b, pw.this.c))
pw.debug.compute_and_print(table_with_tuple, include_id=False)
```

Show Code Results

```
res
(1, 10, 'a')
(2, 20, None)
(3, 30, 'c')
```

[pw.**pandas\_transformer**(output\_schema, output\_universe=None)](https://pathway.com/developers/api-docs/pathway/#pathway.pandas_transformer)
------------------------------------------------------------------------------------------------------------------------------------------------

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/stdlib/utils/pandas_transformer.py#L124-L178)Decorator that turns python function operating on pandas.DataFrame into pathway transformer.

Input universes are converted into input DataFrame indexes. The resulting index is treated as the output universe, so it must maintain uniqueness and be of integer type.

*   **Parameters**
    *   **output\_schema** (`type`\[[`Schema`](https://pathway.com/developers/api-docs/pathway#pathway.Schema)\]) – Schema of a resulting table.
    *   **output\_universe** (`str` | `int` | `None`) – Index or name of an argument whose universe will be used in resulting table. Defaults to None.
*   **Returns**  
    Transformer that can be applied on Pathway tables.

Example:

```
import pathway as pw
input = pw.debug.table_from_markdown(
    '''
    | foo  | bar
0   | 10   | 100
1   | 20   | 200
2   | 30   | 300
'''
)
class Output(pw.Schema):
    sum: int
@pw.pandas_transformer(output_schema=Output)
def sum_cols(t: pd.DataFrame) -> pd.DataFrame:
    return pd.DataFrame(t.sum(axis=1))
output = sum_cols(input)
pw.debug.compute_and_print(output, include_id=False)
```

Show Code Results

```
sum
110
220
330
```

[pw.**require**(val, \*deps)](https://pathway.com/developers/api-docs/pathway/#pathway.require)
-----------------------------------------------------------------------------------------------

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/common.py#L300-L323)Returns val iff every dep in deps is not-None. Returns None otherwise.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
colA   colB
     |   10
   2 |
     |
   4 |    7''')
t2 = t1.select(t1.colA, t1.colB, col=pw.require(t1.colA + t1.colB, t1.colA, t1.colB))
pw.debug.compute_and_print(t2, include_id=False)
```

Show Code Results

```
colA | colB | col
     |      |
     | 10   |
2    |      |
4    | 7    | 11
```

[pw.**run**(\*, debug=False, monitoring\_level=MonitoringLevel.AUTO, with\_http\_server=False, default\_logging=True, persistence\_config=None, runtime\_typechecking=None, license\_key=None, terminate\_on\_error=None)](https://pathway.com/developers/api-docs/pathway/#pathway.run)
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/run.py#L11-L52)Runs the computation graph.

*   **Parameters**
    *   **debug** (`bool`) – enable output out of table.debug() operators
    *   **monitoring\_level** ([`MonitoringLevel`](https://pathway.com/developers/api-docs/pathway#pathway.MonitoringLevel)) – the verbosity of stats monitoring mechanism. One of pathway.MonitoringLevel.NONE, pathway.MonitoringLevel.IN\_OUT, pathway.MonitoringLevel.ALL. If unset, pathway will choose between NONE and IN\_OUT based on output interactivity.
    *   **with\_http\_server** (`bool`) – whether to start a http server with runtime metrics. \[will be deprecated soon\] Learn more about Pathway monitoring in a [tutorial](https://pathway.com/developers/user-guide/deployment/pathway-monitoring/) .
    *   **default\_logging** (`bool`) – whether to allow pathway to set its own logging handler. Set it to False if you want to set your own logging handler.
    *   **persistence\_config** ([`Config`](https://pathway.com/developers/api-docs/pathway-persistence#pathway.persistence.Config) | `None`) – the config for persisting the state in case this persistence is required.
    *   **runtime\_typechecking** (`bool` | `None`) – enables additional strict type checking at runtime
    *   **terminate\_on\_error** (`bool` | `None`) – whether to terminate the computation if the data/user-logic error occurs

[pw.**run\_all**(\*, debug=False, monitoring\_level=MonitoringLevel.AUTO, with\_http\_server=False, default\_logging=True, persistence\_config=None, runtime\_typechecking=None, license\_key=None, terminate\_on\_error=None)](https://pathway.com/developers/api-docs/pathway/#pathway.run_all)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/run.py#L55-L96)Runs the computation graph with disabled tree-shaking optimization.

*   **Parameters**
    *   **debug** (`bool`) – enable output out of table.debug() operators
    *   **monitoring\_level** ([`MonitoringLevel`](https://pathway.com/developers/api-docs/pathway#pathway.MonitoringLevel)) – the verbosity of stats monitoring mechanism. One of pathway.MonitoringLevel.NONE, pathway.MonitoringLevel.IN\_OUT, pathway.MonitoringLevel.ALL. If unset, pathway will choose between NONE and IN\_OUT based on output interactivity.
    *   **with\_http\_server** (`bool`) – whether to start a http server with runtime metrics. \[will be deprecated soon\] Learn more about Pathway monitoring in a [tutorial](https://pathway.com/developers/user-guide/deployment/pathway-monitoring/) .
    *   **default\_logging** (`bool`) – whether to allow pathway to set its own logging handler. Set it to False if you want to set your own logging handler.
    *   **persistence\_config** ([`Config`](https://pathway.com/developers/api-docs/pathway-persistence#pathway.persistence.Config) | `None`) – the config for persisting the state in case this persistence is required.
    *   **runtime\_typechecking** (`bool` | `None`) – enables additional strict type checking at runtime
    *   **terminate\_on\_error** (`bool` | `None`) – whether to terminate the computation if the data/user-logic error occurs

[pw.**schema\_builder**(columns, \*, name=None, properties=SchemaProperties(), id\_type=Pointer)](https://pathway.com/developers/api-docs/pathway/#pathway.schema_builder)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/schema.py#L12-L40)Allows to build schema inline, from a dictionary of column definitions.

*   **Parameters**
    *   **columns** (`dict`\[`str`, `ColumnDefinition`\]) – dictionary of column definitions.
    *   **name** (`str` | `None`) – schema name.
    *   **properties** ([`SchemaProperties`](https://pathway.com/developers/api-docs/pathway#pathway.SchemaProperties)) – schema properties.
*   **Returns**  
    Schema

Example:

```
import pathway as pw
pw.schema_builder(columns={
  'key': pw.column_definition(dtype=int, primary_key=True),
  'data': pw.column_definition(dtype=int, default_value=0)
}, name="my_schema")
```

Show Code Results

```
<pathway.Schema types={'key': <class 'int'>, 'data': <class 'int'>}, id_type=pathway.engine.Pointer[int]>
```

[pw.**schema\_from\_csv**(path, \*, name=None, properties=SchemaProperties(), delimiter=',', quote='"', comment\_character=None, escape=None, double\_quote\_escapes=True, num\_parsed\_rows=None)](https://pathway.com/developers/api-docs/pathway/#pathway.schema_from_csv)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/schema.py#L832-L908)Allows to generate schema based on a CSV file. The names of the columns are taken from the header of the CSV file. Types of columns are inferred from the values, by checking if they can be parsed. Currently supported types are str, int and float.

*   **Parameters**
    *   **path** (`str`) – path to the CSV file.
    *   **name** (`str` | `None`) – schema name.
    *   **properties** ([`SchemaProperties`](https://pathway.com/developers/api-docs/pathway#pathway.SchemaProperties)) – schema properties.
    *   **delimiter** (`str`) – delimiter used in CSV file. Defaults to “,”.
    *   **quote** (`str`) – quote character used in CSV file. Defaults to ‘”’.
    *   **comment\_character** (`str` | `None`) – character used in CSV file to denote comments. Defaults to None
    *   **escape** (`str` | `None`) – escape character used in CSV file. Defaults to None.
    *   **double\_quote\_escapes** (`bool`) – enable escapes of double quotes. Defaults to True.
    *   **num\_parsed\_rows** (`int` | `None`) – number of rows, which will be parsed when inferring types. When set to None, all rows will be parsed. When set to 0, types of all columns will be set to str. Defaults to None.
*   **Returns**  
    Schema

[pw.**schema\_from\_dict**(columns, \*, name=None, properties=SchemaProperties())](https://pathway.com/developers/api-docs/pathway/#pathway.schema_from_dict)
-------------------------------------------------------------------------------------------------------------------------------------------------------------

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/schema.py#L765-L821)Allows to build schema inline, from a dictionary of column definitions. Compared to pw.schema\_builder, this one uses simpler structure of the dictionary, which allows it to be loaded from JSON file.

*   **Parameters**
    *   **columns** (`dict`) – dictionary of column definitions. The keys in this dictionary are names of the columns, and the values are either:
        *   type of the column
        *   dictionary with keys: “dtype”, “primary\_key”, “default\_value” and values, respectively, type of the column, whether it is a primary key, and column’s default value. The type can be given both by python class, or string with class name - that is both int and “int” are accepted.
    *   **name** (`str` | `None`) – schema name.
    *   **properties** (`dict` | [`SchemaProperties`](https://pathway.com/developers/api-docs/pathway#pathway.SchemaProperties)) – schema properties, given either as instance of SchemaProperties class or a dict specifying arguments of SchemaProperties class.
*   **Returns**  
    Schema

Example:

```
import pathway as pw
pw.schema_from_dict(columns={
  'key': {"dtype": "int", "primary_key": True},
  'data': {"dtype": "int", "default_value": 0}
}, name="my_schema")
```

Show Code Results

```
<pathway.Schema types={'key': <class 'int'>, 'data': <class 'int'>}, id_type=pathway.engine.Pointer[int]>
```

[pw.**schema\_from\_types**(\*\*kwargs)](https://pathway.com/developers/api-docs/pathway/#pathway.schema_from_types)
--------------------------------------------------------------------------------------------------------------------

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/schema.py#L128-L151)Constructs schema from kwargs: field=type.

Example:

```
import pathway as pw
s = pw.schema_from_types(foo=int, bar=str)
s
```

Show Code Results

```
<pathway.Schema types={'foo': <class 'int'>, 'bar': <class 'str'>}, id_type=<class 'pathway.engine.Pointer'>>
```

```
issubclass(s, pw.Schema)
```

Show Code Results

```
True
```

[pw.**set\_license\_key**(key)](https://pathway.com/developers/api-docs/pathway/#pathway.set_license_key)
---------------------------------------------------------------------------------------------------------

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/config.py#L125-L141)Sets Pathway license key. License key can be obtained from the [official website](https://pathway.com/get-license/).

*   **Parameters**  
    **key** (`str` | `None`) – The license key to be set. If None, any existing license key will be cleared.
*   **Returns**  
    None

Example:

```
import pathway as pw
pw.set_license_key("demo-license-key-with-telemetry")
```

[pw.**set\_monitoring\_config**(\*, server\_endpoint)](https://pathway.com/developers/api-docs/pathway/#pathway.set_monitoring_config)
--------------------------------------------------------------------------------------------------------------------------------------

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/config.py#L144-L164)Sets the monitoring server endpoint. Requires a valid Pathway Scale license key.

*   **Parameters**  
    **server\_endpoint** (`str` | `None`) – The server endpoint URL for monitoring, or None to clear the existing configuration. The endpoint should be [OTLP](https://opentelemetry.io/docs/specs/otlp/) compatible and support gRPC protocol.
*   **Returns**  
    None

Example:

```
import pathway as pw
pw.set_license_key("YOUR_LICENSE_KEY")
pw.set_monitoring_config(server_endpoint="https://example.com:4317")
```

[pw.**sql**(query, \*\*kwargs)](https://pathway.com/developers/api-docs/pathway/#pathway.sql)
---------------------------------------------------------------------------------------------

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/sql.py#L612-L683)Run a SQL query on Pathway tables.

*   **Parameters**
    *   **query** (`str`) – the SQL query to execute.
    *   **kwargs** ([`Table`](https://pathway.com/developers/api-docs/pathway-table#pathway.Table)) – the association name: table used for the execution of the SQL query. Each name:table pair links a Pathway table to a table name used in the SQL query.

Example:

```
import pathway as pw
t = pw.debug.table_from_markdown(
    """
      A  | B
      1  | 2
      4  | 3
      4  | 7
    """
)
ret = pw.sql("SELECT * FROM tab WHERE A<B", tab=t)
pw.debug.compute_and_print(ret, include_id=False)
```

Show Code Results

```
A | B
1 | 2
4 | 7
```

Supported SQL keywords and operations: SELECT, WHERE, boolean expressions, arithmetic operations, GROUP BY, HAVING, AS (alias), UNION, INTERSECTION, JOIN, and WITH.

Table and column names are case-sensitive.

Specificities of Pathway:

*   id is a reserved key word for columns, every Pathway table has a special column id. This column is not captured by \* expressions in SQL.
*   Order of columns might not be preserved with respect to SELECT query.
*   Pathway reducers (pw.count, pw.sum, etc.) aggregate over None values, while SQL aggregation functions (COUNT, SUM, etc.) skip NULL values.
*   UNION requires matching column names.
*   INTERSECT requires matching column names.

Limited support:

*   Subqueries are supported but fragile – they depend on a set of query rewriting routines from the [sqlglot](https://github.com/tobymao/sqlglot) library.
*   Additionally, using the id column in subqueries is fragile.
*   LIKE, ANY, ALL, EXISTS are not supported, or only supported in a very weak state.

Unsupported operations:

*   ordering operations: ORDER BY, LIMIT, SELECT TOP
*   INSERT INTO (Pathway tables are immutable)
*   Pathway does not support anonymous columns: they might work but we do not guarantee their behavior.
*   INTERSECT does not support INTERSECT ALL.
*   COALESCE, IFNULL are not supported.
*   FULL JOIN and NATURAL JOIN are not supported.
*   CAST is not supported

[pw.**table\_transformer**(func=None, \*, allow\_superset=True, ignore\_primary\_keys=True, allow\_subtype=True, locals=None)](https://pathway.com/developers/api-docs/pathway/#pathway.table_transformer)
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/common.py#L533-L636)Marks a function that performs operations on Tables.

As a consequence, arguments and return value, which are annotated to have type pw.Table\[S\] are checked whether they indeed have schema S.

*   **Parameters**
    *   **allow\_superset** (`bool` | `Mapping`\[`str`, `bool`\]) – if True, the columns of the table can be a superset of columns in schema. Can be given either as a bool, and this value is then used for all tables, or for each table separately, by providing a dict whose keys are names of arguments, and values are bools specifying value of allow\_superset for this argument. In the latter case to provide value for return value, provide value for key “return”. The default value is True.
    *   **ignore\_primary\_keys** (`bool` | `Mapping`\[`str`, `bool`\]) – if True, the assert won’t check whether table and schema have the same primary keys. Can be given either as a bool, and this value is then used for all tables, or for each table separately, by providing a dict whose keys are names of arguments, and values are bools specifying value of ignore\_primary\_keys for this argument. In the latter case to provide value for return value, provide value for key “return”. The default value is True.
    *   **allow\_subtype** (`bool` | `Mapping`\[`str`, `bool`\]) – if True, types in the Table can be subtypes of types in the schema. Can be given either as a bool, and this value is then used for all tables, or for each table separately, by providing a dict whose keys are names of arguments, and values are bools specifying value of allow\_subtype for this argument. In the latter case to provide value for return value, provide value for key “return”. The default value is True.
    *   **locals** (`dict`\[`str`, `Any`\] | `None`) – when Schema class, which is used as a parameter to pw.Table is defined locally, you need to pass locals() as locals argument.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
A | B
1 | 6
3 | 8
5 | 2
''')
schema = pw.schema_from_types(A=int, B=int)
result_schema = pw.schema_from_types(A=int, B=int, C=int)
@pw.table_transformer
def sum_columns(t: pw.Table[schema]) -> pw.Table[result_schema]:
    result = t.with_columns(C=pw.this.A + pw.this.B)
    return result
pw.debug.compute_and_print(sum_columns(t1), include_id=False)
```

Show Code Results

```
A | B | C
1 | 6 | 7
3 | 8 | 11
5 | 2 | 7
```

[pw.**udf**(fun, /, \*, return\_type=Ellipsis, deterministic=False, propagate\_none=False, executor=AutoExecutor(), cache\_strategy=None)](https://pathway.com/developers/api-docs/pathway/#pathway.udf)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/udfs/__init__.py#L313-L402)Create a Python UDF (user-defined function) out of a callable.

Output column type deduced from type-annotations of a function. Can be applied to a regular or asynchronous function.

*   **Parameters**
    *   **return\_type** (`Any`) – The return type of the function. Can be passed here or as a return type annotation. Defaults to `...`, meaning that the return type will be inferred from type annotation.
    *   **deterministic** (`bool`) – Whether the provided function is deterministic. In this context, it means that the function always returns the same value for the same arguments. If it is not deterministic, Pathway will memoize the results until the row deletion. If your function is deterministic, you’re **strongly encouraged** to set it to True as it will improve the performance. Defaults to False, meaning that the function is not deterministic and its results will be kept.
    *   **executor** (`Executor`) – Defines the executor of the UDF. It determines if the execution is synchronous or asynchronous. Defaults to AutoExecutor(), meaning that the execution strategy will be inferred from the function annotation. By default, if the function is a coroutine, then it is executed asynchronously. Otherwise it is executed synchronously.
    *   **cache\_strategy** ([`CacheStrategy`](https://pathway.com/developers/api-docs/udfs#pathway.udfs.CacheStrategy) | `None`) – Defines the caching mechanism. Defaults to None.

Example:

```
import pathway as pw
import asyncio
table = pw.debug.table_from_markdown(
    '''
age | owner | pet
 10 | Alice | dog
  9 |   Bob | dog
    | Alice | cat
  7 |   Bob | dog
'''
)
@pw.udf
def concat(left: str, right: str) -> str:
    return left + "-" + right
@pw.udf(propagate_none=True)
def increment(age: int) -> int:
    assert age is not None
    return age + 1
res1 = table.select(
    owner_with_pet=concat(table.owner, table.pet), new_age=increment(table.age)
)
pw.debug.compute_and_print(res1, include_id=False)
```

Show Code Results

```
owner_with_pet | new_age
Alice-cat      |
Alice-dog      | 11
Bob-dog        | 8
Bob-dog        | 10
```

```
@pw.udf
async def sleeping_concat(left: str, right: str) -> str:
    await asyncio.sleep(0.1)
    return left + "-" + right
res2 = table.select(col=sleeping_concat(table.owner, table.pet))
pw.debug.compute_and_print(res2, include_id=False)
```

Show Code Results

```
col
Alice-cat
Alice-dog
Bob-dog
Bob-dog
```

[pw.**udf\_async**(fun=None, \*, capacity=None, retry\_strategy=None, cache\_strategy=None)](https://pathway.com/developers/api-docs/pathway/#pathway.udf_async)
----------------------------------------------------------------------------------------------------------------------------------------------------------------

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/udfs/__init__.py#L461-L521)Deprecated. Use `udf` instead.

Create a Python asynchronous UDF (user-defined function) out of a callable.

Output column type deduced from type-annotations of a function. Can be applied to a regular or asynchronous function.

*   **Parameters**
    *   **capacity** (`int` | `None`) – Maximum number of concurrent operations allowed. Defaults to None, indicating no specific limit.
    *   **retry\_strategy** ([`AsyncRetryStrategy`](https://pathway.com/developers/api-docs/udfs#pathway.udfs.AsyncRetryStrategy) | `None`) – Strategy for handling retries in case of failures. Defaults to None, meaning no retries.
    *   **cache\_strategy** ([`CacheStrategy`](https://pathway.com/developers/api-docs/udfs#pathway.udfs.CacheStrategy) | `None`) – Defines the caching mechanism. Defaults to None.

Example:

```
import pathway as pw
import asyncio
@pw.udf_async
async def concat(left: str, right: str) -> str:
  await asyncio.sleep(0.1)
  return left+right
t1 = pw.debug.table_from_markdown('''
age  owner  pet
 10  Alice  dog
  9    Bob  dog
  8  Alice  cat
  7    Bob  dog''')
t2 = t1.select(col = concat(t1.owner, t1.pet))
pw.debug.compute_and_print(t2, include_id=False)
```

Show Code Results

```
col
Alicecat
Alicedog
Bobdog
Bobdog
```

[pw.**unwrap**(col)](https://pathway.com/developers/api-docs/pathway/#pathway.unwrap)
-------------------------------------------------------------------------------------

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/common.py#L399-L435)Changes the type of the column from Optional\[T\] to T. If there is any None in the column this operation will raise an exception.

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown('''
colA | colB
1    | 5
2    | 9
3    | None
4    | 15''')
t1.schema
```

Show Code Results

```
<pathway.Schema types={'colA': <class 'int'>, 'colB': int | None}, id_type=<class 'pathway.engine.Pointer'>>
```

```
pw.debug.compute_and_print(t1, include_id=False)
```

Show Code Results

```
colA | colB
1    | 5
2    | 9
3    |
4    | 15
```

```
t2 = t1.filter(t1.colA < 3)
t2.schema
```

Show Code Results

```
<pathway.Schema types={'colA': <class 'int'>, 'colB': int | None}, id_type=<class 'pathway.engine.Pointer'>>
```

```
pw.debug.compute_and_print(t2, include_id=False)
```

Show Code Results

```
colA | colB
1    | 5
2    | 9
```

```
t3 = t2.select(colB = pw.unwrap(t2.colB))
t3.schema
```

Show Code Results

```
<pathway.Schema types={'colB': <class 'int'>}, id_type=<class 'pathway.engine.Pointer'>>
```

```
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
colB
5
9
```

[pw.**wrap\_py\_object**(object, \*, serializer=None)](https://pathway.com/developers/api-docs/pathway/#pathway.wrap_py_object)
-------------------------------------------------------------------------------------------------------------------------------

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/api.py#L256-L307)A function wrapping python objects of any type to enable passing them to the engine.

*   **Parameters**
    *   **value** – a python object to be wrapped
    *   **serializer** (PyObjectWrapperSerializerProtocol | None) – a custom serializer. Has to implement `PyObjectWrapperSerializerProtocol`. If not set, `pickle` is used.

Example:

```
import pathway as pw
import dill
from dataclasses import dataclass
@dataclass
class Simple:
    a: int
    def add(self, x: int) -> int:
        return self.a + x
@pw.udf
def create_py_object(a: int) -> pw.PyObjectWrapper[Simple]:
    return pw.wrap_py_object(Simple(a), serializer=dill)
@pw.udf
def use_py_object(a: int, b: pw.PyObjectWrapper[Simple]) -> int:
    return b.value.add(a)
t = pw.debug.table_from_markdown(
    '''
    a
    1
    2
    3
'''
).with_columns(b=create_py_object(pw.this.a))
res = t.select(res=use_py_object(pw.this.a, pw.this.b))
pw.debug.compute_and_print(res, include_id=False)
```

Show Code Results

```
res
2
4
6
```

[class pw.**MonitoringLevel**](https://pathway.com/developers/api-docs/pathway/#pathway.MonitoringLevel)
--------------------------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/monitoring.py#L228-L268)

Specifies a verbosity of Pathway monitoring mechanism.

### [**AUTO** = 0](https://pathway.com/developers/api-docs/pathway/#pathway.MonitoringLevel.AUTO)

Automatically sets IN\_OUT in an interactive terminal and jupyter notebook. Sets NONE otherwise.

### [**AUTO\_ALL** = 1](https://pathway.com/developers/api-docs/pathway/#pathway.MonitoringLevel.AUTO_ALL)

Automatically sets ALL in an interactive terminal and jupyter notebook. Sets NONE otherwise.

### [**NONE** = 2](https://pathway.com/developers/api-docs/pathway/#pathway.MonitoringLevel.NONE)

No monitoring.

### [**IN\_OUT** = 3](https://pathway.com/developers/api-docs/pathway/#pathway.MonitoringLevel.IN_OUT)

Monitor input connectors and input and output latency. The latency is measured as the difference between the time when the operator processed the data and the time when pathway acquired the data.

### [**ALL** = 4](https://pathway.com/developers/api-docs/pathway/#pathway.MonitoringLevel.ALL)

Monitor input connectors and latency for each operator in the execution graph. The latency is measured as the difference between the time when the operator processed the data and the time when pathway acquired the data.

[class pw.**DateTimeNamespace**(expression)](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace)
----------------------------------------------------------------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/date_time.py#L19-L1613)

A module containing methods related to DateTimes. They can be called using a dt attribute of an expression.

Typical use:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     |         t1
   1 | 2023-05-15T14:13:00
'''
)
table_with_datetime = table.select(t1=table.t1.dt.strptime("%Y-%m-%dT%H:%M:%S"))
table_with_days = table_with_datetime.select(day=table_with_datetime.t1.dt.day())
```

### [**add\_duration\_in\_timezone**(duration, timezone)](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.add_duration_in_timezone)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/date_time.py#L840-L882)Adds Duration to DateTimeNaive taking into account the time zone.

*   **Parameters**
    *   **duration** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression) | `Timedelta`) – Duration to be added to DateTime.
    *   **timezone** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression) | `str`) – The time zone to perform addition in.
*   **Returns**  
    DateTimeNaive

Example:

```
import pathway as pw
import datetime
t1 = pw.debug.table_from_markdown(
    '''
     |        date
   1 | 2023-03-26T01:23:00
   2 | 2023-03-27T01:23:00
   3 | 2023-10-29T01:23:00
   4 | 2023-10-30T01:23:00
'''
)
fmt = "%Y-%m-%dT%H:%M:%S"
t2 = t1.select(date=pw.this.date.dt.strptime(fmt=fmt))
t3 = t2.with_columns(
    new_date=pw.this.date.dt.add_duration_in_timezone(
        datetime.timedelta(hours=2), timezone="Europe/Warsaw"
    ),
)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
date                | new_date
2023-03-26 01:23:00 | 2023-03-26 04:23:00
2023-03-27 01:23:00 | 2023-03-27 03:23:00
2023-10-29 01:23:00 | 2023-10-29 02:23:00
2023-10-30 01:23:00 | 2023-10-30 03:23:00
```

### [**day**()](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.day)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/date_time.py#L279-L312)Extracts day from a DateTime.

*   **Returns**  
    Day as int. 1 <= day <= 31 (depending on a month)

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     |               t1
   1 | 1974-03-12T00:00:00
   2 | 2023-03-25T12:00:00
   3 | 2023-05-15T14:13:00
'''
)
table_with_datetime = table.select(t1=table.t1.dt.strptime("%Y-%m-%dT%H:%M:%S"))
table_with_days = table_with_datetime.select(day=table_with_datetime.t1.dt.day())
pw.debug.compute_and_print(table_with_days, include_id=False)
```

Show Code Results

```
day
12
15
25
```

### [**days**()](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.days)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/date_time.py#L1379-L1421)The total number of days in a Duration.

*   **Returns**  
    Days as int.

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     |         t1          |         t2
   0 | 2023-03-15T00:00:00 | 2023-05-15T10:13:23
   1 | 2023-04-15T00:00:00 | 2023-05-15T10:00:00
   2 | 2023-05-01T10:00:00 | 2023-05-15T10:00:00
   3 | 2023-05-15T10:00:00 | 2023-05-15T09:00:00
   4 | 2023-05-15T10:00:00 | 2023-05-15T11:00:00
   5 | 2023-05-16T12:13:00 | 2023-05-15T10:00:00
   6 | 2024-05-15T14:13:23 | 2023-05-15T10:00:00
'''
)
fmt = "%Y-%m-%dT%H:%M:%S"
table_with_datetimes = table.select(
    t1=pw.this.t1.dt.strptime(fmt=fmt), t2=pw.this.t2.dt.strptime(fmt=fmt)
)
table_with_diff = table_with_datetimes.select(diff=pw.this.t1 - pw.this.t2)
table_with_days = table_with_diff.select(days=pw.this["diff"].dt.days())
pw.debug.compute_and_print(table_with_days, include_id=False)
```

Show Code Results

```
days
-61
-30
-14
0
0
1
366
```

### [**floor**(duration)](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.floor)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/date_time.py#L1047-L1117)Truncates DateTime to precision specified by duration argument.

*   **Parameters**  
    **duration** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression) | `Timedelta` | `str`) – truncation precision

**NOTE**: Duration can be given as a string, in such case we accept aliases used by [Pandas](https://pandas.pydata.org/docs/user_guide/timeseries.html#timeseries-offset-aliases) that represent a fixed duration, so e.g. “M” will not be accepted. For ambiguous frequencies, you can use other methods, e.g. `column.dt.month()` instead of `column.dt.floor("1M")`.

*   **Returns**  
    DateTimeNaive or DateTimeUtc depending on the type of an object the method was called on

Examples:

```
import pathway as pw
import datetime
t1 = pw.debug.table_from_markdown(
    '''
     |         date
   1 | 2023-05-15T12:23:12
   2 | 2023-05-15T12:33:21
   3 | 2023-05-15T13:20:35
   4 | 2023-05-15T13:51:41
'''
)
fmt = "%Y-%m-%dT%H:%M:%S"
t2 = t1.select(date=pw.this.date.dt.strptime(fmt=fmt))
res = t2.with_columns(
    truncated_to_hours=pw.this.date.dt.floor(datetime.timedelta(hours=1)),
    truncated_to_10_min=pw.this.date.dt.floor(datetime.timedelta(minutes=10)),
    truncated_to_15_s=pw.this.date.dt.floor(datetime.timedelta(seconds=15)),
)
pw.debug.compute_and_print(res, include_id=False)
```

Show Code Results

```
date                | truncated_to_hours  | truncated_to_10_min | truncated_to_15_s
2023-05-15 12:23:12 | 2023-05-15 12:00:00 | 2023-05-15 12:20:00 | 2023-05-15 12:23:00
2023-05-15 12:33:21 | 2023-05-15 12:00:00 | 2023-05-15 12:30:00 | 2023-05-15 12:33:15
2023-05-15 13:20:35 | 2023-05-15 13:00:00 | 2023-05-15 13:20:00 | 2023-05-15 13:20:30
2023-05-15 13:51:41 | 2023-05-15 13:00:00 | 2023-05-15 13:50:00 | 2023-05-15 13:51:30
```

### [**from\_timestamp**(unit)](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.from_timestamp)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/date_time.py#L1466-L1523)Converts timestamp represented as an int or float to DateTimeNaive.

*   **Parameters**  
    **unit** (`str`) – unit of a timestamp. It has to be one of ‘s’, ‘ms’, ‘us’, ‘ns’.
*   **Returns**  
    DateTimeNaive

Example:

```
import pathway as pw
timestamps_1 = pw.debug.table_from_markdown(
    '''
  | timestamp
1 |    10
2 | 1685969950
'''
)
datetimes_1 = timestamps_1.select(date=pw.this.timestamp.dt.from_timestamp(unit="s"))
pw.debug.compute_and_print(datetimes_1, include_id=False)
```

Show Code Results

```
date
1970-01-01 00:00:10
2023-06-05 12:59:10
```

```
timestamps_2 = pw.debug.table_from_markdown(
    '''
  |   timestamp
1 |    10.123
2 | 1685969950.4567
'''
)
datetimes_2 = timestamps_2.select(date=pw.this.timestamp.dt.from_timestamp(unit="s"))
pw.debug.compute_and_print(datetimes_2, include_id=False)
```

Show Code Results

```
date
1970-01-01 00:00:10.123000
2023-06-05 12:59:10.456700160
```

### [**hour**()](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.hour)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/date_time.py#L244-L277)Extracts hour from a DateTime.

*   **Returns**  
    Hour as int. 0 <= hour < 24

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     |               t1
   1 | 2023-05-15T00:00:00
   2 | 2023-05-15T12:00:00
   3 | 2023-05-15T14:13:00
'''
)
table_with_datetime = table.select(t1=table.t1.dt.strptime("%Y-%m-%dT%H:%M:%S"))
table_with_hours = table_with_datetime.select(hour=table_with_datetime.t1.dt.hour())
pw.debug.compute_and_print(table_with_hours, include_id=False)
```

Show Code Results

```
hour
0
12
14
```

### [**hours**()](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.hours)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/date_time.py#L1335-L1377)The total number of hours in a Duration.

*   **Returns**  
    Hours as int.

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     |         t1          |         t2
   0 | 2023-05-15T00:00:00 | 2023-05-15T10:13:23
   1 | 2023-05-15T00:00:00 | 2023-05-15T10:00:00
   2 | 2023-05-15T10:00:00 | 2023-05-15T10:00:00
   3 | 2023-05-15T10:00:23 | 2023-05-15T10:00:00
   4 | 2023-05-15T12:13:00 | 2023-05-15T10:00:00
   5 | 2023-05-15T14:13:23 | 2023-05-15T10:00:00
   6 | 2023-05-16T10:13:23 | 2023-05-15T10:00:00
'''
)
fmt = "%Y-%m-%dT%H:%M:%S"
table_with_datetimes = table.select(
    t1=pw.this.t1.dt.strptime(fmt=fmt), t2=pw.this.t2.dt.strptime(fmt=fmt)
)
table_with_diff = table_with_datetimes.select(diff=pw.this.t1 - pw.this.t2)
table_with_hours = table_with_diff.select(hours=pw.this["diff"].dt.hours())
pw.debug.compute_and_print(table_with_hours, include_id=False)
```

Show Code Results

```
hours
-10
-10
0
0
2
4
24
```

### [**microsecond**()](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.microsecond)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/date_time.py#L80-L121)Extracts microseconds from a DateTime.

*   **Returns**  
    Microsecond as int. 0 <= microsecond < 1\_000\_000

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     |               t1
   1 | 2023-05-15T10:13:00.000000000
   2 | 2023-05-15T10:13:00.000012000
   3 | 2023-05-15T10:13:00.123456789
   4 | 2023-05-15T10:13:23.123456789
'''
)
table_with_datetime = table.select(t1=table.t1.dt.strptime("%Y-%m-%dT%H:%M:%S.%f"))
table_with_microseconds = table_with_datetime.select(
    microsecond=table_with_datetime.t1.dt.microsecond()
)
pw.debug.compute_and_print(table_with_microseconds, include_id=False)
```

Show Code Results

```
microsecond
0
12
123456
123456
```

### [**microseconds**()](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.microseconds)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/date_time.py#L1163-L1205)The total number of microseconds in a Duration.

*   **Returns**  
    Microseconds as int.

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     |               t1              |               t2
   0 | 2023-05-15T10:13:00.000000000 | 2023-05-15T10:13:23.123456789
   1 | 2023-05-15T10:13:00.000000000 | 2023-05-15T10:13:00.000000000
   2 | 2023-05-15T10:13:00.000012000 | 2023-05-15T10:13:00.000000000
   3 | 2023-05-15T10:13:00.123456789 | 2023-05-15T10:13:00.000000000
   4 | 2023-05-15T10:13:23.123456789 | 2023-05-15T10:13:00.000000000
   5 | 2023-05-16T10:13:23.123456789 | 2023-05-15T10:13:00.000000000
'''
)
fmt = "%Y-%m-%dT%H:%M:%S.%f"
table_with_datetimes = table.select(
    t1=pw.this.t1.dt.strptime(fmt=fmt), t2=pw.this.t2.dt.strptime(fmt=fmt)
)
table_with_diff = table_with_datetimes.select(diff=pw.this.t1 - pw.this.t2)
table_with_microseconds = table_with_diff.select(
    microseconds=pw.this["diff"].dt.microseconds()
)
pw.debug.compute_and_print(table_with_microseconds, include_id=False)
```

Show Code Results

```
microseconds
-23123456
0
12
123456
23123456
86423123456
```

### [**millisecond**()](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.millisecond)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/date_time.py#L123-L164)Extracts milliseconds from a DateTime.

*   **Returns**  
    Millisecond as int. 0 <= millisecond < 1\_000

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     |               t1
   1 | 2023-05-15T10:13:00.000000000
   2 | 2023-05-15T10:13:00.012000000
   3 | 2023-05-15T10:13:00.123456789
   4 | 2023-05-15T10:13:23.123456789
'''
)
table_with_datetime = table.select(t1=table.t1.dt.strptime("%Y-%m-%dT%H:%M:%S.%f"))
table_with_milliseconds = table_with_datetime.select(
    millisecond=table_with_datetime.t1.dt.millisecond()
)
pw.debug.compute_and_print(table_with_milliseconds, include_id=False)
```

Show Code Results

```
millisecond
0
12
123
123
```

### [**milliseconds**()](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.milliseconds)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/date_time.py#L1207-L1249)The total number of milliseconds in a Duration.

*   **Returns**  
    Milliseconds as int.

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     |               t1              |               t2
   0 | 2023-05-15T10:13:00.000000000 | 2023-05-15T10:13:23.123456789
   1 | 2023-05-15T10:13:00.000000000 | 2023-05-15T10:13:00.000000000
   2 | 2023-05-15T10:13:00.012000000 | 2023-05-15T10:13:00.000000000
   3 | 2023-05-15T10:13:00.123456789 | 2023-05-15T10:13:00.000000000
   4 | 2023-05-15T10:13:23.123456789 | 2023-05-15T10:13:00.000000000
   5 | 2023-05-16T10:13:23.123456789 | 2023-05-15T10:13:00.000000000
'''
)
fmt = "%Y-%m-%dT%H:%M:%S.%f"
table_with_datetimes = table.select(
    t1=pw.this.t1.dt.strptime(fmt=fmt), t2=pw.this.t2.dt.strptime(fmt=fmt)
)
table_with_diff = table_with_datetimes.select(diff=pw.this.t1 - pw.this.t2)
table_with_milliseconds = table_with_diff.select(
    milliseconds=pw.this["diff"].dt.milliseconds()
)
pw.debug.compute_and_print(table_with_milliseconds, include_id=False)
```

Show Code Results

```
milliseconds
-23123
0
12
123
23123
86423123
```

### [**minute**()](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.minute)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/date_time.py#L205-L242)Extracts minute from a DateTime.

*   **Returns**  
    Minute as int. 0 <= minute < 60

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     |               t1
   1 | 2023-05-15T10:00:00
   2 | 2023-05-15T10:00:23
   3 | 2023-05-15T10:13:00
   4 | 2023-05-15T10:13:23
'''
)
table_with_datetime = table.select(t1=table.t1.dt.strptime("%Y-%m-%dT%H:%M:%S"))
table_with_minutes = table_with_datetime.select(
    minute=table_with_datetime.t1.dt.minute()
)
pw.debug.compute_and_print(table_with_minutes, include_id=False)
```

Show Code Results

```
minute
0
0
13
13
```

### [**minutes**()](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.minutes)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/date_time.py#L1293-L1333)The total number of minutes in a Duration.

*   **Returns**  
    Minutes as int.

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     |         t1          |         t2
   0 | 2023-05-15T10:00:00 | 2023-05-15T10:13:23
   1 | 2023-05-15T10:00:00 | 2023-05-15T10:00:00
   2 | 2023-05-15T10:00:23 | 2023-05-15T10:00:00
   3 | 2023-05-15T10:13:00 | 2023-05-15T10:00:00
   4 | 2023-05-15T10:13:23 | 2023-05-15T10:00:00
   5 | 2023-05-16T10:13:23 | 2023-05-15T10:00:00
'''
)
fmt = "%Y-%m-%dT%H:%M:%S"
table_with_datetimes = table.select(
    t1=pw.this.t1.dt.strptime(fmt=fmt), t2=pw.this.t2.dt.strptime(fmt=fmt)
)
table_with_diff = table_with_datetimes.select(diff=pw.this.t1 - pw.this.t2)
table_with_minutes = table_with_diff.select(minutes=pw.this["diff"].dt.minutes())
pw.debug.compute_and_print(table_with_minutes, include_id=False)
```

Show Code Results

```
minutes
-13
0
0
13
13
1453
```

### [**month**()](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.month)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/date_time.py#L314-L347)Extracts month from a DateTime.

*   **Returns**  
    Month as int. 1 <= month <= 12

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     |               t1
   1 | 1974-03-12T00:00:00
   2 | 2023-03-25T12:00:00
   3 | 2023-05-15T14:13:00
'''
)
table_with_datetime = table.select(t1=table.t1.dt.strptime("%Y-%m-%dT%H:%M:%S"))
table_with_months = table_with_datetime.select(month=table_with_datetime.t1.dt.month())
pw.debug.compute_and_print(table_with_months, include_id=False)
```

Show Code Results

```
month
3
3
5
```

### [**nanosecond**()](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.nanosecond)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/date_time.py#L41-L78)Extracts nanoseconds from a DateTime.

*   **Returns**  
    Nanosecond as int. 0 <= nanosecond < 1\_000\_000\_000

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     |               t1
   1 | 2023-05-15T10:13:00.000000000
   2 | 2023-05-15T10:13:00.000000012
   3 | 2023-05-15T10:13:00.123456789
   4 | 2023-05-15T10:13:23.123456789
'''
)
table_with_datetime = table.select(t1=table.t1.dt.strptime("%Y-%m-%dT%H:%M:%S.%f"))
table_with_nanoseconds = table_with_datetime.select(
    nanosecond=table_with_datetime.t1.dt.nanosecond()
)
pw.debug.compute_and_print(table_with_nanoseconds, include_id=False)
```

Show Code Results

```
nanosecond
0
12
123456789
123456789
```

### [**nanoseconds**()](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.nanoseconds)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/date_time.py#L1119-L1161)The total number of nanoseconds in a Duration.

*   **Returns**  
    Nanoseconds as int.

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     |               t1              |               t2
   0 | 2023-05-15T10:13:00.000000000 | 2023-05-15T10:13:23.123456789
   1 | 2023-05-15T10:13:00.000000000 | 2023-05-15T10:13:00.000000000
   2 | 2023-05-15T10:13:00.000000012 | 2023-05-15T10:13:00.000000000
   3 | 2023-05-15T10:13:00.123456789 | 2023-05-15T10:13:00.000000000
   4 | 2023-05-15T10:13:23.123456789 | 2023-05-15T10:13:00.000000000
   5 | 2023-05-16T10:13:23.123456789 | 2023-05-15T10:13:00.000000000
'''
)
fmt = "%Y-%m-%dT%H:%M:%S.%f"
table_with_datetimes = table.select(
    t1=pw.this.t1.dt.strptime(fmt=fmt), t2=pw.this.t2.dt.strptime(fmt=fmt)
)
table_with_diff = table_with_datetimes.select(diff=pw.this.t1 - pw.this.t2)
table_with_nanoseconds = table_with_diff.select(
    nanoseconds=pw.this["diff"].dt.nanoseconds()
)
pw.debug.compute_and_print(table_with_nanoseconds, include_id=False)
```

Show Code Results

```
nanoseconds
-23123456789
0
12
123456789
23123456789
86423123456789
```

### [**round**(duration)](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.round)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/date_time.py#L975-L1045)Rounds DateTime to precision specified by duration argument.

*   **Parameters**  
    **duration** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression) | `Timedelta` | `str`) – rounding precision

**NOTE**: Duration can be given as a string, in such case we accept aliases used by [Pandas](https://pandas.pydata.org/docs/user_guide/timeseries.html#timeseries-offset-aliases) that represent a fixed duration, so e.g. “M” will not be accepted. For ambiguous frequencies, you can use other methods, e.g. `column.dt.month()` instead of `column.dt.floor("1M")`.

*   **Returns**  
    DateTimeNaive or DateTimeUtc depending on the type of an object the method was called on

Examples:

```
import pathway as pw
import datetime
t1 = pw.debug.table_from_markdown(
    '''
     |         date
   1 | 2023-05-15T12:23:12
   2 | 2023-05-15T12:33:21
   3 | 2023-05-15T13:20:35
   4 | 2023-05-15T13:51:41
'''
)
fmt = "%Y-%m-%dT%H:%M:%S"
t2 = t1.select(date=pw.this.date.dt.strptime(fmt=fmt))
res = t2.with_columns(
    rounded_to_hours=pw.this.date.dt.round(datetime.timedelta(hours=1)),
    rounded_to_10_min=pw.this.date.dt.round(datetime.timedelta(minutes=10)),
    rounded_to_15_s=pw.this.date.dt.round(datetime.timedelta(seconds=15)),
)
pw.debug.compute_and_print(res, include_id=False)
```

Show Code Results

```
date                | rounded_to_hours    | rounded_to_10_min   | rounded_to_15_s
2023-05-15 12:23:12 | 2023-05-15 12:00:00 | 2023-05-15 12:20:00 | 2023-05-15 12:23:15
2023-05-15 12:33:21 | 2023-05-15 13:00:00 | 2023-05-15 12:30:00 | 2023-05-15 12:33:15
2023-05-15 13:20:35 | 2023-05-15 13:00:00 | 2023-05-15 13:20:00 | 2023-05-15 13:20:30
2023-05-15 13:51:41 | 2023-05-15 14:00:00 | 2023-05-15 13:50:00 | 2023-05-15 13:51:45
```

### [**second**()](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.second)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/date_time.py#L166-L203)Extracts seconds from a DateTime.

*   **Returns**  
    Second as int. 0 <= second < 60

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     |               t1
   1 | 2023-05-15T10:13:00.000000000
   2 | 2023-05-15T10:13:00.123456789
   3 | 2023-05-15T10:13:23.000000000
   4 | 2023-05-15T10:13:23.123456789
'''
)
table_with_datetime = table.select(t1=table.t1.dt.strptime("%Y-%m-%dT%H:%M:%S.%f"))
table_with_seconds = table_with_datetime.select(
    second=table_with_datetime.t1.dt.second()
)
pw.debug.compute_and_print(table_with_seconds, include_id=False)
```

Show Code Results

```
second
0
0
23
23
```

### [**seconds**()](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.seconds)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/date_time.py#L1251-L1291)The total number of seconds in a Duration.

*   **Returns**  
    Seconds as int.

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     |               t1              |               t2
   0 | 2023-05-15T10:13:00.000000000 | 2023-05-15T10:13:23.123456789
   1 | 2023-05-15T10:13:00.000000000 | 2023-05-15T10:13:00.000000000
   2 | 2023-05-15T10:13:00.123456789 | 2023-05-15T10:13:00.000000000
   3 | 2023-05-15T10:13:23.000000000 | 2023-05-15T10:13:00.000000000
   4 | 2023-05-15T10:13:23.123456789 | 2023-05-15T10:13:00.000000000
   5 | 2023-05-16T10:13:23.123456789 | 2023-05-15T10:13:00.000000000
'''
)
fmt = "%Y-%m-%dT%H:%M:%S.%f"
table_with_datetimes = table.select(
    t1=pw.this.t1.dt.strptime(fmt=fmt), t2=pw.this.t2.dt.strptime(fmt=fmt)
)
table_with_diff = table_with_datetimes.select(diff=pw.this.t1 - pw.this.t2)
table_with_seconds = table_with_diff.select(seconds=pw.this["diff"].dt.seconds())
pw.debug.compute_and_print(table_with_seconds, include_id=False)
```

Show Code Results

```
seconds
-23
0
0
23
23
86423
```

### [**strftime**(fmt)](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.strftime)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/date_time.py#L497-L553)Converts a DateTime to a string.

*   **Parameters**  
    **fmt** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression) | `str`) – Format string. We use the specifiers of [chrono](https://docs.rs/chrono/latest/chrono/format/strftime/index.html) library. In most cases they are identical to standard python specifiers in [strftime](https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior) .
*   **Returns**  
    str

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     |               t1
   1 | 1970-02-03T10:13:00
   2 | 2023-03-25T10:13:00
   3 | 2023-03-26T12:13:00
   4 | 2023-05-15T14:13:23
'''
)
fmt = "%Y-%m-%dT%H:%M:%S"
table_with_datetime = table.select(t1=pw.this.t1.dt.strptime(fmt=fmt))
table_formatted = table_with_datetime.select(
    date=pw.this.t1.dt.strftime("%d.%m.%Y"),
    full_date=pw.this.t1.dt.strftime("%B %d, %Y"),
    time_24=pw.this.t1.dt.strftime("%H:%M:%S"),
    time_12=pw.this.t1.dt.strftime("%I:%M:%S %p"),
)
pw.debug.compute_and_print(table_formatted, include_id=False)
```

Show Code Results

```
date       | full_date         | time_24  | time_12
03.02.1970 | February 03, 1970 | 10:13:00 | 10:13:00 AM
15.05.2023 | May 15, 2023      | 14:13:23 | 02:13:23 PM
25.03.2023 | March 25, 2023    | 10:13:00 | 10:13:00 AM
26.03.2023 | March 26, 2023    | 12:13:00 | 12:13:00 PM
```

### [**strptime**(fmt, contains\_timezone=None)](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.strptime)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/date_time.py#L555-L658)Converts a string to a DateTime. If the string contains a timezone and a %z specifier is used, timezone-aware DateTime is created. Then the timezone is converted to a server timezone (see examples). If the string contains no timezone, a naive (not aware of timezone) DateTime is created.

*   **Parameters**  
    **fmt** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression) | `str`) – Format string. We use the specifiers of [chrono](https://docs.rs/chrono/latest/chrono/format/strftime/index.html) library. In most cases they are identical to standard python specifiers in [strptime](https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior) . contains\_timezone: If fmt is not a single string (the same for all objects) but a ColumnExpression, you need to set this parameter so that the function can determine if the return type is DateTimeNaive (contains\_timezone = False) or DateTimeUtc (contains\_timezone = True).
*   **Returns**  
    DateTimeNaive or DateTimeUtc

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     |               t1
   1 | 1970-02-03T10:13:00.000000000
   2 | 2023-03-25T10:13:00.000000012
   3 | 2023-03-26T12:13:00.123456789
   4 | 2023-05-15T14:13:23.123456789
'''
)
fmt = "%Y-%m-%dT%H:%M:%S.%f"
table_with_datetime = table.select(t1=table.t1.dt.strptime(fmt=fmt))
pw.debug.compute_and_print(table_with_datetime, include_id=False)
```

Show Code Results

```
t1
1970-02-03 10:13:00
2023-03-25 10:13:00.000000012
2023-03-26 12:13:00.123456789
2023-05-15 14:13:23.123456789
```

```
table = pw.debug.table_from_markdown(
    '''
     |               t1
   1 | 03.02.1970T10:13:00.000000000
   2 | 25.03.2023T10:13:00.000000012
   3 | 26.03.2023T12:13:00.123456789
   4 | 15.05.2023T14:13:23.123456789
'''
)
fmt = "%d.%m.%YT%H:%M:%S.%f"
table_with_datetime = table.select(t1=table.t1.dt.strptime(fmt=fmt))
pw.debug.compute_and_print(table_with_datetime, include_id=False)
```

Show Code Results

```
t1
1970-02-03 10:13:00
2023-03-25 10:13:00.000000012
2023-03-26 12:13:00.123456789
2023-05-15 14:13:23.123456789
```

```
table = pw.debug.table_from_markdown(
    '''
     |               t1
   1 | 1970-02-03T10:13:00-02:00
   2 | 2023-03-25T10:13:00+00:00
   3 | 2023-03-26T12:13:00-01:00
   4 | 2023-05-15T14:13:23+00:30
'''
)
fmt = "%Y-%m-%dT%H:%M:%S%z"
table_with_datetime = table.select(t1=table.t1.dt.strptime(fmt=fmt))
pw.debug.compute_and_print(table_with_datetime, include_id=False)
```

Show Code Results

```
t1
1970-02-03 12:13:00+00:00
2023-03-25 10:13:00+00:00
2023-03-26 13:13:00+00:00
2023-05-15 13:43:23+00:00
```

### [**subtract\_date\_time\_in\_timezone**(date\_time, timezone)](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.subtract_date_time_in_timezone)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/date_time.py#L928-L973)Subtracts two DateTimeNaives taking into account the time zone.

*   **Parameters**
    *   **date\_time** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression) | `Timestamp`) – DateTimeNaive to be subtracted from self.
    *   **timezone** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression) | `str`) – The time zone to perform subtraction in.
*   **Returns**  
    Duration

Example:

```
import pathway as pw
t1 = pw.debug.table_from_markdown(
    '''
     |        date1        |        date2
   1 | 2023-03-26T03:20:00 | 2023-03-26T01:20:00
   2 | 2023-03-27T03:20:00 | 2023-03-27T01:20:00
   3 | 2023-10-29T03:20:00 | 2023-10-29T01:20:00
   4 | 2023-10-30T03:20:00 | 2023-10-30T01:20:00
'''
)
fmt = "%Y-%m-%dT%H:%M:%S"
t2 = t1.select(
    date1=pw.this.date1.dt.strptime(fmt=fmt), date2=pw.this.date2.dt.strptime(fmt=fmt)
)
t3 = t2.with_columns(
    diff=pw.this.date1.dt.subtract_date_time_in_timezone(
        pw.this.date2, timezone="Europe/Warsaw"
    ),
)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
date1               | date2               | diff
2023-03-26 03:20:00 | 2023-03-26 01:20:00 | 0 days 01:00:00
2023-03-27 03:20:00 | 2023-03-27 01:20:00 | 0 days 02:00:00
2023-10-29 03:20:00 | 2023-10-29 01:20:00 | 0 days 03:00:00
2023-10-30 03:20:00 | 2023-10-30 01:20:00 | 0 days 02:00:00
```

### [**subtract\_duration\_in\_timezone**(duration, timezone)](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.subtract_duration_in_timezone)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/date_time.py#L884-L926)Subtracts Duration from DateTimeNaive taking into account the time zone.

*   **Parameters**
    *   **duration** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression) | `Timedelta`) – Duration to be subtracted from DateTime.
    *   **timezone** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression) | `str`) – The time zone to perform subtraction in.
*   **Returns**  
    DateTimeNaive

Example:

```
import pathway as pw
import datetime
t1 = pw.debug.table_from_markdown(
    '''
     |        date
   1 | 2023-03-26T03:23:00
   2 | 2023-03-27T03:23:00
   3 | 2023-10-29T03:23:00
   4 | 2023-10-30T03:23:00
'''
)
fmt = "%Y-%m-%dT%H:%M:%S"
t2 = t1.select(date=pw.this.date.dt.strptime(fmt=fmt))
t3 = t2.with_columns(
    new_date=pw.this.date.dt.subtract_duration_in_timezone(
        datetime.timedelta(hours=2), timezone="Europe/Warsaw"
    ),
)
pw.debug.compute_and_print(t3, include_id=False)
```

Show Code Results

```
date                | new_date
2023-03-26 03:23:00 | 2023-03-26 00:23:00
2023-03-27 03:23:00 | 2023-03-27 01:23:00
2023-10-29 03:23:00 | 2023-10-29 02:23:00
2023-10-30 03:23:00 | 2023-10-30 01:23:00
```

### [**timestamp**(unit=None)](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.timestamp)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/date_time.py#L384-L495)Returns a number of (nano,micro,milli)seconds from 1970-01-01 for naive DateTime and from 1970-01-01 UTC for timezone-aware datetime.

*   **Parameters**  
    **unit** (`str` | `None`) – unit of a timestamp. It has to be one of ‘s’, ‘ms’, ‘us’, ‘ns’. It can also be None and then it’ll default to ‘ns’ but this is deprecated.
*   **Returns**  
    Timestamp as float. Timestamp as int if `unit=None` (deprecated).

Examples:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     |               t1
   0 | 1969-01-01T00:00:00.000000000
   1 | 1970-01-01T00:00:00.000000000
   2 | 2023-01-01T00:00:00.000000000
   3 | 2023-03-25T00:00:00.000000000
   4 | 2023-03-25T13:45:26.000000000
   5 | 2023-03-25T13:45:26.987654321
'''
)
table_with_datetime = table.select(t1=table.t1.dt.strptime("%Y-%m-%dT%H:%M:%S.%f"))
table_with_timestamp = table_with_datetime.select(
    timestamp_ns=table_with_datetime.t1.dt.timestamp(unit="ns"),
    timestamp_s=table_with_datetime.t1.dt.timestamp(unit="s"),
)
pw.debug.compute_and_print(table_with_timestamp, include_id=False)
```

Show Code Results

```
timestamp_ns           | timestamp_s
-3.1536e+16            | -31536000.0
0.0                    | 0.0
1.6725312e+18          | 1672531200.0
1.6797024e+18          | 1679702400.0
1.679751926e+18        | 1679751926.0
1.6797519269876544e+18 | 1679751926.9876544
```

```
table = pw.debug.table_from_markdown(
    '''
     |               t1
   1 | 1969-01-01T00:00:00.000000000+00:00
   2 | 1970-01-01T00:00:00.000000000+00:00
   3 | 1970-01-01T00:00:00.000000000+02:00
   4 | 1970-01-01T00:00:00.000000000-03:00
   5 | 2023-01-01T00:00:00.000000000+01:00
   6 | 2023-03-25T00:00:00.000000000+01:00
   7 | 2023-03-25T13:45:26.000000000+01:00
   8 | 2023-03-25T13:45:26.987654321+01:00
'''
)
table_with_datetime = table.select(t1=table.t1.dt.strptime("%Y-%m-%dT%H:%M:%S.%f%z"))
table_with_timestamp = table_with_datetime.select(
    timestamp_ns=table_with_datetime.t1.dt.timestamp(unit="ns"),
    timestamp_s=table_with_datetime.t1.dt.timestamp(unit="s"),
)
pw.debug.compute_and_print(table_with_timestamp, include_id=False)
```

Show Code Results

```
timestamp_ns           | timestamp_s
-3.1536e+16            | -31536000.0
-7200000000000.0       | -7200.0
0.0                    | 0.0
10800000000000.0       | 10800.0
1.6725276e+18          | 1672527600.0
1.6796988e+18          | 1679698800.0
1.679748326e+18        | 1679748326.0
1.6797483269876544e+18 | 1679748326.9876544
```

### [**to\_naive\_in\_timezone**(timezone)](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.to_naive_in_timezone)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/date_time.py#L750-L838)Converts DateTimeUtc to time zone specified as timezone argument.

*   **Parameters**  
    **timezone** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression) | `str`) – The time zone to convert to.
*   **Returns**  
    DateTimeNaive

Examples:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     |        date_utc
   1 | 2023-03-26T00:59:00+00:00
   2 | 2023-03-26T01:00:00+00:00
   3 | 2023-03-27T00:59:00+00:00
   4 | 2023-03-27T01:00:00+00:00
   5 | 2023-10-28T23:59:00+00:00
   6 | 2023-10-29T00:00:00+00:00
   7 | 2023-10-29T00:30:00+00:00
   8 | 2023-10-29T01:00:00+00:00
   9 | 2023-10-29T01:30:00+00:00
'''
)
fmt = "%Y-%m-%dT%H:%M:%S%z"
table_utc = table.select(date_utc=pw.this.date_utc.dt.strptime(fmt=fmt))
table_local = table_utc.with_columns(
    date=pw.this.date_utc.dt.to_naive_in_timezone(timezone="Europe/Warsaw"),
)
pw.debug.compute_and_print(table_local, include_id=False)
```

Show Code Results

```
date_utc                  | date
2023-03-26 00:59:00+00:00 | 2023-03-26 01:59:00
2023-03-26 01:00:00+00:00 | 2023-03-26 03:00:00
2023-03-27 00:59:00+00:00 | 2023-03-27 02:59:00
2023-03-27 01:00:00+00:00 | 2023-03-27 03:00:00
2023-10-28 23:59:00+00:00 | 2023-10-29 01:59:00
2023-10-29 00:00:00+00:00 | 2023-10-29 02:00:00
2023-10-29 00:30:00+00:00 | 2023-10-29 02:30:00
2023-10-29 01:00:00+00:00 | 2023-10-29 02:00:00
2023-10-29 01:30:00+00:00 | 2023-10-29 02:30:00
```

```
table = pw.debug.table_from_markdown(
    '''
     |        date_utc
   1 | 2023-03-12T09:59:00+00:00
   2 | 2023-03-12T10:00:00+00:00
   3 | 2023-03-13T09:59:00+00:00
   4 | 2023-03-13T10:00:00+00:00
   5 | 2023-11-05T07:59:00+00:00
   6 | 2023-11-05T08:00:00+00:00
   7 | 2023-11-05T08:30:00+00:00
   8 | 2023-11-05T09:00:00+00:00
   9 | 2023-11-05T09:30:00+00:00
'''
)
fmt = "%Y-%m-%dT%H:%M:%S%z"
table_utc = table.select(date_utc=pw.this.date_utc.dt.strptime(fmt=fmt))
table_local = table_utc.with_columns(
    date=pw.this.date_utc.dt.to_naive_in_timezone(timezone="America/Los_Angeles"),
)
pw.debug.compute_and_print(table_local, include_id=False)
```

Show Code Results

```
date_utc                  | date
2023-03-12 09:59:00+00:00 | 2023-03-12 01:59:00
2023-03-12 10:00:00+00:00 | 2023-03-12 03:00:00
2023-03-13 09:59:00+00:00 | 2023-03-13 02:59:00
2023-03-13 10:00:00+00:00 | 2023-03-13 03:00:00
2023-11-05 07:59:00+00:00 | 2023-11-05 00:59:00
2023-11-05 08:00:00+00:00 | 2023-11-05 01:00:00
2023-11-05 08:30:00+00:00 | 2023-11-05 01:30:00
2023-11-05 09:00:00+00:00 | 2023-11-05 01:00:00
2023-11-05 09:30:00+00:00 | 2023-11-05 01:30:00
```

### [**to\_utc**(from\_timezone)](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.to_utc)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/date_time.py#L660-L748)Converts DateTimeNaive to UTC from time zone provided as from\_timezone argument. If the given DateTime doesn’t exist in the provided time zone it is mapped to the first existing DateTime after it. If a given DateTime corresponds to more than one moments in the provided time zone, it is mapped to a later moment.

*   **Parameters**  
    **from\_timezone** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression) | `str`) – The time zone to convert from.
*   **Returns**  
    DateTimeUtc

Examples:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     |         date
   1 | 2023-03-26T01:59:00
   2 | 2023-03-26T02:30:00
   3 | 2023-03-26T03:00:00
   4 | 2023-03-27T01:59:00
   5 | 2023-03-27T02:30:00
   6 | 2023-03-27T03:00:00
   7 | 2023-10-29T01:59:00
   8 | 2023-10-29T02:00:00
'''
)
fmt = "%Y-%m-%dT%H:%M:%S"
table_local = table.select(date=pw.this.date.dt.strptime(fmt=fmt))
table_utc = table_local.with_columns(
    date_utc=pw.this.date.dt.to_utc(from_timezone="Europe/Warsaw"),
)
pw.debug.compute_and_print(table_utc, include_id=False)
```

Show Code Results

```
date                | date_utc
2023-03-26 01:59:00 | 2023-03-26 00:59:00+00:00
2023-03-26 02:30:00 | 2023-03-26 01:00:00+00:00
2023-03-26 03:00:00 | 2023-03-26 01:00:00+00:00
2023-03-27 01:59:00 | 2023-03-26 23:59:00+00:00
2023-03-27 02:30:00 | 2023-03-27 00:30:00+00:00
2023-03-27 03:00:00 | 2023-03-27 01:00:00+00:00
2023-10-29 01:59:00 | 2023-10-28 23:59:00+00:00
2023-10-29 02:00:00 | 2023-10-29 01:00:00+00:00
```

```
table = pw.debug.table_from_markdown(
    '''
     |         date
   1 | 2023-03-12T01:59:00
   2 | 2023-03-12T02:30:00
   3 | 2023-03-12T03:00:00
   4 | 2023-03-13T01:59:00
   5 | 2023-03-13T02:30:00
   6 | 2023-03-13T03:00:00
   7 | 2023-11-05T00:59:00
   8 | 2023-11-05T01:00:00
'''
)
fmt = "%Y-%m-%dT%H:%M:%S"
table_local = table.select(date=pw.this.date.dt.strptime(fmt=fmt))
table_utc = table_local.with_columns(
    date_utc=pw.this.date.dt.to_utc(from_timezone="America/Los_Angeles"),
)
pw.debug.compute_and_print(table_utc, include_id=False)
```

Show Code Results

```
date                | date_utc
2023-03-12 01:59:00 | 2023-03-12 09:59:00+00:00
2023-03-12 02:30:00 | 2023-03-12 10:00:00+00:00
2023-03-12 03:00:00 | 2023-03-12 10:00:00+00:00
2023-03-13 01:59:00 | 2023-03-13 08:59:00+00:00
2023-03-13 02:30:00 | 2023-03-13 09:30:00+00:00
2023-03-13 03:00:00 | 2023-03-13 10:00:00+00:00
2023-11-05 00:59:00 | 2023-11-05 07:59:00+00:00
2023-11-05 01:00:00 | 2023-11-05 09:00:00+00:00
```

### [**utc\_from\_timestamp**(unit)](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.utc_from_timestamp)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/date_time.py#L1525-L1565)Converts timestamp represented as an int or float to DateTimeUtc.

*   **Parameters**
    *   **timestamp** – value to be converted to DateTime
    *   **unit** (`str`) – unit of a timestamp. It has to be one of ‘s’, ‘ms’, ‘us’, ‘ns’
*   **Returns**  
    DateTimeUtc

Example:

```
import pathway as pw
timestamps_1 = pw.debug.table_from_markdown(
    '''
  | timestamp
1 |    10
2 | 1685969950
'''
)
datetimes_1 = timestamps_1.select(date=pw.this.timestamp.dt.utc_from_timestamp(unit="s"))
pw.debug.compute_and_print(datetimes_1, include_id=False)
```

Show Code Results

```
date
1970-01-01 00:00:10+00:00
2023-06-05 12:59:10+00:00
```

```
timestamps_2 = pw.debug.table_from_markdown(
    '''
  |   timestamp
1 |    10.123
2 | 1685969950.4567
'''
)
datetimes_2 = timestamps_2.select(date=pw.this.timestamp.dt.utc_from_timestamp(unit="s"))
pw.debug.compute_and_print(datetimes_2, include_id=False)
```

Show Code Results

```
date
1970-01-01 00:00:10.123000+00:00
2023-06-05 12:59:10.456700160+00:00
```

### [**weekday**()](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.weekday)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/date_time.py#L1567-L1613)Converts a DateTime to an int representing its day of the week, where 0 denotes a Monday, and 6 denotes a Sunday.

*   **Returns**  
    int

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     |               t1
   1 | 1970-02-03T10:13:00
   2 | 2023-03-25T10:13:00
   3 | 2023-03-26T12:13:00
   4 | 2023-05-15T14:13:23
'''
)
fmt = "%Y-%m-%dT%H:%M:%S"
table_with_datetime = table.select(t1=pw.this.t1.dt.strptime(fmt=fmt))
table_with_dayofweek = table_with_datetime.with_columns(weekday=pw.this.t1.dt.weekday())
pw.debug.compute_and_print(table_with_dayofweek, include_id=False)
```

Show Code Results

```
t1                  | weekday
1970-02-03 10:13:00 | 1
2023-03-25 10:13:00 | 5
2023-03-26 12:13:00 | 6
2023-05-15 14:13:23 | 0
```

### [**weeks**()](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.weeks)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/date_time.py#L1423-L1464)The total number of weeks in a Duration.

*   **Returns**  
    Weeks as int.

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     |         t1          |         t2
   0 | 2023-03-15T00:00:00 | 2023-05-15T10:13:23
   1 | 2023-04-15T00:00:00 | 2023-05-15T10:00:00
   2 | 2023-05-01T10:00:00 | 2023-05-15T10:00:00
   3 | 2023-05-15T10:00:00 | 2023-05-15T09:00:00
   4 | 2023-05-15T10:00:00 | 2023-05-15T11:00:00
   5 | 2023-05-16T12:13:00 | 2023-05-15T10:00:00
   6 | 2024-05-15T14:13:23 | 2023-05-15T10:00:00
'''
)
fmt = "%Y-%m-%dT%H:%M:%S"
table_with_datetimes = table.select(
    t1=pw.this.t1.dt.strptime(fmt=fmt), t2=pw.this.t2.dt.strptime(fmt=fmt)
)
table_with_diff = table_with_datetimes.select(diff=pw.this.t1 - pw.this.t2)
table_with_weeks = table_with_diff.select(weeks=pw.this["diff"].dt.weeks())
pw.debug.compute_and_print(table_with_weeks, include_id=False)
```

Show Code Results

```
weeks
-8
-4
-2
0
0
0
52
```

### [**year**()](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.year)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/date_time.py#L349-L382)Extracts year from a DateTime.

*   **Returns**  
    Year as int.

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     |               t1
   1 | 1974-03-12T00:00:00
   2 | 2023-03-25T12:00:00
   3 | 2023-05-15T14:13:00
'''
)
table_with_datetime = table.select(t1=table.t1.dt.strptime("%Y-%m-%dT%H:%M:%S"))
table_with_years = table_with_datetime.select(year=table_with_datetime.t1.dt.year())
pw.debug.compute_and_print(table_with_years, include_id=False)
```

Show Code Results

```
year
1974
2023
2023
```

[class pw.**NumericalNamespace**(expression)](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.NumericalNamespace)
------------------------------------------------------------------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/numerical.py#L9-L212)

A module containing methods related to numbers. They can be called using a num attribute of an expression.

Typical use:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     | v
   1 | -1
'''
)
table_abs = table.select(v_abs=table.v.num.abs())
```

### [**abs**()](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.NumericalNamespace.abs)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/numerical.py#L30-L64)Returns the absolute value from a numerical value.

*   **Returns**  
    Absolute value as float

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     | v
   1 | 1
   2 | -1
   3 | 2.5
   4 | -2.5
'''
)
table_abs = table.select(v_abs=table.v.num.abs())
pw.debug.compute_and_print(table_abs, include_id=False)
```

Show Code Results

```
v_abs
1.0
1.0
2.5
2.5
```

### [**fill\_na**(default\_value)](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.NumericalNamespace.fill_na)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/numerical.py#L144-L212)Fill the missing values (None or NaN) in a column of a table with a specified default value.

*   **Parameters**  
    **default\_value** (`float`) – The value to fill in for the missing values.
*   **Returns**  
    A new column with the missing values filled with the specified default value.

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     | v
   1 | 1
   2 | 2.0
   3 | None
   4 | 3.5
'''
)
table_fill_na = table.select(v_filled=table.v.num.fill_na(0))
pw.debug.compute_and_print(table_fill_na, include_id=False)
```

Show Code Results

```
v_filled
0.0
1.0
2.0
3.5
```

### [**round**(decimals=0)](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.NumericalNamespace.round)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/numerical.py#L66-L142)Round the values in a column of a table to the specified number of decimals.

*   **Parameters**
    *   **decimals** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression) | `int`) – The number of decimal places to round to. It can be either an
    *   **0.** (`integer or a reference to another column. Defaults to`) –
*   **Returns**  
    A new column with the values rounded to the specified number of decimals.

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     | v
   1 | -2.18
   2 | -1.11
   3 | 1
   4 | 2.1
   5 | 3.14
   6 | 4.17
'''
)
table_round = table.select(v_round=table.v.num.round(1))
pw.debug.compute_and_print(table_round, include_id=False)
```

Show Code Results

```
v_round
-2.2
-1.1
1.0
2.1
3.1
4.2
```

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     | v      | precision
   1 | 3      | 0
   2 | 3.1    | 1
   3 | 3.14   | 1
   4 | 3.141  | 2
   5 | 3.1415 | 2
'''
)
table_round = table.select(v_round=table.v.num.round(pw.this.precision))
pw.debug.compute_and_print(table_round, include_id=False)
```

Show Code Results

```
v_round
3.0
3.1
3.1
3.14
3.14
```

[class pw.**StringNamespace**(expression)](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace)
------------------------------------------------------------------------------------------------------------------------------------------

[\[source\]](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/string.py#L9-L931)

A module containing methods related to string. They can be called using a str attribute of an expression.

Typical use:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     | name
   1 | ALICE
'''
)
table += table.select(name_lower=table.name.str.lower())
pw.debug.compute_and_print(table, include_id=False)
```

Show Code Results

```
name  | name_lower
ALICE | alice
```

### [**count**(sub, start=None, end=None)](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.count)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/string.py#L473-L524)Returns the number of non-overlapping occurrences of substring sub in the range \[start, end). Optional arguments start and end are interpreted as in slice notation.

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     | name
   1 | Alice
   2 | Hello
   3 | World
   4 | Zoo
'''
)
table += table.select(count=table.name.str.count("o"))
pw.debug.compute_and_print(table, include_id=False)
```

Show Code Results

```
name  | count
Alice | 0
Hello | 1
World | 1
Zoo   | 2
```

### [**endswith**(suffix)](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.endswith)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/string.py#L316-L356)Returns True if the string ends with suffix.

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     | name
   1 | Alice
   2 | Bob
   3 | CAROLE
   4 | david
'''
)
table += table.select(ends_with_e=table.name.str.endswith("e"))
pw.debug.compute_and_print(table, include_id=False)
```

Show Code Results

```
name   | ends_with_e
Alice  | True
Bob    | False
CAROLE | False
david  | False
```

### [**find**(sub, start=None, end=None)](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.find)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/string.py#L526-L578)Return the lowest index in the string where substring sub is found within the slice s\[start:end\]. Optional arguments start and end are interpreted as in slice notation. Return -1 if sub is not found.

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     | name
   1 | Alice
   2 | Hello
   3 | World
   4 | Zoo
'''
)
table += table.select(pos=table.name.str.find("o"))
pw.debug.compute_and_print(table, include_id=False)
```

Show Code Results

```
name  | pos
Alice | -1
Hello | 4
World | 1
Zoo   | 1
```

### [**len**()](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.len)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/string.py#L156-L193)Returns the length of a string.

*   **Returns**  
    Length of the string

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     | name
   1 | Alice
   2 | Bob
   3 | CAROLE
   4 | david
'''
)
table += table.select(length=table.name.str.len())
pw.debug.compute_and_print(table, include_id=False)
```

Show Code Results

```
name   | length
Alice  | 5
Bob    | 3
CAROLE | 6
david  | 5
```

### [**lower**()](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.lower)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/string.py#L33-L72)Returns a lowercase copy of a string.

*   **Returns**  
    Lowercase string

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     | name
   1 | Alice
   2 | Bob
   3 | CAROLE
   4 | david
'''
)
table += table.select(name_lower=table.name.str.lower())
pw.debug.compute_and_print(table, include_id=False)
```

Show Code Results

```
name   | name_lower
Alice  | alice
Bob    | bob
CAROLE | carole
david  | david
```

### [**parse\_bool**(true\_values=default\_true\_values, false\_values=default\_false\_values, optional=False)](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.parse_bool)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/string.py#L872-L931)Parses the string to bool, by checking if given string is either in true\_values or false\_values. The given string and all values in true\_vales and false\_values are made lowercase, so parsing is case insensitive.

When true\_values and false\_values arguments are not provided, strings “True”, “On”, “1” and “Yes” are interpreted as True value, and “False”, “Off”, “0”, and “No” are interpreted as False.

If true\_values or false\_values is provided, then these values are mapped to respectively True and False, while all other either raise an exception or return None, depending on argument optional.

If optional argument is set to True, then the return type is Optional\[bool\] and if some string cannot be parsed, None is returned.

Example:

```
import pathway as pw
import pandas as pd
df = pd.DataFrame({"a": ["0", "TRUE", "on"]}, dtype=str)
table = pw.debug.table_from_pandas(df)
table.typehints()
```

Show Code Results

```
mappingproxy({'a': <class 'str'>})
```

```
pw.debug.compute_and_print(table, include_id=False)
```

Show Code Results

```
a
0
TRUE
on
```

```
table = table.select(a=table.a.str.parse_bool())
table.typehints()
```

Show Code Results

```
mappingproxy({'a': <class 'bool'>})
```

```
pw.debug.compute_and_print(table, include_id=False)
```

Show Code Results

```
a
False
True
True
```

### [**parse\_float**(optional=False)](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.parse_float)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/string.py#L835-L867)Parses the string to float. If optional argument is set to True, then the return type is Optional\[float\] and if some string cannot be parsed, None is returned.

Example:

```
import pathway as pw
import pandas as pd
df = pd.DataFrame({"a": ["-5", "0.1", "200.999"]}, dtype=str)
table = pw.debug.table_from_pandas(df)
table.typehints()
```

Show Code Results

```
mappingproxy({'a': <class 'str'>})
```

```
table = table.select(a=table.a.str.parse_float())
table.typehints()
```

Show Code Results

```
mappingproxy({'a': <class 'float'>})
```

```
pw.debug.compute_and_print(table, include_id=False)
```

Show Code Results

```
a
-5.0
0.1
200.999
```

### [**parse\_int**(optional=False)](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.parse_int)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/string.py#L801-L833)Parses the string to int. If optional argument is set to True, then the return type is Optional\[int\] and if some string cannot be parsed, None is returned.

Example:

```
import pathway as pw
import pandas as pd
df = pd.DataFrame({"a": ["-5", "0", "200"]}, dtype=str)
table = pw.debug.table_from_pandas(df)
table.typehints()
```

Show Code Results

```
mappingproxy({'a': <class 'str'>})
```

```
table = table.select(a=table.a.str.parse_int())
table.typehints()
```

Show Code Results

```
mappingproxy({'a': <class 'int'>})
```

```
pw.debug.compute_and_print(table, include_id=False)
```

Show Code Results

```
a
-5
0
200
```

### [**removeprefix**(prefix, /)](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.removeprefix)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/string.py#L634-L691)If the string starts with prefix, returns a copy of the string without the prefix. Otherwise returns the original string.

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     | name
   1 | Alice
   2 | Bob
   3 | CAROLE
   4 | david
'''
)
table += table.select(without_da=table.name.str.removeprefix("da"))
pw.debug.compute_and_print(table, include_id=False)
```

Show Code Results

```
name   | without_da
Alice  | Alice
Bob    | Bob
CAROLE | CAROLE
david  | vid
```

```
table = pw.debug.table_from_markdown(
    '''
     | note | prefix
   1 | AAA  | A
   2 | BB   | B
'''
)
table = table.select(
   pw.this.note,
   new_note=pw.this.note.str.removeprefix(pw.this.prefix)
)
pw.debug.compute_and_print(table, include_id=False)
```

Show Code Results

```
note | new_note
AAA  | AA
BB   | B
```

### [**removesuffix**(suffix, /)](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.removesuffix)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/string.py#L693-L750)If the string ends with suffix, returns a copy of the string without the suffix. Otherwise returns the original string.

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     | name
   1 | Alice
   2 | Bob
   3 | CAROLE
   4 | david
'''
)
table += table.select(without_LE=table.name.str.removesuffix("LE"))
pw.debug.compute_and_print(table, include_id=False)
```

Show Code Results

```
name   | without_LE
Alice  | Alice
Bob    | Bob
CAROLE | CARO
david  | david
```

```
table = pw.debug.table_from_markdown(
    '''
     | fruit  | suffix
   1 | bamboo | o
   2 | banana | na
'''
)
table = table.select(
   pw.this.fruit,
   fruit_cropped=pw.this.fruit.str.removesuffix(pw.this.suffix)
)
pw.debug.compute_and_print(table, include_id=False)
```

Show Code Results

```
fruit  | fruit_cropped
bamboo | bambo
banana | bana
```

### [**replace**(old\_value, new\_value, count=-1, /)](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.replace)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/string.py#L195-L272)Returns the a string where the occurrences of the old\_value substrings are

```
replaced by the new_value substring.
```

*   **Parameters**  
    **count** ([`ColumnExpression`](https://pathway.com/developers/api-docs/pathway#pathway.ColumnExpression) | `int`) – Maximum number of occurrences to replace. When set to -1, replaces all occurrences. Defaults to -1.
*   **Returns**  
    The new string where old\_value is replaced by new\_value

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     | name
   1 | Alice
   2 | Bob
   3 | CAROLE
   4 | david
   5 | Edward
'''
)
table += table.select(name_replace=table.name.str.replace("d","Z"))
pw.debug.compute_and_print(table, include_id=False)
```

Show Code Results

```
name   | name_replace
Alice  | Alice
Bob    | Bob
CAROLE | CAROLE
Edward | EZwarZ
david  | ZaviZ
```

```
table = pw.debug.table_from_markdown(
    '''
     | value      | old | new | count
   1 | Scaciscics | c   | t   | 3
   2 | yelliwwiid | i   | o   | 2
'''
)
table = table.select(
   pw.this.value,
   value_replace=pw.this.value.str.replace(
      pw.this.old, pw.this.new, pw.this.count
   )
)
pw.debug.compute_and_print(table, include_id=False)
```

Show Code Results

```
value      | value_replace
Scaciscics | Statistics
yelliwwiid | yellowwoid
```

### [**reversed**()](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.reversed)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/string.py#L115-L154)Returns a reverse copy of a string.

*   **Returns**  
    Reverse string

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     | name
   1 | Alice
   2 | Bob
   3 | CAROLE
   4 | david
'''
)
table += table.select(name_reverse=table.name.str.reversed())
pw.debug.compute_and_print(table, include_id=False)
```

Show Code Results

```
name   | name_reverse
Alice  | ecilA
Bob    | boB
CAROLE | ELORAC
david  | divad
```

### [**rfind**(sub, start=None, end=None)](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.rfind)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/string.py#L580-L632)Return the highest index in the string where substring sub is found within the slice s\[start:end\]. Optional arguments start and end are interpreted as in slice notation. Return -1 if sub is not found.

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     | name
   1 | Alice
   2 | Hello
   3 | World
   4 | Zoo
'''
)
table += table.select(pos=table.name.str.rfind("o"))
pw.debug.compute_and_print(table, include_id=False)
```

Show Code Results

```
name  | pos
Alice | -1
Hello | 4
World | 1
Zoo   | 2
```

### [**slice**(start, end, /)](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.slice)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/string.py#L752-L799)Return a slice of the string.

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     | name
   1 | Alice
   2 | Bob
   3 | CAROLE
   4 | david
'''
)
table += table.select(slice=table.name.str.slice(1,4))
pw.debug.compute_and_print(table, include_id=False)
```

Show Code Results

```
name   | slice
Alice  | lic
Bob    | ob
CAROLE | ARO
david  | avi
```

### [**startswith**(prefix)](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.startswith)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/string.py#L274-L314)Returns True if the string starts with prefix.

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     | name
   1 | Alice
   2 | Bob
   3 | CAROLE
   4 | david
'''
)
table += table.select(starts_with_A=table.name.str.startswith("A"))
pw.debug.compute_and_print(table, include_id=False)
```

Show Code Results

```
name   | starts_with_A
Alice  | True
Bob    | False
CAROLE | False
david  | False
```

### [**strip**(chars=None)](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.strip)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/string.py#L396-L437)Returns a copy of the string with specified leading and trailing characters removed. If no arguments are passed, remove the leading and trailing whitespaces.

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     | name
   1 | Alice
   2 | Bob
   3 | CAROLE
   4 | david
'''
)
table += table.select(name_strip=table.name.str.strip("Aod"))
pw.debug.compute_and_print(table, include_id=False)
```

Show Code Results

```
name   | name_strip
Alice  | lice
Bob    | Bob
CAROLE | CAROLE
david  | avi
```

### [**swapcase**()](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.swapcase)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/string.py#L358-L394)Returns a copy of the string where the case is inverted.

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     | name
   1 | Alice
   2 | Bob
   3 | CAROLE
   4 | david
'''
)
table += table.select(name_swap=table.name.str.swapcase())
pw.debug.compute_and_print(table, include_id=False)
```

Show Code Results

```
name   | name_swap
Alice  | aLICE
Bob    | bOB
CAROLE | carole
david  | DAVID
```

### [**title**()](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.title)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/string.py#L439-L471)Returns a copy of the string where where words start with an uppercase character and the remaining characters are lowercase.

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     | col
   1 | title
'''
)
table = table.select(col_title=table["col"].str.title())
pw.debug.compute_and_print(table, include_id=False)
```

Show Code Results

```
col_title
Title
```

### [**upper**()](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.upper)

[source](https://github.com/pathwaycom/pathway/tree/main/python/pathway/internals/expressions/string.py#L74-L113)Returns a uppercase copy of a string.

*   **Returns**  
    Uppercase string

Example:

```
import pathway as pw
table = pw.debug.table_from_markdown(
    '''
     | name
   1 | Alice
   2 | Bob
   3 | CAROLE
   4 | david
'''
)
table += table.select(name_upper=table.name.str.upper())
pw.debug.compute_and_print(table, include_id=False)
```

Show Code Results

```
name   | name_upper
Alice  | ALICE
Bob    | BOB
CAROLE | CAROLE
david  | DAVID
```

[Development Get help](https://pathway.com/developers/user-guide/development/get-help)[Api Docs pw.Table](https://pathway.com/developers/api-docs/pathway-table)

Table of Contents

*   [pw.AsyncTransformer](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer "class  pw.AsyncTransformer(input_table, *, instance=pw.this.id, autocommit_duration_ms=1500)")
    *   [close](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.close "close()")
    *   [abstract async invoke](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.invoke "abstract async  invoke(*args, **kwargs)")
    *   [open](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.open "open()")
    *   [with\_options](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.with_options "with_options(capacity=None, timeout=None, retry_strategy=None, cache_strategy=None)")
    *   [failed: Table](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.failed "property  failed: Table ")
    *   [finished: Table](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.finished "property  finished: Table ")
    *   [output\_table: Table](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.output_table "property  output_table: Table ")
    *   [result: Table](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.result "property  result: Table ")
    *   [successful: Table](https://pathway.com/developers/api-docs/pathway/#pathway.AsyncTransformer.successful "property  successful: Table ")
*   [pw.BaseCustomAccumulator](https://pathway.com/developers/api-docs/pathway/#pathway.BaseCustomAccumulator "class  pw.BaseCustomAccumulator")
    *   [abstract compute\_result](https://pathway.com/developers/api-docs/pathway/#pathway.BaseCustomAccumulator.compute_result "abstract  compute_result()")
    *   [classmethod deserialize](https://pathway.com/developers/api-docs/pathway/#pathway.BaseCustomAccumulator.deserialize "classmethod  deserialize(val)")
    *   [abstract classmethod from\_row](https://pathway.com/developers/api-docs/pathway/#pathway.BaseCustomAccumulator.from_row "abstract classmethod  from_row(row)")
    *   [classmethod neutral](https://pathway.com/developers/api-docs/pathway/#pathway.BaseCustomAccumulator.neutral "classmethod  neutral()")
    *   [retract](https://pathway.com/developers/api-docs/pathway/#pathway.BaseCustomAccumulator.retract "retract(other)")
    *   [serialize](https://pathway.com/developers/api-docs/pathway/#pathway.BaseCustomAccumulator.serialize "serialize()")
    *   [abstract update](https://pathway.com/developers/api-docs/pathway/#pathway.BaseCustomAccumulator.update "abstract  update(other)")
*   [pw.ColumnExpression](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression "class  pw.ColumnExpression")
    *   [as\_bool](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression.as_bool "as_bool()")
    *   [as\_float](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression.as_float "as_float()")
    *   [as\_int](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression.as_int "as_int()")
    *   [as\_str](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression.as_str "as_str()")
    *   [get](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression.get "get(index, default=None)")
    *   [is\_none](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression.is_none "is_none()")
    *   [is\_not\_none](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression.is_not_none "is_not_none()")
    *   [to\_string](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnExpression.to_string "to_string()")
*   [pw.ColumnReference](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnReference "class  pw.ColumnReference()")
    *   [name](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnReference.name "property  name")
    *   [table](https://pathway.com/developers/api-docs/pathway/#pathway.ColumnReference.table "property  table")
*   [pw.DateTimeNaive](https://pathway.com/developers/api-docs/pathway/#pathway.DateTimeNaive "class  pw.DateTimeNaive(ts_input=<object object>, year=None, month=None, day=None, hour=None, minute=None, second=None, microsecond=None, tzinfo=None, *, nanosecond=None, tz=None, unit=None, fold=None)")
*   [pw.DateTimeUtc](https://pathway.com/developers/api-docs/pathway/#pathway.DateTimeUtc "class  pw.DateTimeUtc(ts_input=<object object>, year=None, month=None, day=None, hour=None, minute=None, second=None, microsecond=None, tzinfo=None, *, nanosecond=None, tz=None, unit=None, fold=None)")
*   [pw.Duration](https://pathway.com/developers/api-docs/pathway/#pathway.Duration "class  pw.Duration(value=<object object>, unit=None, **kwargs)")
*   [pw.GroupedJoinResult](https://pathway.com/developers/api-docs/pathway/#pathway.GroupedJoinResult "class  pw.GroupedJoinResult()")
    *   [reduce](https://pathway.com/developers/api-docs/pathway/#pathway.GroupedJoinResult.reduce "reduce(*args, **kwargs)")
*   [pw.GroupedTable](https://pathway.com/developers/api-docs/pathway/#pathway.GroupedTable "class  pw.GroupedTable()")
    *   [reduce](https://pathway.com/developers/api-docs/pathway/#pathway.GroupedTable.reduce "reduce(*args, **kwargs)")
*   [pw.JoinMode](https://pathway.com/developers/api-docs/pathway/#pathway.JoinMode "class  pw.JoinMode(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None)")
    *   [INNER = 0](https://pathway.com/developers/api-docs/pathway/#pathway.JoinMode.INNER "INNER = 0 ")
    *   [LEFT = 1](https://pathway.com/developers/api-docs/pathway/#pathway.JoinMode.LEFT "LEFT = 1 ")
    *   [OUTER = 3](https://pathway.com/developers/api-docs/pathway/#pathway.JoinMode.OUTER "OUTER = 3 ")
    *   [RIGHT = 2](https://pathway.com/developers/api-docs/pathway/#pathway.JoinMode.RIGHT "RIGHT = 2 ")
*   [pw.JoinResult](https://pathway.com/developers/api-docs/pathway/#pathway.JoinResult "class  pw.JoinResult()")
    *   [filter](https://pathway.com/developers/api-docs/pathway/#pathway.JoinResult.filter "filter(filter_expression)")
    *   [groupby](https://pathway.com/developers/api-docs/pathway/#pathway.JoinResult.groupby "groupby(*args, id=None)")
    *   [reduce](https://pathway.com/developers/api-docs/pathway/#pathway.JoinResult.reduce "reduce(*args, **kwargs)")
    *   [select](https://pathway.com/developers/api-docs/pathway/#pathway.JoinResult.select "select(*args, **kwargs)")
*   [pw.Joinable](https://pathway.com/developers/api-docs/pathway/#pathway.Joinable "class  pw.Joinable(context)")
    *   [join](https://pathway.com/developers/api-docs/pathway/#pathway.Joinable.join "join(other, *on, id=None, how=JoinMode.INNER, left_instance=None, right_instance=None)")
    *   [join\_inner](https://pathway.com/developers/api-docs/pathway/#pathway.Joinable.join_inner "join_inner(other, *on, id=None, left_instance=None, right_instance=None)")
    *   [join\_left](https://pathway.com/developers/api-docs/pathway/#pathway.Joinable.join_left "join_left(other, *on, id=None, left_instance=None, right_instance=None)")
    *   [join\_outer](https://pathway.com/developers/api-docs/pathway/#pathway.Joinable.join_outer "join_outer(other, *on, id=None, left_instance=None, right_instance=None)")
    *   [join\_right](https://pathway.com/developers/api-docs/pathway/#pathway.Joinable.join_right "join_right(other, *on, id=None, left_instance=None, right_instance=None)")
    *   [C: ColumnNamespace](https://pathway.com/developers/api-docs/pathway/#pathway.Joinable.C "property  C: ColumnNamespace ")
*   [pw.Json](https://pathway.com/developers/api-docs/pathway/#pathway.Json "class  pw.Json()")
    *   [as\_bool](https://pathway.com/developers/api-docs/pathway/#pathway.Json.as_bool "as_bool()")
    *   [as\_dict](https://pathway.com/developers/api-docs/pathway/#pathway.Json.as_dict "as_dict()")
    *   [as\_float](https://pathway.com/developers/api-docs/pathway/#pathway.Json.as_float "as_float()")
    *   [as\_int](https://pathway.com/developers/api-docs/pathway/#pathway.Json.as_int "as_int()")
    *   [as\_list](https://pathway.com/developers/api-docs/pathway/#pathway.Json.as_list "as_list()")
    *   [as\_str](https://pathway.com/developers/api-docs/pathway/#pathway.Json.as_str "as_str()")
*   [pw.LiveTable](https://pathway.com/developers/api-docs/pathway/#pathway.LiveTable "class  pw.LiveTable()")
*   [pw.Schema](https://pathway.com/developers/api-docs/pathway/#pathway.Schema "class  pw.Schema")
*   [pw.SchemaProperties](https://pathway.com/developers/api-docs/pathway/#pathway.SchemaProperties "class  pw.SchemaProperties(append_only=None)")
*   [pw.Table](https://pathway.com/developers/api-docs/pathway/#pathway.Table "class  pw.Table()")
    *   [asof\_join](https://pathway.com/developers/api-docs/pathway/#pathway.Table.asof_join "asof_join(other, self_time, other_time, *on, how, behavior=None, defaults={}, direction=Direction.BACKWARD, left_instance=None, right_instance=None)")
    *   [asof\_join\_left](https://pathway.com/developers/api-docs/pathway/#pathway.Table.asof_join_left "asof_join_left(other, self_time, other_time, *on, behavior=None, defaults={}, direction=Direction.BACKWARD, left_instance=None, right_instance=None)")
    *   [asof\_join\_outer](https://pathway.com/developers/api-docs/pathway/#pathway.Table.asof_join_outer "asof_join_outer(other, self_time, other_time, *on, behavior=None, defaults={}, direction=Direction.BACKWARD, left_instance=None, right_instance=None)")
    *   [asof\_join\_right](https://pathway.com/developers/api-docs/pathway/#pathway.Table.asof_join_right "asof_join_right(other, self_time, other_time, *on, behavior=None, defaults={}, direction=Direction.BACKWARD, left_instance=None, right_instance=None)")
    *   [asof\_now\_join](https://pathway.com/developers/api-docs/pathway/#pathway.Table.asof_now_join "asof_now_join(other, *on, how=JoinMode.INNER, id=None, left_instance=None, right_instance=None)")
    *   [asof\_now\_join\_inner](https://pathway.com/developers/api-docs/pathway/#pathway.Table.asof_now_join_inner "asof_now_join_inner(other, *on, id=None, left_instance=None, right_instance=None)")
    *   [asof\_now\_join\_left](https://pathway.com/developers/api-docs/pathway/#pathway.Table.asof_now_join_left "asof_now_join_left(other, *on, id=None, left_instance=None, right_instance=None)")
    *   [cast\_to\_types](https://pathway.com/developers/api-docs/pathway/#pathway.Table.cast_to_types "cast_to_types(**kwargs)")
    *   [concat](https://pathway.com/developers/api-docs/pathway/#pathway.Table.concat "concat(*others)")
    *   [concat\_reindex](https://pathway.com/developers/api-docs/pathway/#pathway.Table.concat_reindex "concat_reindex(*tables)")
    *   [copy](https://pathway.com/developers/api-docs/pathway/#pathway.Table.copy "copy()")
    *   [deduplicate](https://pathway.com/developers/api-docs/pathway/#pathway.Table.deduplicate "deduplicate(*, value, instance=None, acceptor, persistent_id=None)")
    *   [diff](https://pathway.com/developers/api-docs/pathway/#pathway.Table.diff "diff(timestamp, *values, instance=None)")
    *   [difference](https://pathway.com/developers/api-docs/pathway/#pathway.Table.difference "difference(other)")
    *   [empty](https://pathway.com/developers/api-docs/pathway/#pathway.Table.empty "empty()")
    *   [filter](https://pathway.com/developers/api-docs/pathway/#pathway.Table.filter "filter(filter_expression)")
    *   [flatten](https://pathway.com/developers/api-docs/pathway/#pathway.Table.flatten "flatten(to_flatten, *, origin_id=None)")
    *   [from\_columns](https://pathway.com/developers/api-docs/pathway/#pathway.Table.from_columns "from_columns(**kwargs)")
    *   [groupby](https://pathway.com/developers/api-docs/pathway/#pathway.Table.groupby "groupby(*args, id=None, sort_by=None, instance=None, )")
    *   [interpolate](https://pathway.com/developers/api-docs/pathway/#pathway.Table.interpolate "interpolate(timestamp, *values, mode=InterpolateMode.LINEAR)")
    *   [intersect](https://pathway.com/developers/api-docs/pathway/#pathway.Table.intersect "intersect(*tables)")
    *   [interval\_join](https://pathway.com/developers/api-docs/pathway/#pathway.Table.interval_join "interval_join(other, self_time, other_time, interval, *on, behavior=None, how=JoinMode.INNER, left_instance=None, right_instance=None)")
    *   [interval\_join\_inner](https://pathway.com/developers/api-docs/pathway/#pathway.Table.interval_join_inner "interval_join_inner(other, self_time, other_time, interval, *on, behavior=None, left_instance=None, right_instance=None)")
    *   [interval\_join\_left](https://pathway.com/developers/api-docs/pathway/#pathway.Table.interval_join_left "interval_join_left(other, self_time, other_time, interval, *on, behavior=None, left_instance=None, right_instance=None)")
    *   [interval\_join\_outer](https://pathway.com/developers/api-docs/pathway/#pathway.Table.interval_join_outer "interval_join_outer(other, self_time, other_time, interval, *on, behavior=None, left_instance=None, right_instance=None)")
    *   [interval\_join\_right](https://pathway.com/developers/api-docs/pathway/#pathway.Table.interval_join_right "interval_join_right(other, self_time, other_time, interval, *on, behavior=None, left_instance=None, right_instance=None)")
    *   [ix](https://pathway.com/developers/api-docs/pathway/#pathway.Table.ix "ix(expression, *, optional=False, context=None, allow_misses=False)")
    *   [ix\_ref](https://pathway.com/developers/api-docs/pathway/#pathway.Table.ix_ref "ix_ref(*args, optional=False, context=None, instance=None, allow_misses=False)")
    *   [plot](https://pathway.com/developers/api-docs/pathway/#pathway.Table.plot "plot(plotting_function, sorting_col=None)")
    *   [pointer\_from](https://pathway.com/developers/api-docs/pathway/#pathway.Table.pointer_from "pointer_from(*args, optional=False, instance=None)")
    *   [reduce](https://pathway.com/developers/api-docs/pathway/#pathway.Table.reduce "reduce(*args, **kwargs)")
    *   [remove\_errors](https://pathway.com/developers/api-docs/pathway/#pathway.Table.remove_errors "remove_errors()")
    *   [rename](https://pathway.com/developers/api-docs/pathway/#pathway.Table.rename "rename(names_mapping=None, **kwargs)")
    *   [rename\_by\_dict](https://pathway.com/developers/api-docs/pathway/#pathway.Table.rename_by_dict "rename_by_dict(names_mapping)")
    *   [rename\_columns](https://pathway.com/developers/api-docs/pathway/#pathway.Table.rename_columns "rename_columns(**kwargs)")
    *   [restrict](https://pathway.com/developers/api-docs/pathway/#pathway.Table.restrict "restrict(other)")
    *   [select](https://pathway.com/developers/api-docs/pathway/#pathway.Table.select "select(*args, **kwargs)")
    *   [show](https://pathway.com/developers/api-docs/pathway/#pathway.Table.show "show(*, snapshot=True, include_id=True, short_pointers=True, sorters=None)")
    *   [sort](https://pathway.com/developers/api-docs/pathway/#pathway.Table.sort "sort(key, instance=None)")
    *   [split](https://pathway.com/developers/api-docs/pathway/#pathway.Table.split "split(split_expression)")
    *   [typehints](https://pathway.com/developers/api-docs/pathway/#pathway.Table.typehints "typehints()")
    *   [update\_cells](https://pathway.com/developers/api-docs/pathway/#pathway.Table.update_cells "update_cells(other, )")
    *   [update\_rows](https://pathway.com/developers/api-docs/pathway/#pathway.Table.update_rows "update_rows(other)")
    *   [update\_types](https://pathway.com/developers/api-docs/pathway/#pathway.Table.update_types "update_types(**kwargs)")
    *   [window\_join](https://pathway.com/developers/api-docs/pathway/#pathway.Table.window_join "window_join(other, self_time, other_time, window, *on, how=JoinMode.INNER, left_instance=None, right_instance=None)")
    *   [window\_join\_inner](https://pathway.com/developers/api-docs/pathway/#pathway.Table.window_join_inner "window_join_inner(other, self_time, other_time, window, *on, left_instance=None, right_instance=None)")
    *   [window\_join\_left](https://pathway.com/developers/api-docs/pathway/#pathway.Table.window_join_left "window_join_left(other, self_time, other_time, window, *on, left_instance=None, right_instance=None)")
    *   [window\_join\_outer](https://pathway.com/developers/api-docs/pathway/#pathway.Table.window_join_outer "window_join_outer(other, self_time, other_time, window, *on, left_instance=None, right_instance=None)")
    *   [window\_join\_right](https://pathway.com/developers/api-docs/pathway/#pathway.Table.window_join_right "window_join_right(other, self_time, other_time, window, *on, left_instance=None, right_instance=None)")
    *   [windowby](https://pathway.com/developers/api-docs/pathway/#pathway.Table.windowby "windowby(time_expr, *, window, behavior=None, instance=None)")
    *   [with\_columns](https://pathway.com/developers/api-docs/pathway/#pathway.Table.with_columns "with_columns(*args, **kwargs)")
    *   [with\_id](https://pathway.com/developers/api-docs/pathway/#pathway.Table.with_id "with_id(new_index)")
    *   [with\_id\_from](https://pathway.com/developers/api-docs/pathway/#pathway.Table.with_id_from "with_id_from(*args, instance=None)")
    *   [with\_prefix](https://pathway.com/developers/api-docs/pathway/#pathway.Table.with_prefix "with_prefix(prefix)")
    *   [with\_suffix](https://pathway.com/developers/api-docs/pathway/#pathway.Table.with_suffix "with_suffix(suffix)")
    *   [with\_universe\_of](https://pathway.com/developers/api-docs/pathway/#pathway.Table.with_universe_of "with_universe_of(other)")
    *   [without](https://pathway.com/developers/api-docs/pathway/#pathway.Table.without "without(*columns)")
    *   [id: ColumnReference](https://pathway.com/developers/api-docs/pathway/#pathway.Table.id "property  id: ColumnReference ")
    *   [schema: type\[pathway.internals.schema.Schema\]](https://pathway.com/developers/api-docs/pathway/#pathway.Table.schema "property  schema: type[pathway.internals.schema.Schema] ")
    *   [slice: TableSlice](https://pathway.com/developers/api-docs/pathway/#pathway.Table.slice "property  slice: TableSlice ")
*   [pw.TableLike](https://pathway.com/developers/api-docs/pathway/#pathway.TableLike "class  pw.TableLike(context)")
    *   [promise\_universe\_is\_equal\_to](https://pathway.com/developers/api-docs/pathway/#pathway.TableLike.promise_universe_is_equal_to "promise_universe_is_equal_to(other)")
    *   [promise\_universe\_is\_subset\_of](https://pathway.com/developers/api-docs/pathway/#pathway.TableLike.promise_universe_is_subset_of "promise_universe_is_subset_of(other)")
    *   [promise\_universes\_are\_disjoint](https://pathway.com/developers/api-docs/pathway/#pathway.TableLike.promise_universes_are_disjoint "promise_universes_are_disjoint(other)")
*   [pw.TableSlice](https://pathway.com/developers/api-docs/pathway/#pathway.TableSlice "class  pw.TableSlice(mapping, table)")
*   [pw.UDF](https://pathway.com/developers/api-docs/pathway/#pathway.UDF "class  pw.UDF(*, return_type=..., deterministic=False, propagate_none=False, executor=AutoExecutor(), cache_strategy=None)")
*   [pw.UDFAsync](https://pathway.com/developers/api-docs/pathway/#pathway.UDFAsync "class  pw.UDFAsync(*, capacity=None, retry_strategy=None, cache_strategy=None)")
*   [pw.UDFSync](https://pathway.com/developers/api-docs/pathway/#pathway.UDFSync "class  pw.UDFSync(*, return_type=..., deterministic=False, propagate_none=False, executor=AutoExecutor(), cache_strategy=None)")
*   [pw.iterate\_universe](https://pathway.com/developers/api-docs/pathway/#pathway.iterate_universe "class  pw.iterate_universe(table)")
*   [pw.left](https://pathway.com/developers/api-docs/pathway/#pathway.left "class  pw.left")
*   [pw.right](https://pathway.com/developers/api-docs/pathway/#pathway.right "class  pw.right")
*   [pw.this](https://pathway.com/developers/api-docs/pathway/#pathway.this "class  pw.this")
*   [pw.apply](https://pathway.com/developers/api-docs/pathway/#pathway.apply "
    pw.apply(fun, *args, **kwargs)")
*   [pw.apply\_async](https://pathway.com/developers/api-docs/pathway/#pathway.apply_async "
    pw.apply_async(fun, *args, **kwargs)")
*   [pw.apply\_with\_type](https://pathway.com/developers/api-docs/pathway/#pathway.apply_with_type "
    pw.apply_with_type(fun, ret_type, *args, **kwargs)")
*   [pw.assert\_table\_has\_schema](https://pathway.com/developers/api-docs/pathway/#pathway.assert_table_has_schema "
    pw.assert_table_has_schema(table, schema, *, allow_superset=True, ignore_primary_keys=True, allow_subtype=True)")
*   [pw.cast](https://pathway.com/developers/api-docs/pathway/#pathway.cast "
    pw.cast(target_type, col)")
*   [pw.coalesce](https://pathway.com/developers/api-docs/pathway/#pathway.coalesce "
    pw.coalesce(*args)")
*   [pw.column\_definition](https://pathway.com/developers/api-docs/pathway/#pathway.column_definition "
    pw.column_definition(*, primary_key=False, default_value=_no_default_value_marker, dtype=None, name=None, append_only=None, description=None, example=None)")
*   [pw.declare\_type](https://pathway.com/developers/api-docs/pathway/#pathway.declare_type "
    pw.declare_type(target_type, col)")
*   [pw.fill\_error](https://pathway.com/developers/api-docs/pathway/#pathway.fill_error "
    pw.fill_error(col, replacement)")
*   [pw.groupby](https://pathway.com/developers/api-docs/pathway/#pathway.groupby "
    pw.groupby(grouped, *args, id=None, **kwargs)")
*   [pw.if\_else](https://pathway.com/developers/api-docs/pathway/#pathway.if_else "
    pw.if_else(if_clause, then_clause, else_clause)")
*   [pw.iterate](https://pathway.com/developers/api-docs/pathway/#pathway.iterate "
    pw.iterate(func, iteration_limit=None, **kwargs)")
*   [pw.join](https://pathway.com/developers/api-docs/pathway/#pathway.join "
    pw.join(left, right, *on, id=None, how=JoinMode.INNER, left_instance=None, right_instance=None)")
*   [pw.join\_inner](https://pathway.com/developers/api-docs/pathway/#pathway.join_inner "
    pw.join_inner(left, right, *on, id=None, left_instance=None, right_instance=None)")
*   [pw.join\_left](https://pathway.com/developers/api-docs/pathway/#pathway.join_left "
    pw.join_left(left, right, *on, id=None, left_instance=None, right_instance=None)")
*   [pw.join\_outer](https://pathway.com/developers/api-docs/pathway/#pathway.join_outer "
    pw.join_outer(left, right, *on, id=None, left_instance=None, right_instance=None)")
*   [pw.join\_right](https://pathway.com/developers/api-docs/pathway/#pathway.join_right "
    pw.join_right(left, right, *on, id=None, left_instance=None, right_instance=None)")
*   [pw.make\_tuple](https://pathway.com/developers/api-docs/pathway/#pathway.make_tuple "
    pw.make_tuple(*args)")
*   [pw.pandas\_transformer](https://pathway.com/developers/api-docs/pathway/#pathway.pandas_transformer "
    pw.pandas_transformer(output_schema, output_universe=None)")
*   [pw.require](https://pathway.com/developers/api-docs/pathway/#pathway.require "
    pw.require(val, *deps)")
*   [pw.run](https://pathway.com/developers/api-docs/pathway/#pathway.run "
    pw.run(*, debug=False, monitoring_level=MonitoringLevel.AUTO, with_http_server=False, default_logging=True, persistence_config=None, runtime_typechecking=None, license_key=None, terminate_on_error=None)")
*   [pw.run\_all](https://pathway.com/developers/api-docs/pathway/#pathway.run_all "
    pw.run_all(*, debug=False, monitoring_level=MonitoringLevel.AUTO, with_http_server=False, default_logging=True, persistence_config=None, runtime_typechecking=None, license_key=None, terminate_on_error=None)")
*   [pw.schema\_builder](https://pathway.com/developers/api-docs/pathway/#pathway.schema_builder "
    pw.schema_builder(columns, *, name=None, properties=SchemaProperties(), id_type=Pointer)")
*   [pw.schema\_from\_csv](https://pathway.com/developers/api-docs/pathway/#pathway.schema_from_csv "
    pw.schema_from_csv(path, *, name=None, properties=SchemaProperties(), delimiter=',', quote='\"', comment_character=None, escape=None, double_quote_escapes=True, num_parsed_rows=None)")
*   [pw.schema\_from\_dict](https://pathway.com/developers/api-docs/pathway/#pathway.schema_from_dict "
    pw.schema_from_dict(columns, *, name=None, properties=SchemaProperties())")
*   [pw.schema\_from\_types](https://pathway.com/developers/api-docs/pathway/#pathway.schema_from_types "
    pw.schema_from_types(**kwargs)")
*   [pw.set\_license\_key](https://pathway.com/developers/api-docs/pathway/#pathway.set_license_key "
    pw.set_license_key(key)")
*   [pw.set\_monitoring\_config](https://pathway.com/developers/api-docs/pathway/#pathway.set_monitoring_config "
    pw.set_monitoring_config(*, server_endpoint)")
*   [pw.sql](https://pathway.com/developers/api-docs/pathway/#pathway.sql "
    pw.sql(query, **kwargs)")
*   [pw.table\_transformer](https://pathway.com/developers/api-docs/pathway/#pathway.table_transformer "
    pw.table_transformer(func=None, *, allow_superset=True, ignore_primary_keys=True, allow_subtype=True, locals=None)")
*   [pw.udf](https://pathway.com/developers/api-docs/pathway/#pathway.udf "
    pw.udf(fun, /, *, return_type=Ellipsis, deterministic=False, propagate_none=False, executor=AutoExecutor(), cache_strategy=None)")
*   [pw.udf\_async](https://pathway.com/developers/api-docs/pathway/#pathway.udf_async "
    pw.udf_async(fun=None, *, capacity=None, retry_strategy=None, cache_strategy=None)")
*   [pw.unwrap](https://pathway.com/developers/api-docs/pathway/#pathway.unwrap "
    pw.unwrap(col)")
*   [pw.wrap\_py\_object](https://pathway.com/developers/api-docs/pathway/#pathway.wrap_py_object "
    pw.wrap_py_object(object, *, serializer=None)")
*   [pw.MonitoringLevel](https://pathway.com/developers/api-docs/pathway/#pathway.MonitoringLevel "class  pw.MonitoringLevel")
    *   [AUTO = 0](https://pathway.com/developers/api-docs/pathway/#pathway.MonitoringLevel.AUTO "AUTO = 0 ")
    *   [AUTO\_ALL = 1](https://pathway.com/developers/api-docs/pathway/#pathway.MonitoringLevel.AUTO_ALL "AUTO_ALL = 1 ")
    *   [NONE = 2](https://pathway.com/developers/api-docs/pathway/#pathway.MonitoringLevel.NONE "NONE = 2 ")
    *   [IN\_OUT = 3](https://pathway.com/developers/api-docs/pathway/#pathway.MonitoringLevel.IN_OUT "IN_OUT = 3 ")
    *   [ALL = 4](https://pathway.com/developers/api-docs/pathway/#pathway.MonitoringLevel.ALL "ALL = 4 ")
*   [pw.DateTimeNamespace](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace "class  pw.DateTimeNamespace(expression)")
    *   [add\_duration\_in\_timezone](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.add_duration_in_timezone "add_duration_in_timezone(duration, timezone)")
    *   [day](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.day "day()")
    *   [days](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.days "days()")
    *   [floor](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.floor "floor(duration)")
    *   [from\_timestamp](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.from_timestamp "from_timestamp(unit)")
    *   [hour](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.hour "hour()")
    *   [hours](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.hours "hours()")
    *   [microsecond](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.microsecond "microsecond()")
    *   [microseconds](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.microseconds "microseconds()")
    *   [millisecond](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.millisecond "millisecond()")
    *   [milliseconds](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.milliseconds "milliseconds()")
    *   [minute](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.minute "minute()")
    *   [minutes](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.minutes "minutes()")
    *   [month](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.month "month()")
    *   [nanosecond](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.nanosecond "nanosecond()")
    *   [nanoseconds](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.nanoseconds "nanoseconds()")
    *   [round](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.round "round(duration)")
    *   [second](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.second "second()")
    *   [seconds](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.seconds "seconds()")
    *   [strftime](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.strftime "strftime(fmt)")
    *   [strptime](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.strptime "strptime(fmt, contains_timezone=None)")
    *   [subtract\_date\_time\_in\_timezone](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.subtract_date_time_in_timezone "subtract_date_time_in_timezone(date_time, timezone)")
    *   [subtract\_duration\_in\_timezone](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.subtract_duration_in_timezone "subtract_duration_in_timezone(duration, timezone)")
    *   [timestamp](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.timestamp "timestamp(unit=None)")
    *   [to\_naive\_in\_timezone](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.to_naive_in_timezone "to_naive_in_timezone(timezone)")
    *   [to\_utc](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.to_utc "to_utc(from_timezone)")
    *   [utc\_from\_timestamp](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.utc_from_timestamp "utc_from_timestamp(unit)")
    *   [weekday](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.weekday "weekday()")
    *   [weeks](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.weeks "weeks()")
    *   [year](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.DateTimeNamespace.year "year()")
*   [pw.NumericalNamespace](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.NumericalNamespace "class  pw.NumericalNamespace(expression)")
    *   [abs](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.NumericalNamespace.abs "abs()")
    *   [fill\_na](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.NumericalNamespace.fill_na "fill_na(default_value)")
    *   [round](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.NumericalNamespace.round "round(decimals=0)")
*   [pw.StringNamespace](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace "class  pw.StringNamespace(expression)")
    *   [count](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.count "count(sub, start=None, end=None)")
    *   [endswith](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.endswith "endswith(suffix)")
    *   [find](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.find "find(sub, start=None, end=None)")
    *   [len](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.len "len()")
    *   [lower](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.lower "lower()")
    *   [parse\_bool](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.parse_bool "parse_bool(true_values=default_true_values, false_values=default_false_values, optional=False)")
    *   [parse\_float](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.parse_float "parse_float(optional=False)")
    *   [parse\_int](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.parse_int "parse_int(optional=False)")
    *   [removeprefix](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.removeprefix "removeprefix(prefix, /)")
    *   [removesuffix](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.removesuffix "removesuffix(suffix, /)")
    *   [replace](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.replace "replace(old_value, new_value, count=-1, /)")
    *   [reversed](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.reversed "reversed()")
    *   [rfind](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.rfind "rfind(sub, start=None, end=None)")
    *   [slice](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.slice "slice(start, end, /)")
    *   [startswith](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.startswith "startswith(prefix)")
    *   [strip](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.strip "strip(chars=None)")
    *   [swapcase](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.swapcase "swapcase()")
    *   [title](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.title "title()")
    *   [upper](https://pathway.com/developers/api-docs/pathway/#pathway.internals.expressions.StringNamespace.upper "upper()")

*   [](https://www.linkedin.com/company/pathway)
*   [](https://twitter.com/pathway_com)
*   [](https://pathway.com/rss.xml)
*   [9k](https://github.com/pathwaycom/)

Company

*   [Pricing](https://pathway.com/pricing)
*   [Success Stories](https://pathway.com/success-stories)
*   [Careers](https://pathway.com/careers)
*   [Events](https://pathway.com/events)
*   [Products](https://pathway.com/products)

Developers

*   [Documentation](https://pathway.com/developers/)
*   [App Templates](https://pathway.com/developers/templates)
*   [Compare Stream Processing Frameworks](https://pathway.com/stream-processing-frameworks)
*   [Compare RAG Frameworks](https://pathway.com/rag-frameworks)
*   [Pathway vs Flink](https://pathway.com/flink-alternative)
*   [Pathway vs Kafka Streams](https://pathway.com/kafka-streams-alternative)
*   [Pathway vs Spark Streaming](https://pathway.com/spark-streaming-alternative)
*   [Get your license](https://pathway.com/get-license)

About

*   [Team](https://pathway.com/team)
*   [Licensing](https://pathway.com/license)
*   [Media kit](https://pathway.com/media-kit)
*   [Glossary](https://pathway.com/glossary)
*   [Friends](https://pathway.com/friends)
*   [Legal](https://pathway.com/privacy_gdpr_di)

Contact

*   Let's talk
*   [Chat with us on Discord](https://discord.com/invite/pathway)
*   Pathway
*   1300 El Camino Real
*   Suite 100 #54
*   Menlo Park
*   CA 94025, USA

© 2021-2024 Pathway

   

SearchK